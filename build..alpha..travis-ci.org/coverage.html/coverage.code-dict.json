{"/home/travis/build/npmtest/node-npmtest-bootstrap-table/test.js":"/* istanbul instrument in package npmtest_bootstrap_table */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/lib.npmtest_bootstrap_table.js":"/* istanbul instrument in package npmtest_bootstrap_table */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_bootstrap_table = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_bootstrap_table = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-bootstrap-table && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_bootstrap_table */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_bootstrap_table\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_bootstrap_table.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_bootstrap_table.rollup.js'] =\n            local.assetsDict['/assets.npmtest_bootstrap_table.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_bootstrap_table.__dirname + '/lib.npmtest_bootstrap_table.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/dist/bootstrap-table.js":"/**\n * @author zhixin wen <wenzhixin2010@gmail.com>\n * version: 1.11.1\n * https://github.com/wenzhixin/bootstrap-table/\n */\n\n(function ($) {\n    'use strict';\n\n    // TOOLS DEFINITION\n    // ======================\n\n    var cachedWidth = null;\n\n    // it only does '%s', and return '' when arguments are undefined\n    var sprintf = function (str) {\n        var args = arguments,\n            flag = true,\n            i = 1;\n\n        str = str.replace(/%s/g, function () {\n            var arg = args[i++];\n\n            if (typeof arg === 'undefined') {\n                flag = false;\n                return '';\n            }\n            return arg;\n        });\n        return flag ? str : '';\n    };\n\n    var getPropertyFromOther = function (list, from, to, value) {\n        var result = '';\n        $.each(list, function (i, item) {\n            if (item[from] === value) {\n                result = item[to];\n                return false;\n            }\n            return true;\n        });\n        return result;\n    };\n\n    var getFieldIndex = function (columns, field) {\n        var index = -1;\n\n        $.each(columns, function (i, column) {\n            if (column.field === field) {\n                index = i;\n                return false;\n            }\n            return true;\n        });\n        return index;\n    };\n\n    // http://jsfiddle.net/wenyi/47nz7ez9/3/\n    var setFieldIndex = function (columns) {\n        var i, j, k,\n            totalCol = 0,\n            flag = [];\n\n        for (i = 0; i < columns[0].length; i++) {\n            totalCol += columns[0][i].colspan || 1;\n        }\n\n        for (i = 0; i < columns.length; i++) {\n            flag[i] = [];\n            for (j = 0; j < totalCol; j++) {\n                flag[i][j] = false;\n            }\n        }\n\n        for (i = 0; i < columns.length; i++) {\n            for (j = 0; j < columns[i].length; j++) {\n                var r = columns[i][j],\n                    rowspan = r.rowspan || 1,\n                    colspan = r.colspan || 1,\n                    index = $.inArray(false, flag[i]);\n\n                if (colspan === 1) {\n                    r.fieldIndex = index;\n                    // when field is undefined, use index instead\n                    if (typeof r.field === 'undefined') {\n                        r.field = index;\n                    }\n                }\n\n                for (k = 0; k < rowspan; k++) {\n                    flag[i + k][index] = true;\n                }\n                for (k = 0; k < colspan; k++) {\n                    flag[i][index + k] = true;\n                }\n            }\n        }\n    };\n\n    var getScrollBarWidth = function () {\n        if (cachedWidth === null) {\n            var inner = $('<p/>').addClass('fixed-table-scroll-inner'),\n                outer = $('<div/>').addClass('fixed-table-scroll-outer'),\n                w1, w2;\n\n            outer.append(inner);\n            $('body').append(outer);\n\n            w1 = inner[0].offsetWidth;\n            outer.css('overflow', 'scroll');\n            w2 = inner[0].offsetWidth;\n\n            if (w1 === w2) {\n                w2 = outer[0].clientWidth;\n            }\n\n            outer.remove();\n            cachedWidth = w1 - w2;\n        }\n        return cachedWidth;\n    };\n\n    var calculateObjectValue = function (self, name, args, defaultValue) {\n        var func = name;\n\n        if (typeof name === 'string') {\n            // support obj.func1.func2\n            var names = name.split('.');\n\n            if (names.length > 1) {\n                func = window;\n                $.each(names, function (i, f) {\n                    func = func[f];\n                });\n            } else {\n                func = window[name];\n            }\n        }\n        if (typeof func === 'object') {\n            return func;\n        }\n        if (typeof func === 'function') {\n            return func.apply(self, args || []);\n        }\n        if (!func && typeof name === 'string' && sprintf.apply(this, [name].concat(args))) {\n            return sprintf.apply(this, [name].concat(args));\n        }\n        return defaultValue;\n    };\n\n    var compareObjects = function (objectA, objectB, compareLength) {\n        // Create arrays of property names\n        var objectAProperties = Object.getOwnPropertyNames(objectA),\n            objectBProperties = Object.getOwnPropertyNames(objectB),\n            propName = '';\n\n        if (compareLength) {\n            // If number of properties is different, objects are not equivalent\n            if (objectAProperties.length !== objectBProperties.length) {\n                return false;\n            }\n        }\n\n        for (var i = 0; i < objectAProperties.length; i++) {\n            propName = objectAProperties[i];\n\n            // If the property is not in the object B properties, continue with the next property\n            if ($.inArray(propName, objectBProperties) > -1) {\n                // If values of same property are not equal, objects are not equivalent\n                if (objectA[propName] !== objectB[propName]) {\n                    return false;\n                }\n            }\n        }\n\n        // If we made it this far, objects are considered equivalent\n        return true;\n    };\n\n    var escapeHTML = function (text) {\n        if (typeof text === 'string') {\n            return text\n                .replace(/&/g, '&amp;')\n                .replace(/</g, '&lt;')\n                .replace(/>/g, '&gt;')\n                .replace(/\"/g, '&quot;')\n                .replace(/'/g, '&#039;')\n                .replace(/`/g, '&#x60;');\n        }\n        return text;\n    };\n\n    var getRealDataAttr = function (dataAttr) {\n        for (var attr in dataAttr) {\n            var auxAttr = attr.split(/(?=[A-Z])/).join('-').toLowerCase();\n            if (auxAttr !== attr) {\n                dataAttr[auxAttr] = dataAttr[attr];\n                delete dataAttr[attr];\n            }\n        }\n\n        return dataAttr;\n    };\n\n    var getItemField = function (item, field, escape) {\n        var value = item;\n\n        if (typeof field !== 'string' || item.hasOwnProperty(field)) {\n            return escape ? escapeHTML(item[field]) : item[field];\n        }\n        var props = field.split('.');\n        for (var p in props) {\n            if (props.hasOwnProperty(p)) {\n                value = value && value[props[p]];\n            }\n        }\n        return escape ? escapeHTML(value) : value;\n    };\n\n    var isIEBrowser = function () {\n        return !!(navigator.userAgent.indexOf(\"MSIE \") > 0 || !!navigator.userAgent.match(/Trident.*rv\\:11\\./));\n    };\n\n    var objectKeys = function () {\n        // From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\n        if (!Object.keys) {\n            Object.keys = (function() {\n                var hasOwnProperty = Object.prototype.hasOwnProperty,\n                    hasDontEnumBug = !({ toString: null }).propertyIsEnumerable('toString'),\n                    dontEnums = [\n                        'toString',\n                        'toLocaleString',\n                        'valueOf',\n                        'hasOwnProperty',\n                        'isPrototypeOf',\n                        'propertyIsEnumerable',\n                        'constructor'\n                    ],\n                    dontEnumsLength = dontEnums.length;\n\n                return function(obj) {\n                    if (typeof obj !== 'object' && (typeof obj !== 'function' || obj === null)) {\n                        throw new TypeError('Object.keys called on non-object');\n                    }\n\n                    var result = [], prop, i;\n\n                    for (prop in obj) {\n                        if (hasOwnProperty.call(obj, prop)) {\n                            result.push(prop);\n                        }\n                    }\n\n                    if (hasDontEnumBug) {\n                        for (i = 0; i < dontEnumsLength; i++) {\n                            if (hasOwnProperty.call(obj, dontEnums[i])) {\n                                result.push(dontEnums[i]);\n                            }\n                        }\n                    }\n                    return result;\n                };\n            }());\n        }\n    };\n\n    // BOOTSTRAP TABLE CLASS DEFINITION\n    // ======================\n\n    var BootstrapTable = function (el, options) {\n        this.options = options;\n        this.$el = $(el);\n        this.$el_ = this.$el.clone();\n        this.timeoutId_ = 0;\n        this.timeoutFooter_ = 0;\n\n        this.init();\n    };\n\n    BootstrapTable.DEFAULTS = {\n        classes: 'table table-hover',\n        sortClass: undefined,\n        locale: undefined,\n        height: undefined,\n        undefinedText: '-',\n        sortName: undefined,\n        sortOrder: 'asc',\n        sortStable: false,\n        striped: false,\n        columns: [[]],\n        data: [],\n        totalField: 'total',\n        dataField: 'rows',\n        method: 'get',\n        url: undefined,\n        ajax: undefined,\n        cache: true,\n        contentType: 'application/json',\n        dataType: 'json',\n        ajaxOptions: {},\n        queryParams: function (params) {\n            return params;\n        },\n        queryParamsType: 'limit', // undefined\n        responseHandler: function (res) {\n            return res;\n        },\n        pagination: false,\n        onlyInfoPagination: false,\n        paginationLoop: true,\n        sidePagination: 'client', // client or server\n        totalRows: 0, // server side need to set\n        pageNumber: 1,\n        pageSize: 10,\n        pageList: [10, 25, 50, 100],\n        paginationHAlign: 'right', //right, left\n        paginationVAlign: 'bottom', //bottom, top, both\n        paginationDetailHAlign: 'left', //right, left\n        paginationPreText: '&lsaquo;',\n        paginationNextText: '&rsaquo;',\n        search: false,\n        searchOnEnterKey: false,\n        strictSearch: false,\n        searchAlign: 'right',\n        selectItemName: 'btSelectItem',\n        showHeader: true,\n        showFooter: false,\n        showColumns: false,\n        showPaginationSwitch: false,\n        showRefresh: false,\n        showToggle: false,\n        buttonsAlign: 'right',\n        smartDisplay: true,\n        escape: false,\n        minimumCountColumns: 1,\n        idField: undefined,\n        uniqueId: undefined,\n        cardView: false,\n        detailView: false,\n        detailFormatter: function (index, row) {\n            return '';\n        },\n        trimOnSearch: true,\n        clickToSelect: false,\n        singleSelect: false,\n        toolbar: undefined,\n        toolbarAlign: 'left',\n        checkboxHeader: true,\n        sortable: true,\n        silentSort: true,\n        maintainSelected: false,\n        searchTimeOut: 500,\n        searchText: '',\n        iconSize: undefined,\n        buttonsClass: 'default',\n        iconsPrefix: 'glyphicon', // glyphicon of fa (font awesome)\n        icons: {\n            paginationSwitchDown: 'glyphicon-collapse-down icon-chevron-down',\n            paginationSwitchUp: 'glyphicon-collapse-up icon-chevron-up',\n            refresh: 'glyphicon-refresh icon-refresh',\n            toggle: 'glyphicon-list-alt icon-list-alt',\n            columns: 'glyphicon-th icon-th',\n            detailOpen: 'glyphicon-plus icon-plus',\n            detailClose: 'glyphicon-minus icon-minus'\n        },\n\n        customSearch: $.noop,\n\n        customSort: $.noop,\n\n        rowStyle: function (row, index) {\n            return {};\n        },\n\n        rowAttributes: function (row, index) {\n            return {};\n        },\n\n        footerStyle: function (row, index) {\n            return {};\n        },\n\n        onAll: function (name, args) {\n            return false;\n        },\n        onClickCell: function (field, value, row, $element) {\n            return false;\n        },\n        onDblClickCell: function (field, value, row, $element) {\n            return false;\n        },\n        onClickRow: function (item, $element) {\n            return false;\n        },\n        onDblClickRow: function (item, $element) {\n            return false;\n        },\n        onSort: function (name, order) {\n            return false;\n        },\n        onCheck: function (row) {\n            return false;\n        },\n        onUncheck: function (row) {\n            return false;\n        },\n        onCheckAll: function (rows) {\n            return false;\n        },\n        onUncheckAll: function (rows) {\n            return false;\n        },\n        onCheckSome: function (rows) {\n            return false;\n        },\n        onUncheckSome: function (rows) {\n            return false;\n        },\n        onLoadSuccess: function (data) {\n            return false;\n        },\n        onLoadError: function (status) {\n            return false;\n        },\n        onColumnSwitch: function (field, checked) {\n            return false;\n        },\n        onPageChange: function (number, size) {\n            return false;\n        },\n        onSearch: function (text) {\n            return false;\n        },\n        onToggle: function (cardView) {\n            return false;\n        },\n        onPreBody: function (data) {\n            return false;\n        },\n        onPostBody: function () {\n            return false;\n        },\n        onPostHeader: function () {\n            return false;\n        },\n        onExpandRow: function (index, row, $detail) {\n            return false;\n        },\n        onCollapseRow: function (index, row) {\n            return false;\n        },\n        onRefreshOptions: function (options) {\n            return false;\n        },\n        onRefresh: function (params) {\n          return false;\n        },\n        onResetView: function () {\n            return false;\n        }\n    };\n\n    BootstrapTable.LOCALES = {};\n\n    BootstrapTable.LOCALES['en-US'] = BootstrapTable.LOCALES.en = {\n        formatLoadingMessage: function () {\n            return 'Loading, please wait...';\n        },\n        formatRecordsPerPage: function (pageNumber) {\n            return sprintf('%s rows per page', pageNumber);\n        },\n        formatShowingRows: function (pageFrom, pageTo, totalRows) {\n            return sprintf('Showing %s to %s of %s rows', pageFrom, pageTo, totalRows);\n        },\n        formatDetailPagination: function (totalRows) {\n            return sprintf('Showing %s rows', totalRows);\n        },\n        formatSearch: function () {\n            return 'Search';\n        },\n        formatNoMatches: function () {\n            return 'No matching records found';\n        },\n        formatPaginationSwitch: function () {\n            return 'Hide/Show pagination';\n        },\n        formatRefresh: function () {\n            return 'Refresh';\n        },\n        formatToggle: function () {\n            return 'Toggle';\n        },\n        formatColumns: function () {\n            return 'Columns';\n        },\n        formatAllRows: function () {\n            return 'All';\n        }\n    };\n\n    $.extend(BootstrapTable.DEFAULTS, BootstrapTable.LOCALES['en-US']);\n\n    BootstrapTable.COLUMN_DEFAULTS = {\n        radio: false,\n        checkbox: false,\n        checkboxEnabled: true,\n        field: undefined,\n        title: undefined,\n        titleTooltip: undefined,\n        'class': undefined,\n        align: undefined, // left, right, center\n        halign: undefined, // left, right, center\n        falign: undefined, // left, right, center\n        valign: undefined, // top, middle, bottom\n        width: undefined,\n        sortable: false,\n        order: 'asc', // asc, desc\n        visible: true,\n        switchable: true,\n        clickToSelect: true,\n        formatter: undefined,\n        footerFormatter: undefined,\n        events: undefined,\n        sorter: undefined,\n        sortName: undefined,\n        cellStyle: undefined,\n        searchable: true,\n        searchFormatter: true,\n        cardVisible: true,\n        escape : false\n    };\n\n    BootstrapTable.EVENTS = {\n        'all.bs.table': 'onAll',\n        'click-cell.bs.table': 'onClickCell',\n        'dbl-click-cell.bs.table': 'onDblClickCell',\n        'click-row.bs.table': 'onClickRow',\n        'dbl-click-row.bs.table': 'onDblClickRow',\n        'sort.bs.table': 'onSort',\n        'check.bs.table': 'onCheck',\n        'uncheck.bs.table': 'onUncheck',\n        'check-all.bs.table': 'onCheckAll',\n        'uncheck-all.bs.table': 'onUncheckAll',\n        'check-some.bs.table': 'onCheckSome',\n        'uncheck-some.bs.table': 'onUncheckSome',\n        'load-success.bs.table': 'onLoadSuccess',\n        'load-error.bs.table': 'onLoadError',\n        'column-switch.bs.table': 'onColumnSwitch',\n        'page-change.bs.table': 'onPageChange',\n        'search.bs.table': 'onSearch',\n        'toggle.bs.table': 'onToggle',\n        'pre-body.bs.table': 'onPreBody',\n        'post-body.bs.table': 'onPostBody',\n        'post-header.bs.table': 'onPostHeader',\n        'expand-row.bs.table': 'onExpandRow',\n        'collapse-row.bs.table': 'onCollapseRow',\n        'refresh-options.bs.table': 'onRefreshOptions',\n        'reset-view.bs.table': 'onResetView',\n        'refresh.bs.table': 'onRefresh'\n    };\n\n    BootstrapTable.prototype.init = function () {\n        this.initLocale();\n        this.initContainer();\n        this.initTable();\n        this.initHeader();\n        this.initData();\n        this.initHiddenRows();\n        this.initFooter();\n        this.initToolbar();\n        this.initPagination();\n        this.initBody();\n        this.initSearchText();\n        this.initServer();\n    };\n\n    BootstrapTable.prototype.initLocale = function () {\n        if (this.options.locale) {\n            var parts = this.options.locale.split(/-|_/);\n            parts[0].toLowerCase();\n            if (parts[1]) parts[1].toUpperCase();\n            if ($.fn.bootstrapTable.locales[this.options.locale]) {\n                // locale as requested\n                $.extend(this.options, $.fn.bootstrapTable.locales[this.options.locale]);\n            } else if ($.fn.bootstrapTable.locales[parts.join('-')]) {\n                // locale with sep set to - (in case original was specified with _)\n                $.extend(this.options, $.fn.bootstrapTable.locales[parts.join('-')]);\n            } else if ($.fn.bootstrapTable.locales[parts[0]]) {\n                // short locale language code (i.e. 'en')\n                $.extend(this.options, $.fn.bootstrapTable.locales[parts[0]]);\n            }\n        }\n    };\n\n    BootstrapTable.prototype.initContainer = function () {\n        this.$container = $([\n            '<div class=\"bootstrap-table\">',\n            '<div class=\"fixed-table-toolbar\"></div>',\n            this.options.paginationVAlign === 'top' || this.options.paginationVAlign === 'both' ?\n                '<div class=\"fixed-table-pagination\" style=\"clear: both;\"></div>' :\n                '',\n            '<div class=\"fixed-table-container\">',\n            '<div class=\"fixed-table-header\"><table></table></div>',\n            '<div class=\"fixed-table-body\">',\n            '<div class=\"fixed-table-loading\">',\n            this.options.formatLoadingMessage(),\n            '</div>',\n            '</div>',\n            '<div class=\"fixed-table-footer\"><table><tr></tr></table></div>',\n            this.options.paginationVAlign === 'bottom' || this.options.paginationVAlign === 'both' ?\n                '<div class=\"fixed-table-pagination\"></div>' :\n                '',\n            '</div>',\n            '</div>'\n        ].join(''));\n\n        this.$container.insertAfter(this.$el);\n        this.$tableContainer = this.$container.find('.fixed-table-container');\n        this.$tableHeader = this.$container.find('.fixed-table-header');\n        this.$tableBody = this.$container.find('.fixed-table-body');\n        this.$tableLoading = this.$container.find('.fixed-table-loading');\n        this.$tableFooter = this.$container.find('.fixed-table-footer');\n        this.$toolbar = this.$container.find('.fixed-table-toolbar');\n        this.$pagination = this.$container.find('.fixed-table-pagination');\n\n        this.$tableBody.append(this.$el);\n        this.$container.after('<div class=\"clearfix\"></div>');\n\n        this.$el.addClass(this.options.classes);\n        if (this.options.striped) {\n            this.$el.addClass('table-striped');\n        }\n        if ($.inArray('table-no-bordered', this.options.classes.split(' ')) !== -1) {\n            this.$tableContainer.addClass('table-no-bordered');\n        }\n    };\n\n    BootstrapTable.prototype.initTable = function () {\n        var that = this,\n            columns = [],\n            data = [];\n\n        this.$header = this.$el.find('>thead');\n        if (!this.$header.length) {\n            this.$header = $('<thead></thead>').appendTo(this.$el);\n        }\n        this.$header.find('tr').each(function () {\n            var column = [];\n\n            $(this).find('th').each(function () {\n                // Fix #2014 - getFieldIndex and elsewhere assume this is string, causes issues if not\n                if (typeof $(this).data('field') !== 'undefined') {\n                    $(this).data('field', $(this).data('field') + '');\n                }\n                column.push($.extend({}, {\n                    title: $(this).html(),\n                    'class': $(this).attr('class'),\n                    titleTooltip: $(this).attr('title'),\n                    rowspan: $(this).attr('rowspan') ? +$(this).attr('rowspan') : undefined,\n                    colspan: $(this).attr('colspan') ? +$(this).attr('colspan') : undefined\n                }, $(this).data()));\n            });\n            columns.push(column);\n        });\n        if (!$.isArray(this.options.columns[0])) {\n            this.options.columns = [this.options.columns];\n        }\n        this.options.columns = $.extend(true, [], columns, this.options.columns);\n        this.columns = [];\n\n        setFieldIndex(this.options.columns);\n        $.each(this.options.columns, function (i, columns) {\n            $.each(columns, function (j, column) {\n                column = $.extend({}, BootstrapTable.COLUMN_DEFAULTS, column);\n\n                if (typeof column.fieldIndex !== 'undefined') {\n                    that.columns[column.fieldIndex] = column;\n                }\n\n                that.options.columns[i][j] = column;\n            });\n        });\n\n        // if options.data is setting, do not process tbody data\n        if (this.options.data.length) {\n            return;\n        }\n\n        var m = [];\n        this.$el.find('>tbody>tr').each(function (y) {\n            var row = {};\n\n            // save tr's id, class and data-* attributes\n            row._id = $(this).attr('id');\n            row._class = $(this).attr('class');\n            row._data = getRealDataAttr($(this).data());\n\n            $(this).find('>td').each(function (x) {\n                var $this = $(this),\n                    cspan = +$this.attr('colspan') || 1,\n                    rspan = +$this.attr('rowspan') || 1,\n                    tx, ty;\n\n                for (; m[y] && m[y][x]; x++); //skip already occupied cells in current row\n\n                for (tx = x; tx < x + cspan; tx++) { //mark matrix elements occupied by current cell with true\n                    for (ty = y; ty < y + rspan; ty++) {\n                        if (!m[ty]) { //fill missing rows\n                            m[ty] = [];\n                        }\n                        m[ty][tx] = true;\n                    }\n                }\n\n                var field = that.columns[x].field;\n\n                row[field] = $(this).html();\n                // save td's id, class and data-* attributes\n                row['_' + field + '_id'] = $(this).attr('id');\n                row['_' + field + '_class'] = $(this).attr('class');\n                row['_' + field + '_rowspan'] = $(this).attr('rowspan');\n                row['_' + field + '_colspan'] = $(this).attr('colspan');\n                row['_' + field + '_title'] = $(this).attr('title');\n                row['_' + field + '_data'] = getRealDataAttr($(this).data());\n            });\n            data.push(row);\n        });\n        this.options.data = data;\n        if (data.length) this.fromHtml = true;\n    };\n\n    BootstrapTable.prototype.initHeader = function () {\n        var that = this,\n            visibleColumns = {},\n            html = [];\n\n        this.header = {\n            fields: [],\n            styles: [],\n            classes: [],\n            formatters: [],\n            events: [],\n            sorters: [],\n            sortNames: [],\n            cellStyles: [],\n            searchables: []\n        };\n\n        $.each(this.options.columns, function (i, columns) {\n            html.push('<tr>');\n\n            if (i === 0 && !that.options.cardView && that.options.detailView) {\n                html.push(sprintf('<th class=\"detail\" rowspan=\"%s\"><div class=\"fht-cell\"></div></th>',\n                    that.options.columns.length));\n            }\n\n            $.each(columns, function (j, column) {\n                var text = '',\n                    halign = '', // header align style\n                    align = '', // body align style\n                    style = '',\n                    class_ = sprintf(' class=\"%s\"', column['class']),\n                    order = that.options.sortOrder || column.order,\n                    unitWidth = 'px',\n                    width = column.width;\n\n                if (column.width !== undefined && (!that.options.cardView)) {\n                    if (typeof column.width === 'string') {\n                        if (column.width.indexOf('%') !== -1) {\n                            unitWidth = '%';\n                        }\n                    }\n                }\n                if (column.width && typeof column.width === 'string') {\n                    width = column.width.replace('%', '').replace('px', '');\n                }\n\n                halign = sprintf('text-align: %s; ', column.halign ? column.halign : column.align);\n                align = sprintf('text-align: %s; ', column.align);\n                style = sprintf('vertical-align: %s; ', column.valign);\n                style += sprintf('width: %s; ', (column.checkbox || column.radio) && !width ?\n                    '36px' : (width ? width + unitWidth : undefined));\n\n                if (typeof column.fieldIndex !== 'undefined') {\n                    that.header.fields[column.fieldIndex] = column.field;\n                    that.header.styles[column.fieldIndex] = align + style;\n                    that.header.classes[column.fieldIndex] = class_;\n                    that.header.formatters[column.fieldIndex] = column.formatter;\n                    that.header.events[column.fieldIndex] = column.events;\n                    that.header.sorters[column.fieldIndex] = column.sorter;\n                    that.header.sortNames[column.fieldIndex] = column.sortName;\n                    that.header.cellStyles[column.fieldIndex] = column.cellStyle;\n                    that.header.searchables[column.fieldIndex] = column.searchable;\n\n                    if (!column.visible) {\n                        return;\n                    }\n\n                    if (that.options.cardView && (!column.cardVisible)) {\n                        return;\n                    }\n\n                    visibleColumns[column.field] = column;\n                }\n\n                html.push('<th' + sprintf(' title=\"%s\"', column.titleTooltip),\n                    column.checkbox || column.radio ?\n                        sprintf(' class=\"bs-checkbox %s\"', column['class'] || '') :\n                        class_,\n                    sprintf(' style=\"%s\"', halign + style),\n                    sprintf(' rowspan=\"%s\"', column.rowspan),\n                    sprintf(' colspan=\"%s\"', column.colspan),\n                    sprintf(' data-field=\"%s\"', column.field),\n                    '>');\n\n                html.push(sprintf('<div class=\"th-inner %s\">', that.options.sortable && column.sortable ?\n                    'sortable both' : ''));\n\n                text = that.options.escape ? escapeHTML(column.title) : column.title;\n\n                if (column.checkbox) {\n                    if (!that.options.singleSelect && that.options.checkboxHeader) {\n                        text = '<input name=\"btSelectAll\" type=\"checkbox\" />';\n                    }\n                    that.header.stateField = column.field;\n                }\n                if (column.radio) {\n                    text = '';\n                    that.header.stateField = column.field;\n                    that.options.singleSelect = true;\n                }\n\n                html.push(text);\n                html.push('</div>');\n                html.push('<div class=\"fht-cell\"></div>');\n                html.push('</div>');\n                html.push('</th>');\n            });\n            html.push('</tr>');\n        });\n\n        this.$header.html(html.join(''));\n        this.$header.find('th[data-field]').each(function (i) {\n            $(this).data(visibleColumns[$(this).data('field')]);\n        });\n        this.$container.off('click', '.th-inner').on('click', '.th-inner', function (event) {\n            var target = $(this);\n\n            if (that.options.detailView) {\n                if (target.closest('.bootstrap-table')[0] !== that.$container[0])\n                    return false;\n            }\n\n            if (that.options.sortable && target.parent().data().sortable) {\n                that.onSort(event);\n            }\n        });\n\n        this.$header.children().children().off('keypress').on('keypress', function (event) {\n            if (that.options.sortable && $(this).data().sortable) {\n                var code = event.keyCode || event.which;\n                if (code == 13) { //Enter keycode\n                    that.onSort(event);\n                }\n            }\n        });\n\n        $(window).off('resize.bootstrap-table');\n        if (!this.options.showHeader || this.options.cardView) {\n            this.$header.hide();\n            this.$tableHeader.hide();\n            this.$tableLoading.css('top', 0);\n        } else {\n            this.$header.show();\n            this.$tableHeader.show();\n            this.$tableLoading.css('top', this.$header.outerHeight() + 1);\n            // Assign the correct sortable arrow\n            this.getCaret();\n            $(window).on('resize.bootstrap-table', $.proxy(this.resetWidth, this));\n        }\n\n        this.$selectAll = this.$header.find('[name=\"btSelectAll\"]');\n        this.$selectAll.off('click').on('click', function () {\n                var checked = $(this).prop('checked');\n                that[checked ? 'checkAll' : 'uncheckAll']();\n                that.updateSelected();\n            });\n    };\n\n    BootstrapTable.prototype.initFooter = function () {\n        if (!this.options.showFooter || this.options.cardView) {\n            this.$tableFooter.hide();\n        } else {\n            this.$tableFooter.show();\n        }\n    };\n\n    /**\n     * @param data\n     * @param type: append / prepend\n     */\n    BootstrapTable.prototype.initData = function (data, type) {\n        if (type === 'append') {\n            this.data = this.data.concat(data);\n        } else if (type === 'prepend') {\n            this.data = [].concat(data).concat(this.data);\n        } else {\n            this.data = data || this.options.data;\n        }\n\n        // Fix #839 Records deleted when adding new row on filtered table\n        if (type === 'append') {\n            this.options.data = this.options.data.concat(data);\n        } else if (type === 'prepend') {\n            this.options.data = [].concat(data).concat(this.options.data);\n        } else {\n            this.options.data = this.data;\n        }\n\n        if (this.options.sidePagination === 'server') {\n            return;\n        }\n        this.initSort();\n    };\n\n    BootstrapTable.prototype.initSort = function () {\n        var that = this,\n            name = this.options.sortName,\n            order = this.options.sortOrder === 'desc' ? -1 : 1,\n            index = $.inArray(this.options.sortName, this.header.fields),\n            timeoutId = 0;\n\n        if (this.options.customSort !== $.noop) {\n            this.options.customSort.apply(this, [this.options.sortName, this.options.sortOrder]);\n            return;\n        }\n\n        if (index !== -1) {\n            if (this.options.sortStable) {\n                $.each(this.data, function (i, row) {\n                    if (!row.hasOwnProperty('_position')) row._position = i;\n                });\n            }\n\n            this.data.sort(function (a, b) {\n                if (that.header.sortNames[index]) {\n                    name = that.header.sortNames[index];\n                }\n                var aa = getItemField(a, name, that.options.escape),\n                    bb = getItemField(b, name, that.options.escape),\n                    value = calculateObjectValue(that.header, that.header.sorters[index], [aa, bb]);\n\n                if (value !== undefined) {\n                    return order * value;\n                }\n\n                // Fix #161: undefined or null string sort bug.\n                if (aa === undefined || aa === null) {\n                    aa = '';\n                }\n                if (bb === undefined || bb === null) {\n                    bb = '';\n                }\n\n                if (that.options.sortStable && aa === bb) {\n                    aa = a._position;\n                    bb = b._position;\n                }\n\n                // IF both values are numeric, do a numeric comparison\n                if ($.isNumeric(aa) && $.isNumeric(bb)) {\n                    // Convert numerical values form string to float.\n                    aa = parseFloat(aa);\n                    bb = parseFloat(bb);\n                    if (aa < bb) {\n                        return order * -1;\n                    }\n                    return order;\n                }\n\n                if (aa === bb) {\n                    return 0;\n                }\n\n                // If value is not a string, convert to string\n                if (typeof aa !== 'string') {\n                    aa = aa.toString();\n                }\n\n                if (aa.localeCompare(bb) === -1) {\n                    return order * -1;\n                }\n\n                return order;\n            });\n\n            if (this.options.sortClass !== undefined) {\n                clearTimeout(timeoutId);\n                timeoutId = setTimeout(function () {\n                    that.$el.removeClass(that.options.sortClass);\n                    var index = that.$header.find(sprintf('[data-field=\"%s\"]',\n                        that.options.sortName).index() + 1);\n                    that.$el.find(sprintf('tr td:nth-child(%s)', index))\n                        .addClass(that.options.sortClass);\n                }, 250);\n            }\n        }\n    };\n\n    BootstrapTable.prototype.onSort = function (event) {\n        var $this = event.type === \"keypress\" ? $(event.currentTarget) : $(event.currentTarget).parent(),\n            $this_ = this.$header.find('th').eq($this.index());\n\n        this.$header.add(this.$header_).find('span.order').remove();\n\n        if (this.options.sortName === $this.data('field')) {\n            this.options.sortOrder = this.options.sortOrder === 'asc' ? 'desc' : 'asc';\n        } else {\n            this.options.sortName = $this.data('field');\n            this.options.sortOrder = $this.data('order') === 'asc' ? 'desc' : 'asc';\n        }\n        this.trigger('sort', this.options.sortName, this.options.sortOrder);\n\n        $this.add($this_).data('order', this.options.sortOrder);\n\n        // Assign the correct sortable arrow\n        this.getCaret();\n\n        if (this.options.sidePagination === 'server') {\n            this.initServer(this.options.silentSort);\n            return;\n        }\n\n        this.initSort();\n        this.initBody();\n    };\n\n    BootstrapTable.prototype.initToolbar = function () {\n        var that = this,\n            html = [],\n            timeoutId = 0,\n            $keepOpen,\n            $search,\n            switchableCount = 0;\n\n        if (this.$toolbar.find('.bs-bars').children().length) {\n            $('body').append($(this.options.toolbar));\n        }\n        this.$toolbar.html('');\n\n        if (typeof this.options.toolbar === 'string' || typeof this.options.toolbar === 'object') {\n            $(sprintf('<div class=\"bs-bars pull-%s\"></div>', this.options.toolbarAlign))\n                .appendTo(this.$toolbar)\n                .append($(this.options.toolbar));\n        }\n\n        // showColumns, showToggle, showRefresh\n        html = [sprintf('<div class=\"columns columns-%s btn-group pull-%s\">',\n            this.options.buttonsAlign, this.options.buttonsAlign)];\n\n        if (typeof this.options.icons === 'string') {\n            this.options.icons = calculateObjectValue(null, this.options.icons);\n        }\n\n        if (this.options.showPaginationSwitch) {\n            html.push(sprintf('<button class=\"btn' +\n                    sprintf(' btn-%s', this.options.buttonsClass) +\n                    sprintf(' btn-%s', this.options.iconSize) +\n                    '\" type=\"button\" name=\"paginationSwitch\" aria-label=\"pagination Switch\" title=\"%s\">',\n                    this.options.formatPaginationSwitch()),\n                sprintf('<i class=\"%s %s\"></i>', this.options.iconsPrefix, this.options.icons.paginationSwitchDown),\n                '</button>');\n        }\n\n        if (this.options.showRefresh) {\n            html.push(sprintf('<button class=\"btn' +\n                    sprintf(' btn-%s', this.options.buttonsClass) +\n                    sprintf(' btn-%s', this.options.iconSize) +\n                    '\" type=\"button\" name=\"refresh\" aria-label=\"refresh\" title=\"%s\">',\n                    this.options.formatRefresh()),\n                sprintf('<i class=\"%s %s\"></i>', this.options.iconsPrefix, this.options.icons.refresh),\n                '</button>');\n        }\n\n        if (this.options.showToggle) {\n            html.push(sprintf('<button class=\"btn' +\n                    sprintf(' btn-%s', this.options.buttonsClass) +\n                    sprintf(' btn-%s', this.options.iconSize) +\n                    '\" type=\"button\" name=\"toggle\" aria-label=\"toggle\" title=\"%s\">',\n                    this.options.formatToggle()),\n                sprintf('<i class=\"%s %s\"></i>', this.options.iconsPrefix, this.options.icons.toggle),\n                '</button>');\n        }\n\n        if (this.options.showColumns) {\n            html.push(sprintf('<div class=\"keep-open btn-group\" title=\"%s\">',\n                    this.options.formatColumns()),\n                '<button type=\"button\" aria-label=\"columns\" class=\"btn' +\n                sprintf(' btn-%s', this.options.buttonsClass) +\n                sprintf(' btn-%s', this.options.iconSize) +\n                ' dropdown-toggle\" data-toggle=\"dropdown\">',\n                sprintf('<i class=\"%s %s\"></i>', this.options.iconsPrefix, this.options.icons.columns),\n                ' <span class=\"caret\"></span>',\n                '</button>',\n                '<ul class=\"dropdown-menu\" role=\"menu\">');\n\n            $.each(this.columns, function (i, column) {\n                if (column.radio || column.checkbox) {\n                    return;\n                }\n\n                if (that.options.cardView && !column.cardVisible) {\n                    return;\n                }\n\n                var checked = column.visible ? ' checked=\"checked\"' : '';\n\n                if (column.switchable) {\n                    html.push(sprintf('<li role=\"menuitem\">' +\n                        '<label><input type=\"checkbox\" data-field=\"%s\" value=\"%s\"%s> %s</label>' +\n                        '</li>', column.field, i, checked, column.title));\n                    switchableCount++;\n                }\n            });\n            html.push('</ul>',\n                '</div>');\n        }\n\n        html.push('</div>');\n\n        // Fix #188: this.showToolbar is for extensions\n        if (this.showToolbar || html.length > 2) {\n            this.$toolbar.append(html.join(''));\n        }\n\n        if (this.options.showPaginationSwitch) {\n            this.$toolbar.find('button[name=\"paginationSwitch\"]')\n                .off('click').on('click', $.proxy(this.togglePagination, this));\n        }\n\n        if (this.options.showRefresh) {\n            this.$toolbar.find('button[name=\"refresh\"]')\n                .off('click').on('click', $.proxy(this.refresh, this));\n        }\n\n        if (this.options.showToggle) {\n            this.$toolbar.find('button[name=\"toggle\"]')\n                .off('click').on('click', function () {\n                    that.toggleView();\n                });\n        }\n\n        if (this.options.showColumns) {\n            $keepOpen = this.$toolbar.find('.keep-open');\n\n            if (switchableCount <= this.options.minimumCountColumns) {\n                $keepOpen.find('input').prop('disabled', true);\n            }\n\n            $keepOpen.find('li').off('click').on('click', function (event) {\n                event.stopImmediatePropagation();\n            });\n            $keepOpen.find('input').off('click').on('click', function () {\n                var $this = $(this);\n\n                that.toggleColumn($(this).val(), $this.prop('checked'), false);\n                that.trigger('column-switch', $(this).data('field'), $this.prop('checked'));\n            });\n        }\n\n        if (this.options.search) {\n            html = [];\n            html.push(\n                '<div class=\"pull-' + this.options.searchAlign + ' search\">',\n                sprintf('<input class=\"form-control' +\n                    sprintf(' input-%s', this.options.iconSize) +\n                    '\" type=\"text\" placeholder=\"%s\">',\n                    this.options.formatSearch()),\n                '</div>');\n\n            this.$toolbar.append(html.join(''));\n            $search = this.$toolbar.find('.search input');\n            $search.off('keyup drop blur').on('keyup drop blur', function (event) {\n                if (that.options.searchOnEnterKey && event.keyCode !== 13) {\n                    return;\n                }\n\n                if ($.inArray(event.keyCode, [37, 38, 39, 40]) > -1) {\n                    return;\n                }\n\n                clearTimeout(timeoutId); // doesn't matter if it's 0\n                timeoutId = setTimeout(function () {\n                    that.onSearch(event);\n                }, that.options.searchTimeOut);\n            });\n\n            if (isIEBrowser()) {\n                $search.off('mouseup').on('mouseup', function (event) {\n                    clearTimeout(timeoutId); // doesn't matter if it's 0\n                    timeoutId = setTimeout(function () {\n                        that.onSearch(event);\n                    }, that.options.searchTimeOut);\n                });\n            }\n        }\n    };\n\n    BootstrapTable.prototype.onSearch = function (event) {\n        var text = $.trim($(event.currentTarget).val());\n\n        // trim search input\n        if (this.options.trimOnSearch && $(event.currentTarget).val() !== text) {\n            $(event.currentTarget).val(text);\n        }\n\n        if (text === this.searchText) {\n            return;\n        }\n        this.searchText = text;\n        this.options.searchText = text;\n\n        this.options.pageNumber = 1;\n        this.initSearch();\n        this.updatePagination();\n        this.trigger('search', text);\n    };\n\n    BootstrapTable.prototype.initSearch = function () {\n        var that = this;\n\n        if (this.options.sidePagination !== 'server') {\n            if (this.options.customSearch !== $.noop) {\n                this.options.customSearch.apply(this, [this.searchText]);\n                return;\n            }\n\n            var s = this.searchText && (this.options.escape ?\n                escapeHTML(this.searchText) : this.searchText).toLowerCase();\n            var f = $.isEmptyObject(this.filterColumns) ? null : this.filterColumns;\n\n            // Check filter\n            this.data = f ? $.grep(this.options.data, function (item, i) {\n                for (var key in f) {\n                    if ($.isArray(f[key]) && $.inArray(item[key], f[key]) === -1 ||\n                            !$.isArray(f[key]) && item[key] !== f[key]) {\n                        return false;\n                    }\n                }\n                return true;\n            }) : this.options.data;\n\n            this.data = s ? $.grep(this.data, function (item, i) {\n                for (var j = 0; j < that.header.fields.length; j++) {\n\n                    if (!that.header.searchables[j]) {\n                        continue;\n                    }\n\n                    var key = $.isNumeric(that.header.fields[j]) ? parseInt(that.header.fields[j], 10) : that.header.fields[j];\n                    var column = that.columns[getFieldIndex(that.columns, key)];\n                    var value;\n\n                    if (typeof key === 'string') {\n                        value = item;\n                        var props = key.split('.');\n                        for (var prop_index = 0; prop_index < props.length; prop_index++) {\n                            value = value[props[prop_index]];\n                        }\n\n                        // Fix #142: respect searchForamtter boolean\n                        if (column && column.searchFormatter) {\n                            value = calculateObjectValue(column,\n                                that.header.formatters[j], [value, item, i], value);\n                        }\n                    } else {\n                        value = item[key];\n                    }\n\n                    if (typeof value === 'string' || typeof value === 'number') {\n                        if (that.options.strictSearch) {\n                            if ((value + '').toLowerCase() === s) {\n                                return true;\n                            }\n                        } else {\n                            if ((value + '').toLowerCase().indexOf(s) !== -1) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n                return false;\n            }) : this.data;\n        }\n    };\n\n    BootstrapTable.prototype.initPagination = function () {\n        if (!this.options.pagination) {\n            this.$pagination.hide();\n            return;\n        } else {\n            this.$pagination.show();\n        }\n\n        var that = this,\n            html = [],\n            $allSelected = false,\n            i, from, to,\n            $pageList,\n            $first, $pre,\n            $next, $last,\n            $number,\n            data = this.getData(),\n            pageList = this.options.pageList;\n\n        if (this.options.sidePagination !== 'server') {\n            this.options.totalRows = data.length;\n        }\n\n        this.totalPages = 0;\n        if (this.options.totalRows) {\n            if (this.options.pageSize === this.options.formatAllRows()) {\n                this.options.pageSize = this.options.totalRows;\n                $allSelected = true;\n            } else if (this.options.pageSize === this.options.totalRows) {\n                // Fix #667 Table with pagination,\n                // multiple pages and a search that matches to one page throws exception\n                var pageLst = typeof this.options.pageList === 'string' ?\n                    this.options.pageList.replace('[', '').replace(']', '')\n                        .replace(/ /g, '').toLowerCase().split(',') : this.options.pageList;\n                if ($.inArray(this.options.formatAllRows().toLowerCase(), pageLst)  > -1) {\n                    $allSelected = true;\n                }\n            }\n\n            this.totalPages = ~~((this.options.totalRows - 1) / this.options.pageSize) + 1;\n\n            this.options.totalPages = this.totalPages;\n        }\n        if (this.totalPages > 0 && this.options.pageNumber > this.totalPages) {\n            this.options.pageNumber = this.totalPages;\n        }\n\n        this.pageFrom = (this.options.pageNumber - 1) * this.options.pageSize + 1;\n        this.pageTo = this.options.pageNumber * this.options.pageSize;\n        if (this.pageTo > this.options.totalRows) {\n            this.pageTo = this.options.totalRows;\n        }\n\n        html.push(\n            '<div class=\"pull-' + this.options.paginationDetailHAlign + ' pagination-detail\">',\n            '<span class=\"pagination-info\">',\n            this.options.onlyInfoPagination ? this.options.formatDetailPagination(this.options.totalRows) :\n            this.options.formatShowingRows(this.pageFrom, this.pageTo, this.options.totalRows),\n            '</span>');\n\n        if (!this.options.onlyInfoPagination) {\n            html.push('<span class=\"page-list\">');\n\n            var pageNumber = [\n                    sprintf('<span class=\"btn-group %s\">',\n                        this.options.paginationVAlign === 'top' || this.options.paginationVAlign === 'both' ?\n                            'dropdown' : 'dropup'),\n                    '<button type=\"button\" class=\"btn' +\n                    sprintf(' btn-%s', this.options.buttonsClass) +\n                    sprintf(' btn-%s', this.options.iconSize) +\n                    ' dropdown-toggle\" data-toggle=\"dropdown\">',\n                    '<span class=\"page-size\">',\n                    $allSelected ? this.options.formatAllRows() : this.options.pageSize,\n                    '</span>',\n                    ' <span class=\"caret\"></span>',\n                    '</button>',\n                    '<ul class=\"dropdown-menu\" role=\"menu\">'\n                ];\n\n            if (typeof this.options.pageList === 'string') {\n                var list = this.options.pageList.replace('[', '').replace(']', '')\n                    .replace(/ /g, '').split(',');\n\n                pageList = [];\n                $.each(list, function (i, value) {\n                    pageList.push(value.toUpperCase() === that.options.formatAllRows().toUpperCase() ?\n                        that.options.formatAllRows() : +value);\n                });\n            }\n\n            $.each(pageList, function (i, page) {\n                if (!that.options.smartDisplay || i === 0 || pageList[i - 1] < that.options.totalRows) {\n                    var active;\n                    if ($allSelected) {\n                        active = page === that.options.formatAllRows() ? ' class=\"active\"' : '';\n                    } else {\n                        active = page === that.options.pageSize ? ' class=\"active\"' : '';\n                    }\n                    pageNumber.push(sprintf('<li role=\"menuitem\"%s><a href=\"#\">%s</a></li>', active, page));\n                }\n            });\n            pageNumber.push('</ul></span>');\n\n            html.push(this.options.formatRecordsPerPage(pageNumber.join('')));\n            html.push('</span>');\n\n            html.push('</div>',\n                '<div class=\"pull-' + this.options.paginationHAlign + ' pagination\">',\n                '<ul class=\"pagination' + sprintf(' pagination-%s', this.options.iconSize) + '\">',\n                '<li class=\"page-pre\"><a href=\"#\">' + this.options.paginationPreText + '</a></li>');\n\n            if (this.totalPages < 5) {\n                from = 1;\n                to = this.totalPages;\n            } else {\n                from = this.options.pageNumber - 2;\n                to = from + 4;\n                if (from < 1) {\n                    from = 1;\n                    to = 5;\n                }\n                if (to > this.totalPages) {\n                    to = this.totalPages;\n                    from = to - 4;\n                }\n            }\n\n            if (this.totalPages >= 6) {\n                if (this.options.pageNumber >= 3) {\n                    html.push('<li class=\"page-first' + (1 === this.options.pageNumber ? ' active' : '') + '\">',\n                        '<a href=\"#\">', 1, '</a>',\n                        '</li>');\n\n                    from++;\n                }\n\n                if (this.options.pageNumber >= 4) {\n                    if (this.options.pageNumber == 4 || this.totalPages == 6 || this.totalPages == 7) {\n                        from--;\n                    } else {\n                        html.push('<li class=\"page-first-separator disabled\">',\n                            '<a href=\"#\">...</a>',\n                            '</li>');\n                    }\n\n                    to--;\n                }\n            }\n\n            if (this.totalPages >= 7) {\n                if (this.options.pageNumber >= (this.totalPages - 2)) {\n                    from--;\n                }\n            }\n\n            if (this.totalPages == 6) {\n                if (this.options.pageNumber >= (this.totalPages - 2)) {\n                    to++;\n                }\n            } else if (this.totalPages >= 7) {\n                if (this.totalPages == 7 || this.options.pageNumber >= (this.totalPages - 3)) {\n                    to++;\n                }\n            }\n\n            for (i = from; i <= to; i++) {\n                html.push('<li class=\"page-number' + (i === this.options.pageNumber ? ' active' : '') + '\">',\n                    '<a href=\"#\">', i, '</a>',\n                    '</li>');\n            }\n\n            if (this.totalPages >= 8) {\n                if (this.options.pageNumber <= (this.totalPages - 4)) {\n                    html.push('<li class=\"page-last-separator disabled\">',\n                        '<a href=\"#\">...</a>',\n                        '</li>');\n                }\n            }\n\n            if (this.totalPages >= 6) {\n                if (this.options.pageNumber <= (this.totalPages - 3)) {\n                    html.push('<li class=\"page-last' + (this.totalPages === this.options.pageNumber ? ' active' : '') + '\">',\n                        '<a href=\"#\">', this.totalPages, '</a>',\n                        '</li>');\n                }\n            }\n\n            html.push(\n                '<li class=\"page-next\"><a href=\"#\">' + this.options.paginationNextText + '</a></li>',\n                '</ul>',\n                '</div>');\n        }\n        this.$pagination.html(html.join(''));\n\n        if (!this.options.onlyInfoPagination) {\n            $pageList = this.$pagination.find('.page-list a');\n            $first = this.$pagination.find('.page-first');\n            $pre = this.$pagination.find('.page-pre');\n            $next = this.$pagination.find('.page-next');\n            $last = this.$pagination.find('.page-last');\n            $number = this.$pagination.find('.page-number');\n\n            if (this.options.smartDisplay) {\n                if (this.totalPages <= 1) {\n                    this.$pagination.find('div.pagination').hide();\n                }\n                if (pageList.length < 2 || this.options.totalRows <= pageList[0]) {\n                    this.$pagination.find('span.page-list').hide();\n                }\n\n                // when data is empty, hide the pagination\n                this.$pagination[this.getData().length ? 'show' : 'hide']();\n            }\n\n            if (!this.options.paginationLoop) {\n                if (this.options.pageNumber === 1) {\n                    $pre.addClass('disabled');\n                }\n                if (this.options.pageNumber === this.totalPages) {\n                    $next.addClass('disabled');\n                }\n            }\n\n            if ($allSelected) {\n                this.options.pageSize = this.options.formatAllRows();\n            }\n            $pageList.off('click').on('click', $.proxy(this.onPageListChange, this));\n            $first.off('click').on('click', $.proxy(this.onPageFirst, this));\n            $pre.off('click').on('click', $.proxy(this.onPagePre, this));\n            $next.off('click').on('click', $.proxy(this.onPageNext, this));\n            $last.off('click').on('click', $.proxy(this.onPageLast, this));\n            $number.off('click').on('click', $.proxy(this.onPageNumber, this));\n        }\n    };\n\n    BootstrapTable.prototype.updatePagination = function (event) {\n        // Fix #171: IE disabled button can be clicked bug.\n        if (event && $(event.currentTarget).hasClass('disabled')) {\n            return;\n        }\n\n        if (!this.options.maintainSelected) {\n            this.resetRows();\n        }\n\n        this.initPagination();\n        if (this.options.sidePagination === 'server') {\n            this.initServer();\n        } else {\n            this.initBody();\n        }\n\n        this.trigger('page-change', this.options.pageNumber, this.options.pageSize);\n    };\n\n    BootstrapTable.prototype.onPageListChange = function (event) {\n        var $this = $(event.currentTarget);\n\n        $this.parent().addClass('active').siblings().removeClass('active');\n        this.options.pageSize = $this.text().toUpperCase() === this.options.formatAllRows().toUpperCase() ?\n            this.options.formatAllRows() : +$this.text();\n        this.$toolbar.find('.page-size').text(this.options.pageSize);\n\n        this.updatePagination(event);\n        return false;\n    };\n\n    BootstrapTable.prototype.onPageFirst = function (event) {\n        this.options.pageNumber = 1;\n        this.updatePagination(event);\n        return false;\n    };\n\n    BootstrapTable.prototype.onPagePre = function (event) {\n        if ((this.options.pageNumber - 1) === 0) {\n            this.options.pageNumber = this.options.totalPages;\n        } else {\n            this.options.pageNumber--;\n        }\n        this.updatePagination(event);\n        return false;\n    };\n\n    BootstrapTable.prototype.onPageNext = function (event) {\n        if ((this.options.pageNumber + 1) > this.options.totalPages) {\n            this.options.pageNumber = 1;\n        } else {\n            this.options.pageNumber++;\n        }\n        this.updatePagination(event);\n        return false;\n    };\n\n    BootstrapTable.prototype.onPageLast = function (event) {\n        this.options.pageNumber = this.totalPages;\n        this.updatePagination(event);\n        return false;\n    };\n\n    BootstrapTable.prototype.onPageNumber = function (event) {\n        if (this.options.pageNumber === +$(event.currentTarget).text()) {\n            return;\n        }\n        this.options.pageNumber = +$(event.currentTarget).text();\n        this.updatePagination(event);\n        return false;\n    };\n\n    BootstrapTable.prototype.initRow = function(item, i, data, parentDom) {\n        var that=this,\n            key,\n            html = [],\n            style = {},\n            csses = [],\n            data_ = '',\n            attributes = {},\n            htmlAttributes = [];\n\n        if ($.inArray(item, this.hiddenRows) > -1) {\n            return;\n        }\n\n        style = calculateObjectValue(this.options, this.options.rowStyle, [item, i], style);\n\n        if (style && style.css) {\n            for (key in style.css) {\n                csses.push(key + ': ' + style.css[key]);\n            }\n        }\n\n        attributes = calculateObjectValue(this.options,\n            this.options.rowAttributes, [item, i], attributes);\n\n        if (attributes) {\n            for (key in attributes) {\n                htmlAttributes.push(sprintf('%s=\"%s\"', key, escapeHTML(attributes[key])));\n            }\n        }\n\n        if (item._data && !$.isEmptyObject(item._data)) {\n            $.each(item._data, function(k, v) {\n                // ignore data-index\n                if (k === 'index') {\n                    return;\n                }\n                data_ += sprintf(' data-%s=\"%s\"', k, v);\n            });\n        }\n\n        html.push('<tr',\n            sprintf(' %s', htmlAttributes.join(' ')),\n            sprintf(' id=\"%s\"', $.isArray(item) ? undefined : item._id),\n            sprintf(' class=\"%s\"', style.classes || ($.isArray(item) ? undefined : item._class)),\n            sprintf(' data-index=\"%s\"', i),\n            sprintf(' data-uniqueid=\"%s\"', item[this.options.uniqueId]),\n            sprintf('%s', data_),\n            '>'\n        );\n\n        if (this.options.cardView) {\n            html.push(sprintf('<td colspan=\"%s\"><div class=\"card-views\">', this.header.fields.length));\n        }\n\n        if (!this.options.cardView && this.options.detailView) {\n            html.push('<td>',\n                '<a class=\"detail-icon\" href=\"#\">',\n                sprintf('<i class=\"%s %s\"></i>', this.options.iconsPrefix, this.options.icons.detailOpen),\n                '</a>',\n                '</td>');\n        }\n\n        $.each(this.header.fields, function(j, field) {\n            var text = '',\n                value_ = getItemField(item, field, that.options.escape),\n                value = '',\n                type = '',\n                cellStyle = {},\n                id_ = '',\n                class_ = that.header.classes[j],\n                data_ = '',\n                rowspan_ = '',\n                colspan_ = '',\n                title_ = '',\n                column = that.columns[j];\n\n            if (that.fromHtml && typeof value_ === 'undefined') {\n                return;\n            }\n\n            if (!column.visible) {\n                return;\n            }\n\n            if (that.options.cardView && (!column.cardVisible)) {\n                return;\n            }\n\n            if (column.escape) {\n                value_ = escapeHTML(value_);\n            }\n\n            style = sprintf('style=\"%s\"', csses.concat(that.header.styles[j]).join('; '));\n\n            // handle td's id and class\n            if (item['_' + field + '_id']) {\n                id_ = sprintf(' id=\"%s\"', item['_' + field + '_id']);\n            }\n            if (item['_' + field + '_class']) {\n                class_ = sprintf(' class=\"%s\"', item['_' + field + '_class']);\n            }\n            if (item['_' + field + '_rowspan']) {\n                rowspan_ = sprintf(' rowspan=\"%s\"', item['_' + field + '_rowspan']);\n            }\n            if (item['_' + field + '_colspan']) {\n                colspan_ = sprintf(' colspan=\"%s\"', item['_' + field + '_colspan']);\n            }\n            if (item['_' + field + '_title']) {\n                title_ = sprintf(' title=\"%s\"', item['_' + field + '_title']);\n            }\n            cellStyle = calculateObjectValue(that.header,\n                that.header.cellStyles[j], [value_, item, i, field], cellStyle);\n            if (cellStyle.classes) {\n                class_ = sprintf(' class=\"%s\"', cellStyle.classes);\n            }\n            if (cellStyle.css) {\n                var csses_ = [];\n                for (var key in cellStyle.css) {\n                    csses_.push(key + ': ' + cellStyle.css[key]);\n                }\n                style = sprintf('style=\"%s\"', csses_.concat(that.header.styles[j]).join('; '));\n            }\n\n            value = calculateObjectValue(column,\n                that.header.formatters[j], [value_, item, i], value_);\n\n            if (item['_' + field + '_data'] && !$.isEmptyObject(item['_' + field + '_data'])) {\n                $.each(item['_' + field + '_data'], function(k, v) {\n                    // ignore data-index\n                    if (k === 'index') {\n                        return;\n                    }\n                    data_ += sprintf(' data-%s=\"%s\"', k, v);\n                });\n            }\n\n            if (column.checkbox || column.radio) {\n                type = column.checkbox ? 'checkbox' : type;\n                type = column.radio ? 'radio' : type;\n\n                text = [sprintf(that.options.cardView ?\n                        '<div class=\"card-view %s\">' : '<td class=\"bs-checkbox %s\">', column['class'] || ''),\n                    '<input' +\n                    sprintf(' data-index=\"%s\"', i) +\n                    sprintf(' name=\"%s\"', that.options.selectItemName) +\n                    sprintf(' type=\"%s\"', type) +\n                    sprintf(' value=\"%s\"', item[that.options.idField]) +\n                    sprintf(' checked=\"%s\"', value === true ||\n                        (value_ || value && value.checked) ? 'checked' : undefined) +\n                    sprintf(' disabled=\"%s\"', !column.checkboxEnabled ||\n                        (value && value.disabled) ? 'disabled' : undefined) +\n                    ' />',\n                    that.header.formatters[j] && typeof value === 'string' ? value : '',\n                    that.options.cardView ? '</div>' : '</td>'\n                ].join('');\n\n                item[that.header.stateField] = value === true || (value && value.checked);\n            } else {\n                value = typeof value === 'undefined' || value === null ?\n                    that.options.undefinedText : value;\n\n                text = that.options.cardView ? ['<div class=\"card-view\">',\n                    that.options.showHeader ? sprintf('<span class=\"title\" %s>%s</span>', style,\n                        getPropertyFromOther(that.columns, 'field', 'title', field)) : '',\n                    sprintf('<span class=\"value\">%s</span>', value),\n                    '</div>'\n                ].join('') : [sprintf('<td%s %s %s %s %s %s %s>',\n                        id_, class_, style, data_, rowspan_, colspan_, title_),\n                    value,\n                    '</td>'\n                ].join('');\n\n                // Hide empty data on Card view when smartDisplay is set to true.\n                if (that.options.cardView && that.options.smartDisplay && value === '') {\n                    // Should set a placeholder for event binding correct fieldIndex\n                    text = '<div class=\"card-view\"></div>';\n                }\n            }\n\n            html.push(text);\n        });\n\n        if (this.options.cardView) {\n            html.push('</div></td>');\n        }\n        html.push('</tr>');\n\n        return html.join(' ');\n    };\n\n    BootstrapTable.prototype.initBody = function (fixedScroll) {\n        var that = this,\n            html = [],\n            data = this.getData();\n\n        this.trigger('pre-body', data);\n\n        this.$body = this.$el.find('>tbody');\n        if (!this.$body.length) {\n            this.$body = $('<tbody></tbody>').appendTo(this.$el);\n        }\n\n        //Fix #389 Bootstrap-table-flatJSON is not working\n\n        if (!this.options.pagination || this.options.sidePagination === 'server') {\n            this.pageFrom = 1;\n            this.pageTo = data.length;\n        }\n\n        var trFragments = $(document.createDocumentFragment());\n        var hasTr;\n\n        for (var i = this.pageFrom - 1; i < this.pageTo; i++) {\n            var item = data[i];\n            var tr = this.initRow(item, i, data, trFragments);\n            hasTr = hasTr || !!tr;\n            if (tr&&tr!==true) {\n                trFragments.append(tr);\n            }\n        }\n\n        // show no records\n        if (!hasTr) {\n            trFragments.append('<tr class=\"no-records-found\">' +\n                sprintf('<td colspan=\"%s\">%s</td>',\n                this.$header.find('th').length,\n                this.options.formatNoMatches()) +\n                '</tr>');\n        }\n\n        this.$body.html(trFragments);\n\n        if (!fixedScroll) {\n            this.scrollTo(0);\n        }\n\n        // click to select by column\n        this.$body.find('> tr[data-index] > td').off('click dblclick').on('click dblclick', function (e) {\n            var $td = $(this),\n                $tr = $td.parent(),\n                item = that.data[$tr.data('index')],\n                index = $td[0].cellIndex,\n                fields = that.getVisibleFields(),\n                field = fields[that.options.detailView && !that.options.cardView ? index - 1 : index],\n                column = that.columns[getFieldIndex(that.columns, field)],\n                value = getItemField(item, field, that.options.escape);\n\n            if ($td.find('.detail-icon').length) {\n                return;\n            }\n\n            that.trigger(e.type === 'click' ? 'click-cell' : 'dbl-click-cell', field, value, item, $td);\n            that.trigger(e.type === 'click' ? 'click-row' : 'dbl-click-row', item, $tr, field);\n\n            // if click to select - then trigger the checkbox/radio click\n            if (e.type === 'click' && that.options.clickToSelect && column.clickToSelect) {\n                var $selectItem = $tr.find(sprintf('[name=\"%s\"]', that.options.selectItemName));\n                if ($selectItem.length) {\n                    $selectItem[0].click(); // #144: .trigger('click') bug\n                }\n            }\n        });\n\n        this.$body.find('> tr[data-index] > td > .detail-icon').off('click').on('click', function () {\n            var $this = $(this),\n                $tr = $this.parent().parent(),\n                index = $tr.data('index'),\n                row = data[index]; // Fix #980 Detail view, when searching, returns wrong row\n\n            // remove and update\n            if ($tr.next().is('tr.detail-view')) {\n                $this.find('i').attr('class', sprintf('%s %s', that.options.iconsPrefix, that.options.icons.detailOpen));\n                that.trigger('collapse-row', index, row);\n                $tr.next().remove();\n            } else {\n                $this.find('i').attr('class', sprintf('%s %s', that.options.iconsPrefix, that.options.icons.detailClose));\n                $tr.after(sprintf('<tr class=\"detail-view\"><td colspan=\"%s\"></td></tr>', $tr.find('td').length));\n                var $element = $tr.next().find('td');\n                var content = calculateObjectValue(that.options, that.options.detailFormatter, [index, row, $element], '');\n                if($element.length === 1) {\n                    $element.append(content);\n                }\n                that.trigger('expand-row', index, row, $element);\n            }\n            that.resetView();\n            return false;\n        });\n\n        this.$selectItem = this.$body.find(sprintf('[name=\"%s\"]', this.options.selectItemName));\n        this.$selectItem.off('click').on('click', function (event) {\n            event.stopImmediatePropagation();\n\n            var $this = $(this),\n                checked = $this.prop('checked'),\n                row = that.data[$this.data('index')];\n\n            if (that.options.maintainSelected && $(this).is(':radio')) {\n                $.each(that.options.data, function (i, row) {\n                    row[that.header.stateField] = false;\n                });\n            }\n\n            row[that.header.stateField] = checked;\n\n            if (that.options.singleSelect) {\n                that.$selectItem.not(this).each(function () {\n                    that.data[$(this).data('index')][that.header.stateField] = false;\n                });\n                that.$selectItem.filter(':checked').not(this).prop('checked', false);\n            }\n\n            that.updateSelected();\n            that.trigger(checked ? 'check' : 'uncheck', row, $this);\n        });\n\n        $.each(this.header.events, function (i, events) {\n            if (!events) {\n                return;\n            }\n            // fix bug, if events is defined with namespace\n            if (typeof events === 'string') {\n                events = calculateObjectValue(null, events);\n            }\n\n            var field = that.header.fields[i],\n                fieldIndex = $.inArray(field, that.getVisibleFields());\n\n            if (that.options.detailView && !that.options.cardView) {\n                fieldIndex += 1;\n            }\n\n            for (var key in events) {\n                that.$body.find('>tr:not(.no-records-found)').each(function () {\n                    var $tr = $(this),\n                        $td = $tr.find(that.options.cardView ? '.card-view' : 'td').eq(fieldIndex),\n                        index = key.indexOf(' '),\n                        name = key.substring(0, index),\n                        el = key.substring(index + 1),\n                        func = events[key];\n\n                    $td.find(el).off(name).on(name, function (e) {\n                        var index = $tr.data('index'),\n                            row = that.data[index],\n                            value = row[field];\n\n                        func.apply(this, [e, value, row, index]);\n                    });\n                });\n            }\n        });\n\n        this.updateSelected();\n        this.resetView();\n\n        this.trigger('post-body', data);\n    };\n\n    BootstrapTable.prototype.initServer = function (silent, query, url) {\n        var that = this,\n            data = {},\n            params = {\n                searchText: this.searchText,\n                sortName: this.options.sortName,\n                sortOrder: this.options.sortOrder\n            },\n            request;\n\n        if (this.options.pagination) {\n            params.pageSize = this.options.pageSize === this.options.formatAllRows() ?\n                this.options.totalRows : this.options.pageSize;\n            params.pageNumber = this.options.pageNumber;\n        }\n\n        if (!(url || this.options.url) && !this.options.ajax) {\n            return;\n        }\n\n        if (this.options.queryParamsType === 'limit') {\n            params = {\n                search: params.searchText,\n                sort: params.sortName,\n                order: params.sortOrder\n            };\n\n            if (this.options.pagination) {\n                params.offset = this.options.pageSize === this.options.formatAllRows() ?\n                    0 : this.options.pageSize * (this.options.pageNumber - 1);\n                params.limit = this.options.pageSize === this.options.formatAllRows() ?\n                    this.options.totalRows : this.options.pageSize;\n            }\n        }\n\n        if (!($.isEmptyObject(this.filterColumnsPartial))) {\n            params.filter = JSON.stringify(this.filterColumnsPartial, null);\n        }\n\n        data = calculateObjectValue(this.options, this.options.queryParams, [params], data);\n\n        $.extend(data, query || {});\n\n        // false to stop request\n        if (data === false) {\n            return;\n        }\n\n        if (!silent) {\n            this.$tableLoading.show();\n        }\n        request = $.extend({}, calculateObjectValue(null, this.options.ajaxOptions), {\n            type: this.options.method,\n            url:  url || this.options.url,\n            data: this.options.contentType === 'application/json' && this.options.method === 'post' ?\n                JSON.stringify(data) : data,\n            cache: this.options.cache,\n            contentType: this.options.contentType,\n            dataType: this.options.dataType,\n            success: function (res) {\n                res = calculateObjectValue(that.options, that.options.responseHandler, [res], res);\n\n                that.load(res);\n                that.trigger('load-success', res);\n                if (!silent) that.$tableLoading.hide();\n            },\n            error: function (res) {\n                that.trigger('load-error', res.status, res);\n                if (!silent) that.$tableLoading.hide();\n            }\n        });\n\n        if (this.options.ajax) {\n            calculateObjectValue(this, this.options.ajax, [request], null);\n        } else {\n            if (this._xhr && this._xhr.readyState !== 4) {\n                this._xhr.abort();\n            }\n            this._xhr = $.ajax(request);\n        }\n    };\n\n    BootstrapTable.prototype.initSearchText = function () {\n        if (this.options.search) {\n            if (this.options.searchText !== '') {\n                var $search = this.$toolbar.find('.search input');\n                $search.val(this.options.searchText);\n                this.onSearch({currentTarget: $search});\n            }\n        }\n    };\n\n    BootstrapTable.prototype.getCaret = function () {\n        var that = this;\n\n        $.each(this.$header.find('th'), function (i, th) {\n            $(th).find('.sortable').removeClass('desc asc').addClass($(th).data('field') === that.options.sortName ? that.options.sortOrder : 'both');\n        });\n    };\n\n    BootstrapTable.prototype.updateSelected = function () {\n        var checkAll = this.$selectItem.filter(':enabled').length &&\n            this.$selectItem.filter(':enabled').length ===\n            this.$selectItem.filter(':enabled').filter(':checked').length;\n\n        this.$selectAll.add(this.$selectAll_).prop('checked', checkAll);\n\n        this.$selectItem.each(function () {\n            $(this).closest('tr')[$(this).prop('checked') ? 'addClass' : 'removeClass']('selected');\n        });\n    };\n\n    BootstrapTable.prototype.updateRows = function () {\n        var that = this;\n\n        this.$selectItem.each(function () {\n            that.data[$(this).data('index')][that.header.stateField] = $(this).prop('checked');\n        });\n    };\n\n    BootstrapTable.prototype.resetRows = function () {\n        var that = this;\n\n        $.each(this.data, function (i, row) {\n            that.$selectAll.prop('checked', false);\n            that.$selectItem.prop('checked', false);\n            if (that.header.stateField) {\n                row[that.header.stateField] = false;\n            }\n        });\n        this.initHiddenRows();\n    };\n\n    BootstrapTable.prototype.trigger = function (name) {\n        var args = Array.prototype.slice.call(arguments, 1);\n\n        name += '.bs.table';\n        this.options[BootstrapTable.EVENTS[name]].apply(this.options, args);\n        this.$el.trigger($.Event(name), args);\n\n        this.options.onAll(name, args);\n        this.$el.trigger($.Event('all.bs.table'), [name, args]);\n    };\n\n    BootstrapTable.prototype.resetHeader = function () {\n        // fix #61: the hidden table reset header bug.\n        // fix bug: get $el.css('width') error sometime (height = 500)\n        clearTimeout(this.timeoutId_);\n        this.timeoutId_ = setTimeout($.proxy(this.fitHeader, this), this.$el.is(':hidden') ? 100 : 0);\n    };\n\n    BootstrapTable.prototype.fitHeader = function () {\n        var that = this,\n            fixedBody,\n            scrollWidth,\n            focused,\n            focusedTemp;\n\n        if (that.$el.is(':hidden')) {\n            that.timeoutId_ = setTimeout($.proxy(that.fitHeader, that), 100);\n            return;\n        }\n        fixedBody = this.$tableBody.get(0);\n\n        scrollWidth = fixedBody.scrollWidth > fixedBody.clientWidth &&\n        fixedBody.scrollHeight > fixedBody.clientHeight + this.$header.outerHeight() ?\n            getScrollBarWidth() : 0;\n\n        this.$el.css('margin-top', -this.$header.outerHeight());\n\n        focused = $(':focus');\n        if (focused.length > 0) {\n            var $th = focused.parents('th');\n            if ($th.length > 0) {\n                var dataField = $th.attr('data-field');\n                if (dataField !== undefined) {\n                    var $headerTh = this.$header.find(\"[data-field='\" + dataField + \"']\");\n                    if ($headerTh.length > 0) {\n                        $headerTh.find(\":input\").addClass(\"focus-temp\");\n                    }\n                }\n            }\n        }\n\n        this.$header_ = this.$header.clone(true, true);\n        this.$selectAll_ = this.$header_.find('[name=\"btSelectAll\"]');\n        this.$tableHeader.css({\n            'margin-right': scrollWidth\n        }).find('table').css('width', this.$el.outerWidth())\n            .html('').attr('class', this.$el.attr('class'))\n            .append(this.$header_);\n\n\n        focusedTemp = $('.focus-temp:visible:eq(0)');\n        if (focusedTemp.length > 0) {\n            focusedTemp.focus();\n            this.$header.find('.focus-temp').removeClass('focus-temp');\n        }\n\n        // fix bug: $.data() is not working as expected after $.append()\n        this.$header.find('th[data-field]').each(function (i) {\n            that.$header_.find(sprintf('th[data-field=\"%s\"]', $(this).data('field'))).data($(this).data());\n        });\n\n        var visibleFields = this.getVisibleFields(),\n            $ths = this.$header_.find('th');\n\n        this.$body.find('>tr:first-child:not(.no-records-found) > *').each(function (i) {\n            var $this = $(this),\n                index = i;\n\n            if (that.options.detailView && !that.options.cardView) {\n                if (i === 0) {\n                    that.$header_.find('th.detail').find('.fht-cell').width($this.innerWidth());\n                }\n                index = i - 1;\n            }\n\n            var $th = that.$header_.find(sprintf('th[data-field=\"%s\"]', visibleFields[index]));\n            if ($th.length > 1) {\n                $th = $($ths[$this[0].cellIndex]);\n            }\n\n            $th.find('.fht-cell').width($this.innerWidth());\n        });\n        // horizontal scroll event\n        // TODO: it's probably better improving the layout than binding to scroll event\n        this.$tableBody.off('scroll').on('scroll', function () {\n            that.$tableHeader.scrollLeft($(this).scrollLeft());\n\n            if (that.options.showFooter && !that.options.cardView) {\n                that.$tableFooter.scrollLeft($(this).scrollLeft());\n            }\n        });\n        that.trigger('post-header');\n    };\n\n    BootstrapTable.prototype.resetFooter = function () {\n        var that = this,\n            data = that.getData(),\n            html = [];\n\n        if (!this.options.showFooter || this.options.cardView) { //do nothing\n            return;\n        }\n\n        if (!this.options.cardView && this.options.detailView) {\n            html.push('<td><div class=\"th-inner\">&nbsp;</div><div class=\"fht-cell\"></div></td>');\n        }\n\n        $.each(this.columns, function (i, column) {\n            var key,\n                falign = '', // footer align style\n                valign = '',\n                csses = [],\n                style = {},\n                class_ = sprintf(' class=\"%s\"', column['class']);\n\n            if (!column.visible) {\n                return;\n            }\n\n            if (that.options.cardView && (!column.cardVisible)) {\n                return;\n            }\n\n            falign = sprintf('text-align: %s; ', column.falign ? column.falign : column.align);\n            valign = sprintf('vertical-align: %s; ', column.valign);\n\n            style = calculateObjectValue(null, that.options.footerStyle);\n\n            if (style && style.css) {\n                for (key in style.css) {\n                    csses.push(key + ': ' + style.css[key]);\n                }\n            }\n\n            html.push('<td', class_, sprintf(' style=\"%s\"', falign + valign + csses.concat().join('; ')), '>');\n            html.push('<div class=\"th-inner\">');\n\n            html.push(calculateObjectValue(column, column.footerFormatter, [data], '&nbsp;') || '&nbsp;');\n\n            html.push('</div>');\n            html.push('<div class=\"fht-cell\"></div>');\n            html.push('</div>');\n            html.push('</td>');\n        });\n\n        this.$tableFooter.find('tr').html(html.join(''));\n        this.$tableFooter.show();\n        clearTimeout(this.timeoutFooter_);\n        this.timeoutFooter_ = setTimeout($.proxy(this.fitFooter, this),\n            this.$el.is(':hidden') ? 100 : 0);\n    };\n\n    BootstrapTable.prototype.fitFooter = function () {\n        var that = this,\n            $footerTd,\n            elWidth,\n            scrollWidth;\n\n        clearTimeout(this.timeoutFooter_);\n        if (this.$el.is(':hidden')) {\n            this.timeoutFooter_ = setTimeout($.proxy(this.fitFooter, this), 100);\n            return;\n        }\n\n        elWidth = this.$el.css('width');\n        scrollWidth = elWidth > this.$tableBody.width() ? getScrollBarWidth() : 0;\n\n        this.$tableFooter.css({\n            'margin-right': scrollWidth\n        }).find('table').css('width', elWidth)\n            .attr('class', this.$el.attr('class'));\n\n        $footerTd = this.$tableFooter.find('td');\n\n        this.$body.find('>tr:first-child:not(.no-records-found) > *').each(function (i) {\n            var $this = $(this);\n\n            $footerTd.eq(i).find('.fht-cell').width($this.innerWidth());\n        });\n    };\n\n    BootstrapTable.prototype.toggleColumn = function (index, checked, needUpdate) {\n        if (index === -1) {\n            return;\n        }\n        this.columns[index].visible = checked;\n        this.initHeader();\n        this.initSearch();\n        this.initPagination();\n        this.initBody();\n\n        if (this.options.showColumns) {\n            var $items = this.$toolbar.find('.keep-open input').prop('disabled', false);\n\n            if (needUpdate) {\n                $items.filter(sprintf('[value=\"%s\"]', index)).prop('checked', checked);\n            }\n\n            if ($items.filter(':checked').length <= this.options.minimumCountColumns) {\n                $items.filter(':checked').prop('disabled', true);\n            }\n        }\n    };\n\n    BootstrapTable.prototype.getVisibleFields = function () {\n        var that = this,\n            visibleFields = [];\n\n        $.each(this.header.fields, function (j, field) {\n            var column = that.columns[getFieldIndex(that.columns, field)];\n\n            if (!column.visible) {\n                return;\n            }\n            visibleFields.push(field);\n        });\n        return visibleFields;\n    };\n\n    // PUBLIC FUNCTION DEFINITION\n    // =======================\n\n    BootstrapTable.prototype.resetView = function (params) {\n        var padding = 0;\n\n        if (params && params.height) {\n            this.options.height = params.height;\n        }\n\n        this.$selectAll.prop('checked', this.$selectItem.length > 0 &&\n            this.$selectItem.length === this.$selectItem.filter(':checked').length);\n\n        if (this.options.height) {\n            var toolbarHeight = this.$toolbar.outerHeight(true),\n                paginationHeight = this.$pagination.outerHeight(true),\n                height = this.options.height - toolbarHeight - paginationHeight;\n\n            this.$tableContainer.css('height', height + 'px');\n        }\n\n        if (this.options.cardView) {\n            // remove the element css\n            this.$el.css('margin-top', '0');\n            this.$tableContainer.css('padding-bottom', '0');\n            this.$tableFooter.hide();\n            return;\n        }\n\n        if (this.options.showHeader && this.options.height) {\n            this.$tableHeader.show();\n            this.resetHeader();\n            padding += this.$header.outerHeight();\n        } else {\n            this.$tableHeader.hide();\n            this.trigger('post-header');\n        }\n\n        if (this.options.showFooter) {\n            this.resetFooter();\n            if (this.options.height) {\n                padding += this.$tableFooter.outerHeight() + 1;\n            }\n        }\n\n        // Assign the correct sortable arrow\n        this.getCaret();\n        this.$tableContainer.css('padding-bottom', padding + 'px');\n        this.trigger('reset-view');\n    };\n\n    BootstrapTable.prototype.getData = function (useCurrentPage) {\n        return (this.searchText || !$.isEmptyObject(this.filterColumns) || !$.isEmptyObject(this.filterColumnsPartial)) ?\n            (useCurrentPage ? this.data.slice(this.pageFrom - 1, this.pageTo) : this.data) :\n            (useCurrentPage ? this.options.data.slice(this.pageFrom - 1, this.pageTo) : this.options.data);\n    };\n\n    BootstrapTable.prototype.load = function (data) {\n        var fixedScroll = false;\n\n        // #431: support pagination\n        if (this.options.sidePagination === 'server') {\n            this.options.totalRows = data[this.options.totalField];\n            fixedScroll = data.fixedScroll;\n            data = data[this.options.dataField];\n        } else if (!$.isArray(data)) { // support fixedScroll\n            fixedScroll = data.fixedScroll;\n            data = data.data;\n        }\n\n        this.initData(data);\n        this.initSearch();\n        this.initPagination();\n        this.initBody(fixedScroll);\n    };\n\n    BootstrapTable.prototype.append = function (data) {\n        this.initData(data, 'append');\n        this.initSearch();\n        this.initPagination();\n        this.initSort();\n        this.initBody(true);\n    };\n\n    BootstrapTable.prototype.prepend = function (data) {\n        this.initData(data, 'prepend');\n        this.initSearch();\n        this.initPagination();\n        this.initSort();\n        this.initBody(true);\n    };\n\n    BootstrapTable.prototype.remove = function (params) {\n        var len = this.options.data.length,\n            i, row;\n\n        if (!params.hasOwnProperty('field') || !params.hasOwnProperty('values')) {\n            return;\n        }\n\n        for (i = len - 1; i >= 0; i--) {\n            row = this.options.data[i];\n\n            if (!row.hasOwnProperty(params.field)) {\n                continue;\n            }\n            if ($.inArray(row[params.field], params.values) !== -1) {\n                this.options.data.splice(i, 1);\n                if (this.options.sidePagination === 'server') {\n                    this.options.totalRows -= 1;\n                }\n            }\n        }\n\n        if (len === this.options.data.length) {\n            return;\n        }\n\n        this.initSearch();\n        this.initPagination();\n        this.initSort();\n        this.initBody(true);\n    };\n\n    BootstrapTable.prototype.removeAll = function () {\n        if (this.options.data.length > 0) {\n            this.options.data.splice(0, this.options.data.length);\n            this.initSearch();\n            this.initPagination();\n            this.initBody(true);\n        }\n    };\n\n    BootstrapTable.prototype.getRowByUniqueId = function (id) {\n        var uniqueId = this.options.uniqueId,\n            len = this.options.data.length,\n            dataRow = null,\n            i, row, rowUniqueId;\n\n        for (i = len - 1; i >= 0; i--) {\n            row = this.options.data[i];\n\n            if (row.hasOwnProperty(uniqueId)) { // uniqueId is a column\n                rowUniqueId = row[uniqueId];\n            } else if(row._data.hasOwnProperty(uniqueId)) { // uniqueId is a row data property\n                rowUniqueId = row._data[uniqueId];\n            } else {\n                continue;\n            }\n\n            if (typeof rowUniqueId === 'string') {\n                id = id.toString();\n            } else if (typeof rowUniqueId === 'number') {\n                if ((Number(rowUniqueId) === rowUniqueId) && (rowUniqueId % 1 === 0)) {\n                    id = parseInt(id);\n                } else if ((rowUniqueId === Number(rowUniqueId)) && (rowUniqueId !== 0)) {\n                    id = parseFloat(id);\n                }\n            }\n\n            if (rowUniqueId === id) {\n                dataRow = row;\n                break;\n            }\n        }\n\n        return dataRow;\n    };\n\n    BootstrapTable.prototype.removeByUniqueId = function (id) {\n        var len = this.options.data.length,\n            row = this.getRowByUniqueId(id);\n\n        if (row) {\n            this.options.data.splice(this.options.data.indexOf(row), 1);\n        }\n\n        if (len === this.options.data.length) {\n            return;\n        }\n\n        this.initSearch();\n        this.initPagination();\n        this.initBody(true);\n    };\n\n    BootstrapTable.prototype.updateByUniqueId = function (params) {\n        var that = this;\n        var allParams = $.isArray(params) ? params : [ params ];\n\n        $.each(allParams, function(i, params) {\n            var rowId;\n\n            if (!params.hasOwnProperty('id') || !params.hasOwnProperty('row')) {\n                return;\n            }\n\n            rowId = $.inArray(that.getRowByUniqueId(params.id), that.options.data);\n\n            if (rowId === -1) {\n                return;\n            }\n            $.extend(that.options.data[rowId], params.row);\n        });\n\n        this.initSearch();\n        this.initPagination();\n        this.initSort();\n        this.initBody(true);\n    };\n\n    BootstrapTable.prototype.insertRow = function (params) {\n        if (!params.hasOwnProperty('index') || !params.hasOwnProperty('row')) {\n            return;\n        }\n        this.data.splice(params.index, 0, params.row);\n        this.initSearch();\n        this.initPagination();\n        this.initSort();\n        this.initBody(true);\n    };\n\n    BootstrapTable.prototype.updateRow = function (params) {\n        var that = this;\n        var allParams = $.isArray(params) ? params : [ params ];\n\n        $.each(allParams, function(i, params) {\n            if (!params.hasOwnProperty('index') || !params.hasOwnProperty('row')) {\n                return;\n            }\n            $.extend(that.options.data[params.index], params.row);\n        });\n\n        this.initSearch();\n        this.initPagination();\n        this.initSort();\n        this.initBody(true);\n    };\n\n    BootstrapTable.prototype.initHiddenRows = function () {\n        this.hiddenRows = [];\n    };\n\n    BootstrapTable.prototype.showRow = function (params) {\n        this.toggleRow(params, true);\n    };\n\n    BootstrapTable.prototype.hideRow = function (params) {\n        this.toggleRow(params, false);\n    };\n\n    BootstrapTable.prototype.toggleRow = function (params, visible) {\n        var row, index;\n\n        if (params.hasOwnProperty('index')) {\n            row = this.getData()[params.index];\n        } else if (params.hasOwnProperty('uniqueId')) {\n            row = this.getRowByUniqueId(params.uniqueId);\n        }\n\n        if (!row) {\n            return;\n        }\n\n        index = $.inArray(row, this.hiddenRows);\n\n        if (!visible && index === -1) {\n            this.hiddenRows.push(row);\n        } else if (visible && index > -1) {\n            this.hiddenRows.splice(index, 1);\n        }\n        this.initBody(true);\n    };\n\n    BootstrapTable.prototype.getHiddenRows = function (show) {\n        var that = this,\n            data = this.getData(),\n            rows = [];\n\n        $.each(data, function (i, row) {\n            if ($.inArray(row, that.hiddenRows) > -1) {\n                rows.push(row);\n            }\n        });\n        this.hiddenRows = rows;\n        return rows;\n    };\n\n    BootstrapTable.prototype.mergeCells = function (options) {\n        var row = options.index,\n            col = $.inArray(options.field, this.getVisibleFields()),\n            rowspan = options.rowspan || 1,\n            colspan = options.colspan || 1,\n            i, j,\n            $tr = this.$body.find('>tr'),\n            $td;\n\n        if (this.options.detailView && !this.options.cardView) {\n            col += 1;\n        }\n\n        $td = $tr.eq(row).find('>td').eq(col);\n\n        if (row < 0 || col < 0 || row >= this.data.length) {\n            return;\n        }\n\n        for (i = row; i < row + rowspan; i++) {\n            for (j = col; j < col + colspan; j++) {\n                $tr.eq(i).find('>td').eq(j).hide();\n            }\n        }\n\n        $td.attr('rowspan', rowspan).attr('colspan', colspan).show();\n    };\n\n    BootstrapTable.prototype.updateCell = function (params) {\n        if (!params.hasOwnProperty('index') ||\n            !params.hasOwnProperty('field') ||\n            !params.hasOwnProperty('value')) {\n            return;\n        }\n        this.data[params.index][params.field] = params.value;\n\n        if (params.reinit === false) {\n            return;\n        }\n        this.initSort();\n        this.initBody(true);\n    };\n\n    BootstrapTable.prototype.getOptions = function () {\n        return this.options;\n    };\n\n    BootstrapTable.prototype.getSelections = function () {\n        var that = this;\n\n        return $.grep(this.options.data, function (row) {\n            // fix #2424: from html with checkbox\n            return row[that.header.stateField] === true;\n        });\n    };\n\n    BootstrapTable.prototype.getAllSelections = function () {\n        var that = this;\n\n        return $.grep(this.options.data, function (row) {\n            return row[that.header.stateField];\n        });\n    };\n\n    BootstrapTable.prototype.checkAll = function () {\n        this.checkAll_(true);\n    };\n\n    BootstrapTable.prototype.uncheckAll = function () {\n        this.checkAll_(false);\n    };\n\n    BootstrapTable.prototype.checkInvert = function () {\n        var that = this;\n        var rows = that.$selectItem.filter(':enabled');\n        var checked = rows.filter(':checked');\n        rows.each(function() {\n            $(this).prop('checked', !$(this).prop('checked'));\n        });\n        that.updateRows();\n        that.updateSelected();\n        that.trigger('uncheck-some', checked);\n        checked = that.getSelections();\n        that.trigger('check-some', checked);\n    };\n\n    BootstrapTable.prototype.checkAll_ = function (checked) {\n        var rows;\n        if (!checked) {\n            rows = this.getSelections();\n        }\n        this.$selectAll.add(this.$selectAll_).prop('checked', checked);\n        this.$selectItem.filter(':enabled').prop('checked', checked);\n        this.updateRows();\n        if (checked) {\n            rows = this.getSelections();\n        }\n        this.trigger(checked ? 'check-all' : 'uncheck-all', rows);\n    };\n\n    BootstrapTable.prototype.check = function (index) {\n        this.check_(true, index);\n    };\n\n    BootstrapTable.prototype.uncheck = function (index) {\n        this.check_(false, index);\n    };\n\n    BootstrapTable.prototype.check_ = function (checked, index) {\n        var $el = this.$selectItem.filter(sprintf('[data-index=\"%s\"]', index)).prop('checked', checked);\n        this.data[index][this.header.stateField] = checked;\n        this.updateSelected();\n        this.trigger(checked ? 'check' : 'uncheck', this.data[index], $el);\n    };\n\n    BootstrapTable.prototype.checkBy = function (obj) {\n        this.checkBy_(true, obj);\n    };\n\n    BootstrapTable.prototype.uncheckBy = function (obj) {\n        this.checkBy_(false, obj);\n    };\n\n    BootstrapTable.prototype.checkBy_ = function (checked, obj) {\n        if (!obj.hasOwnProperty('field') || !obj.hasOwnProperty('values')) {\n            return;\n        }\n\n        var that = this,\n            rows = [];\n        $.each(this.options.data, function (index, row) {\n            if (!row.hasOwnProperty(obj.field)) {\n                return false;\n            }\n            if ($.inArray(row[obj.field], obj.values) !== -1) {\n                var $el = that.$selectItem.filter(':enabled')\n                    .filter(sprintf('[data-index=\"%s\"]', index)).prop('checked', checked);\n                row[that.header.stateField] = checked;\n                rows.push(row);\n                that.trigger(checked ? 'check' : 'uncheck', row, $el);\n            }\n        });\n        this.updateSelected();\n        this.trigger(checked ? 'check-some' : 'uncheck-some', rows);\n    };\n\n    BootstrapTable.prototype.destroy = function () {\n        this.$el.insertBefore(this.$container);\n        $(this.options.toolbar).insertBefore(this.$el);\n        this.$container.next().remove();\n        this.$container.remove();\n        this.$el.html(this.$el_.html())\n            .css('margin-top', '0')\n            .attr('class', this.$el_.attr('class') || ''); // reset the class\n    };\n\n    BootstrapTable.prototype.showLoading = function () {\n        this.$tableLoading.show();\n    };\n\n    BootstrapTable.prototype.hideLoading = function () {\n        this.$tableLoading.hide();\n    };\n\n    BootstrapTable.prototype.togglePagination = function () {\n        this.options.pagination = !this.options.pagination;\n        var button = this.$toolbar.find('button[name=\"paginationSwitch\"] i');\n        if (this.options.pagination) {\n            button.attr(\"class\", this.options.iconsPrefix + \" \" + this.options.icons.paginationSwitchDown);\n        } else {\n            button.attr(\"class\", this.options.iconsPrefix + \" \" + this.options.icons.paginationSwitchUp);\n        }\n        this.updatePagination();\n    };\n\n    BootstrapTable.prototype.refresh = function (params) {\n        if (params && params.url) {\n            this.options.url = params.url;\n        }\n        if (params && params.pageNumber) {\n            this.options.pageNumber = params.pageNumber;\n        }\n        if (params && params.pageSize) {\n            this.options.pageSize = params.pageSize;\n        }\n        this.initServer(params && params.silent,\n            params && params.query, params && params.url);\n        this.trigger('refresh', params);\n    };\n\n    BootstrapTable.prototype.resetWidth = function () {\n        if (this.options.showHeader && this.options.height) {\n            this.fitHeader();\n        }\n        if (this.options.showFooter) {\n            this.fitFooter();\n        }\n    };\n\n    BootstrapTable.prototype.showColumn = function (field) {\n        this.toggleColumn(getFieldIndex(this.columns, field), true, true);\n    };\n\n    BootstrapTable.prototype.hideColumn = function (field) {\n        this.toggleColumn(getFieldIndex(this.columns, field), false, true);\n    };\n\n    BootstrapTable.prototype.getHiddenColumns = function () {\n        return $.grep(this.columns, function (column) {\n            return !column.visible;\n        });\n    };\n\n    BootstrapTable.prototype.getVisibleColumns = function () {\n        return $.grep(this.columns, function (column) {\n            return column.visible;\n        });\n    };\n\n    BootstrapTable.prototype.toggleAllColumns = function (visible) {\n        $.each(this.columns, function (i, column) {\n            this.columns[i].visible = visible;\n        });\n\n        this.initHeader();\n        this.initSearch();\n        this.initPagination();\n        this.initBody();\n        if (this.options.showColumns) {\n            var $items = this.$toolbar.find('.keep-open input').prop('disabled', false);\n\n            if ($items.filter(':checked').length <= this.options.minimumCountColumns) {\n                $items.filter(':checked').prop('disabled', true);\n            }\n        }\n    };\n\n    BootstrapTable.prototype.showAllColumns = function () {\n        this.toggleAllColumns(true);\n    };\n\n    BootstrapTable.prototype.hideAllColumns = function () {\n        this.toggleAllColumns(false);\n    };\n\n    BootstrapTable.prototype.filterBy = function (columns) {\n        this.filterColumns = $.isEmptyObject(columns) ? {} : columns;\n        this.options.pageNumber = 1;\n        this.initSearch();\n        this.updatePagination();\n    };\n\n    BootstrapTable.prototype.scrollTo = function (value) {\n        if (typeof value === 'string') {\n            value = value === 'bottom' ? this.$tableBody[0].scrollHeight : 0;\n        }\n        if (typeof value === 'number') {\n            this.$tableBody.scrollTop(value);\n        }\n        if (typeof value === 'undefined') {\n            return this.$tableBody.scrollTop();\n        }\n    };\n\n    BootstrapTable.prototype.getScrollPosition = function () {\n        return this.scrollTo();\n    };\n\n    BootstrapTable.prototype.selectPage = function (page) {\n        if (page > 0 && page <= this.options.totalPages) {\n            this.options.pageNumber = page;\n            this.updatePagination();\n        }\n    };\n\n    BootstrapTable.prototype.prevPage = function () {\n        if (this.options.pageNumber > 1) {\n            this.options.pageNumber--;\n            this.updatePagination();\n        }\n    };\n\n    BootstrapTable.prototype.nextPage = function () {\n        if (this.options.pageNumber < this.options.totalPages) {\n            this.options.pageNumber++;\n            this.updatePagination();\n        }\n    };\n\n    BootstrapTable.prototype.toggleView = function () {\n        this.options.cardView = !this.options.cardView;\n        this.initHeader();\n        // Fixed remove toolbar when click cardView button.\n        //that.initToolbar();\n        this.initBody();\n        this.trigger('toggle', this.options.cardView);\n    };\n\n    BootstrapTable.prototype.refreshOptions = function (options) {\n        //If the objects are equivalent then avoid the call of destroy / init methods\n        if (compareObjects(this.options, options, true)) {\n            return;\n        }\n        this.options = $.extend(this.options, options);\n        this.trigger('refresh-options', this.options);\n        this.destroy();\n        this.init();\n    };\n\n    BootstrapTable.prototype.resetSearch = function (text) {\n        var $search = this.$toolbar.find('.search input');\n        $search.val(text || '');\n        this.onSearch({currentTarget: $search});\n    };\n\n    BootstrapTable.prototype.expandRow_ = function (expand, index) {\n        var $tr = this.$body.find(sprintf('> tr[data-index=\"%s\"]', index));\n        if ($tr.next().is('tr.detail-view') === (expand ? false : true)) {\n            $tr.find('> td > .detail-icon').click();\n        }\n    };\n\n    BootstrapTable.prototype.expandRow = function (index) {\n        this.expandRow_(true, index);\n    };\n\n    BootstrapTable.prototype.collapseRow = function (index) {\n        this.expandRow_(false, index);\n    };\n\n    BootstrapTable.prototype.expandAllRows = function (isSubTable) {\n        if (isSubTable) {\n            var $tr = this.$body.find(sprintf('> tr[data-index=\"%s\"]', 0)),\n                that = this,\n                detailIcon = null,\n                executeInterval = false,\n                idInterval = -1;\n\n            if (!$tr.next().is('tr.detail-view')) {\n                $tr.find('> td > .detail-icon').click();\n                executeInterval = true;\n            } else if (!$tr.next().next().is('tr.detail-view')) {\n                $tr.next().find(\".detail-icon\").click();\n                executeInterval = true;\n            }\n\n            if (executeInterval) {\n                try {\n                    idInterval = setInterval(function () {\n                        detailIcon = that.$body.find(\"tr.detail-view\").last().find(\".detail-icon\");\n                        if (detailIcon.length > 0) {\n                            detailIcon.click();\n                        } else {\n                            clearInterval(idInterval);\n                        }\n                    }, 1);\n                } catch (ex) {\n                    clearInterval(idInterval);\n                }\n            }\n        } else {\n            var trs = this.$body.children();\n            for (var i = 0; i < trs.length; i++) {\n                this.expandRow_(true, $(trs[i]).data(\"index\"));\n            }\n        }\n    };\n\n    BootstrapTable.prototype.collapseAllRows = function (isSubTable) {\n        if (isSubTable) {\n            this.expandRow_(false, 0);\n        } else {\n            var trs = this.$body.children();\n            for (var i = 0; i < trs.length; i++) {\n                this.expandRow_(false, $(trs[i]).data(\"index\"));\n            }\n        }\n    };\n\n    BootstrapTable.prototype.updateFormatText = function (name, text) {\n        if (this.options[sprintf('format%s', name)]) {\n            if (typeof text === 'string') {\n                this.options[sprintf('format%s', name)] = function () {\n                    return text;\n                };\n            } else if (typeof text === 'function') {\n                this.options[sprintf('format%s', name)] = text;\n            }\n        }\n        this.initToolbar();\n        this.initPagination();\n        this.initBody();\n    };\n\n    // BOOTSTRAP TABLE PLUGIN DEFINITION\n    // =======================\n\n    var allowedMethods = [\n        'getOptions',\n        'getSelections', 'getAllSelections', 'getData',\n        'load', 'append', 'prepend', 'remove', 'removeAll',\n        'insertRow', 'updateRow', 'updateCell', 'updateByUniqueId', 'removeByUniqueId',\n        'getRowByUniqueId', 'showRow', 'hideRow', 'getHiddenRows',\n        'mergeCells',\n        'checkAll', 'uncheckAll', 'checkInvert',\n        'check', 'uncheck',\n        'checkBy', 'uncheckBy',\n        'refresh',\n        'resetView',\n        'resetWidth',\n        'destroy',\n        'showLoading', 'hideLoading',\n        'showColumn', 'hideColumn', 'getHiddenColumns', 'getVisibleColumns',\n        'showAllColumns', 'hideAllColumns',\n        'filterBy',\n        'scrollTo',\n        'getScrollPosition',\n        'selectPage', 'prevPage', 'nextPage',\n        'togglePagination',\n        'toggleView',\n        'refreshOptions',\n        'resetSearch',\n        'expandRow', 'collapseRow', 'expandAllRows', 'collapseAllRows',\n        'updateFormatText'\n    ];\n\n    $.fn.bootstrapTable = function (option) {\n        var value,\n            args = Array.prototype.slice.call(arguments, 1);\n\n        this.each(function () {\n            var $this = $(this),\n                data = $this.data('bootstrap.table'),\n                options = $.extend({}, BootstrapTable.DEFAULTS, $this.data(),\n                    typeof option === 'object' && option);\n\n            if (typeof option === 'string') {\n                if ($.inArray(option, allowedMethods) < 0) {\n                    throw new Error(\"Unknown method: \" + option);\n                }\n\n                if (!data) {\n                    return;\n                }\n\n                value = data[option].apply(data, args);\n\n                if (option === 'destroy') {\n                    $this.removeData('bootstrap.table');\n                }\n            }\n\n            if (!data) {\n                $this.data('bootstrap.table', (data = new BootstrapTable(this, options)));\n            }\n        });\n\n        return typeof value === 'undefined' ? this : value;\n    };\n\n    $.fn.bootstrapTable.Constructor = BootstrapTable;\n    $.fn.bootstrapTable.defaults = BootstrapTable.DEFAULTS;\n    $.fn.bootstrapTable.columnDefaults = BootstrapTable.COLUMN_DEFAULTS;\n    $.fn.bootstrapTable.locales = BootstrapTable.LOCALES;\n    $.fn.bootstrapTable.methods = allowedMethods;\n    $.fn.bootstrapTable.utils = {\n        sprintf: sprintf,\n        getFieldIndex: getFieldIndex,\n        compareObjects: compareObjects,\n        calculateObjectValue: calculateObjectValue,\n        getItemField: getItemField,\n        objectKeys: objectKeys,\n        isIEBrowser: isIEBrowser\n    };\n\n    // BOOTSTRAP TABLE INIT\n    // =======================\n\n    $(function () {\n        $('[data-toggle=\"table\"]').bootstrapTable();\n    });\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/Gruntfile.js":"'use strict';\n\nvar fs = require('fs');\n\nmodule.exports = function(grunt) {\n\n    // Project configuration.\n    grunt.initConfig({\n        // Metadata.\n        pkg: grunt.file.readJSON('bootstrap-table.jquery.json'),\n        banner: '/*\\n' +\n                '* <%= pkg.name %> - v<%= pkg.version %> - <%= grunt.template.today(\"yyyy-mm-dd\") %>\\n' +\n                '<%= pkg.homepage ? \"* \" + pkg.homepage : \"\" %>\\n' +\n                '* Copyright (c) <%= grunt.template.today(\"yyyy\") %> <%= pkg.author.name %>\\n' +\n                '* Licensed <%= _.pluck(pkg.licenses, \"type\").join(\", \") %>\\n' +\n                '*/\\n',\n        // Task configuration.\n        clean: ['dist', 'docs/dist'],\n        concat: {\n            //basic_target: {\n            //    src: ['src/<%= pkg.name %>.js', 'src/extensions/**/*.js'],\n            //    dest: 'dist/<%= pkg.name %>-all.js'\n            //},\n            locale_target: {\n                src: ['src/locale/**/*.js'],\n                dest: 'dist/<%= pkg.name %>-locale-all.js'\n            }\n        },\n        uglify: {\n            options: {\n                banner: '<%= banner %>'\n            },\n            basic_target: {\n                files: {\n                    'dist/<%= pkg.name %>.min.js': ['src/<%=pkg.name %>.js'],\n                    //'dist/<%= pkg.name %>-all.min.js': ['dist/<%=pkg.name %>-all.js'],\n                    'dist/<%= pkg.name %>-locale-all.min.js': ['dist/<%=pkg.name %>-locale-all.js']\n                }\n            },\n            locale_target: {\n                files: [{\n                    expand: true,\n                    cwd: 'src/locale',\n                    src: '**/*.js',\n                    dest: 'dist/locale',\n                    ext: '.min.js' // replace .js to .min.js\n                }]\n            },\n            extensions_target: {\n                files: [{\n                    expand: true,\n                    cwd: 'src/extensions',\n                    src: '**/*.js',\n                    dest: 'dist/extensions',\n                    ext: '.min.js' // replace .js to .min.js\n                }]\n            }\n        },\n        cssmin: {\n            add_banner: {\n                options: {\n                    banner: '<%= banner %>'\n                },\n                files: {\n                    'dist/<%= pkg.name %>.min.css': ['src/<%=pkg.name %>.css']\n                }\n            }\n        },\n        copy: {\n            source: {\n                cwd: 'src',                     // set working folder / root to copy\n                src: ['**/*.js', '**/*.css'],   // copy all files and subfolders\n                dest: 'dist',                   // destination folder\n                expand: true                    // required when using cwd\n            },\n            files: {\n                cwd: 'dist',            // set working folder / root to copy\n                src: '**/*',            // copy all files and subfolders\n                dest: 'docs/dist',      // destination folder\n                expand: true            // required when using cwd\n            }\n        },\n        release: {\n            options: {\n                additionalFiles: ['bootstrap-table.jquery.json'],\n                beforeRelease: ['docs', 'default']\n            }\n        }\n    });\n\n    var bumpVersion = function (path, version, startWith) {\n        var lines = fs.readFileSync(path, 'utf8').split('\\n');\n        lines.forEach(function (line, i) {\n            if (line.indexOf(startWith) === 0) {\n                lines[i] = startWith + version;\n            }\n        });\n        fs.writeFileSync(path, lines.join('\\n'), 'utf8');\n\n        grunt.log.ok('bumped version of ' + path + ' to ' + version);\n    };\n\n    grunt.registerTask('docs', 'build the docs', function () {\n        var version = require('./package.json').version;\n        bumpVersion('./_config.yml', version, 'current_version: ');\n        bumpVersion('./src/bootstrap-table.js', version, ' * version: ');\n        bumpVersion('./src/bootstrap-table.css', version, ' * version: ');\n\n        var changeLog = fs.readFileSync('./CHANGELOG.md', 'utf8');\n        var latestLogs = changeLog.split('### ')[1];\n        var date = new Date();\n\n        var lines = [\n            '### Latest release (' +\n            [date.getFullYear(), date.getMonth() + 1, date.getDate()].join('-') + ')',\n            '',\n            '#### v' + latestLogs\n        ];\n        fs.writeFileSync('./docs/_includes/latest-release.md', lines.join('\\n'), 'utf8');\n\n        grunt.log.ok('updated the latest-release.md to ' + version);\n    });\n\n    grunt.loadNpmTasks('grunt-contrib-clean');\n    grunt.loadNpmTasks('grunt-contrib-concat');\n    grunt.loadNpmTasks('grunt-contrib-uglify');\n    grunt.loadNpmTasks('grunt-contrib-cssmin');\n    grunt.loadNpmTasks('grunt-contrib-copy');\n    grunt.loadNpmTasks('grunt-release');\n\n    grunt.registerTask('default', ['clean', 'concat', 'uglify', 'cssmin', 'copy']);\n};\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/bootstrap-table.js":"/**\n * @author zhixin wen <wenzhixin2010@gmail.com>\n * version: 1.11.1\n * https://github.com/wenzhixin/bootstrap-table/\n */\n\n(function ($) {\n    'use strict';\n\n    // TOOLS DEFINITION\n    // ======================\n\n    var cachedWidth = null;\n\n    // it only does '%s', and return '' when arguments are undefined\n    var sprintf = function (str) {\n        var args = arguments,\n            flag = true,\n            i = 1;\n\n        str = str.replace(/%s/g, function () {\n            var arg = args[i++];\n\n            if (typeof arg === 'undefined') {\n                flag = false;\n                return '';\n            }\n            return arg;\n        });\n        return flag ? str : '';\n    };\n\n    var getPropertyFromOther = function (list, from, to, value) {\n        var result = '';\n        $.each(list, function (i, item) {\n            if (item[from] === value) {\n                result = item[to];\n                return false;\n            }\n            return true;\n        });\n        return result;\n    };\n\n    var getFieldIndex = function (columns, field) {\n        var index = -1;\n\n        $.each(columns, function (i, column) {\n            if (column.field === field) {\n                index = i;\n                return false;\n            }\n            return true;\n        });\n        return index;\n    };\n\n    // http://jsfiddle.net/wenyi/47nz7ez9/3/\n    var setFieldIndex = function (columns) {\n        var i, j, k,\n            totalCol = 0,\n            flag = [];\n\n        for (i = 0; i < columns[0].length; i++) {\n            totalCol += columns[0][i].colspan || 1;\n        }\n\n        for (i = 0; i < columns.length; i++) {\n            flag[i] = [];\n            for (j = 0; j < totalCol; j++) {\n                flag[i][j] = false;\n            }\n        }\n\n        for (i = 0; i < columns.length; i++) {\n            for (j = 0; j < columns[i].length; j++) {\n                var r = columns[i][j],\n                    rowspan = r.rowspan || 1,\n                    colspan = r.colspan || 1,\n                    index = $.inArray(false, flag[i]);\n\n                if (colspan === 1) {\n                    r.fieldIndex = index;\n                    // when field is undefined, use index instead\n                    if (typeof r.field === 'undefined') {\n                        r.field = index;\n                    }\n                }\n\n                for (k = 0; k < rowspan; k++) {\n                    flag[i + k][index] = true;\n                }\n                for (k = 0; k < colspan; k++) {\n                    flag[i][index + k] = true;\n                }\n            }\n        }\n    };\n\n    var getScrollBarWidth = function () {\n        if (cachedWidth === null) {\n            var inner = $('<p/>').addClass('fixed-table-scroll-inner'),\n                outer = $('<div/>').addClass('fixed-table-scroll-outer'),\n                w1, w2;\n\n            outer.append(inner);\n            $('body').append(outer);\n\n            w1 = inner[0].offsetWidth;\n            outer.css('overflow', 'scroll');\n            w2 = inner[0].offsetWidth;\n\n            if (w1 === w2) {\n                w2 = outer[0].clientWidth;\n            }\n\n            outer.remove();\n            cachedWidth = w1 - w2;\n        }\n        return cachedWidth;\n    };\n\n    var calculateObjectValue = function (self, name, args, defaultValue) {\n        var func = name;\n\n        if (typeof name === 'string') {\n            // support obj.func1.func2\n            var names = name.split('.');\n\n            if (names.length > 1) {\n                func = window;\n                $.each(names, function (i, f) {\n                    func = func[f];\n                });\n            } else {\n                func = window[name];\n            }\n        }\n        if (typeof func === 'object') {\n            return func;\n        }\n        if (typeof func === 'function') {\n            return func.apply(self, args || []);\n        }\n        if (!func && typeof name === 'string' && sprintf.apply(this, [name].concat(args))) {\n            return sprintf.apply(this, [name].concat(args));\n        }\n        return defaultValue;\n    };\n\n    var compareObjects = function (objectA, objectB, compareLength) {\n        // Create arrays of property names\n        var objectAProperties = Object.getOwnPropertyNames(objectA),\n            objectBProperties = Object.getOwnPropertyNames(objectB),\n            propName = '';\n\n        if (compareLength) {\n            // If number of properties is different, objects are not equivalent\n            if (objectAProperties.length !== objectBProperties.length) {\n                return false;\n            }\n        }\n\n        for (var i = 0; i < objectAProperties.length; i++) {\n            propName = objectAProperties[i];\n\n            // If the property is not in the object B properties, continue with the next property\n            if ($.inArray(propName, objectBProperties) > -1) {\n                // If values of same property are not equal, objects are not equivalent\n                if (objectA[propName] !== objectB[propName]) {\n                    return false;\n                }\n            }\n        }\n\n        // If we made it this far, objects are considered equivalent\n        return true;\n    };\n\n    var escapeHTML = function (text) {\n        if (typeof text === 'string') {\n            return text\n                .replace(/&/g, '&amp;')\n                .replace(/</g, '&lt;')\n                .replace(/>/g, '&gt;')\n                .replace(/\"/g, '&quot;')\n                .replace(/'/g, '&#039;')\n                .replace(/`/g, '&#x60;');\n        }\n        return text;\n    };\n\n    var getRealDataAttr = function (dataAttr) {\n        for (var attr in dataAttr) {\n            var auxAttr = attr.split(/(?=[A-Z])/).join('-').toLowerCase();\n            if (auxAttr !== attr) {\n                dataAttr[auxAttr] = dataAttr[attr];\n                delete dataAttr[attr];\n            }\n        }\n\n        return dataAttr;\n    };\n\n    var getItemField = function (item, field, escape) {\n        var value = item;\n\n        if (typeof field !== 'string' || item.hasOwnProperty(field)) {\n            return escape ? escapeHTML(item[field]) : item[field];\n        }\n        var props = field.split('.');\n        for (var p in props) {\n            if (props.hasOwnProperty(p)) {\n                value = value && value[props[p]];\n            }\n        }\n        return escape ? escapeHTML(value) : value;\n    };\n\n    var isIEBrowser = function () {\n        return !!(navigator.userAgent.indexOf(\"MSIE \") > 0 || !!navigator.userAgent.match(/Trident.*rv\\:11\\./));\n    };\n\n    var objectKeys = function () {\n        // From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\n        if (!Object.keys) {\n            Object.keys = (function() {\n                var hasOwnProperty = Object.prototype.hasOwnProperty,\n                    hasDontEnumBug = !({ toString: null }).propertyIsEnumerable('toString'),\n                    dontEnums = [\n                        'toString',\n                        'toLocaleString',\n                        'valueOf',\n                        'hasOwnProperty',\n                        'isPrototypeOf',\n                        'propertyIsEnumerable',\n                        'constructor'\n                    ],\n                    dontEnumsLength = dontEnums.length;\n\n                return function(obj) {\n                    if (typeof obj !== 'object' && (typeof obj !== 'function' || obj === null)) {\n                        throw new TypeError('Object.keys called on non-object');\n                    }\n\n                    var result = [], prop, i;\n\n                    for (prop in obj) {\n                        if (hasOwnProperty.call(obj, prop)) {\n                            result.push(prop);\n                        }\n                    }\n\n                    if (hasDontEnumBug) {\n                        for (i = 0; i < dontEnumsLength; i++) {\n                            if (hasOwnProperty.call(obj, dontEnums[i])) {\n                                result.push(dontEnums[i]);\n                            }\n                        }\n                    }\n                    return result;\n                };\n            }());\n        }\n    };\n\n    // BOOTSTRAP TABLE CLASS DEFINITION\n    // ======================\n\n    var BootstrapTable = function (el, options) {\n        this.options = options;\n        this.$el = $(el);\n        this.$el_ = this.$el.clone();\n        this.timeoutId_ = 0;\n        this.timeoutFooter_ = 0;\n\n        this.init();\n    };\n\n    BootstrapTable.DEFAULTS = {\n        classes: 'table table-hover',\n        sortClass: undefined,\n        locale: undefined,\n        height: undefined,\n        undefinedText: '-',\n        sortName: undefined,\n        sortOrder: 'asc',\n        sortStable: false,\n        striped: false,\n        columns: [[]],\n        data: [],\n        totalField: 'total',\n        dataField: 'rows',\n        method: 'get',\n        url: undefined,\n        ajax: undefined,\n        cache: true,\n        contentType: 'application/json',\n        dataType: 'json',\n        ajaxOptions: {},\n        queryParams: function (params) {\n            return params;\n        },\n        queryParamsType: 'limit', // undefined\n        responseHandler: function (res) {\n            return res;\n        },\n        pagination: false,\n        onlyInfoPagination: false,\n        paginationLoop: true,\n        sidePagination: 'client', // client or server\n        totalRows: 0, // server side need to set\n        pageNumber: 1,\n        pageSize: 10,\n        pageList: [10, 25, 50, 100],\n        paginationHAlign: 'right', //right, left\n        paginationVAlign: 'bottom', //bottom, top, both\n        paginationDetailHAlign: 'left', //right, left\n        paginationPreText: '&lsaquo;',\n        paginationNextText: '&rsaquo;',\n        search: false,\n        searchOnEnterKey: false,\n        strictSearch: false,\n        searchAlign: 'right',\n        selectItemName: 'btSelectItem',\n        showHeader: true,\n        showFooter: false,\n        showColumns: false,\n        showPaginationSwitch: false,\n        showRefresh: false,\n        showToggle: false,\n        buttonsAlign: 'right',\n        smartDisplay: true,\n        escape: false,\n        minimumCountColumns: 1,\n        idField: undefined,\n        uniqueId: undefined,\n        cardView: false,\n        detailView: false,\n        detailFormatter: function (index, row) {\n            return '';\n        },\n        trimOnSearch: true,\n        clickToSelect: false,\n        singleSelect: false,\n        toolbar: undefined,\n        toolbarAlign: 'left',\n        checkboxHeader: true,\n        sortable: true,\n        silentSort: true,\n        maintainSelected: false,\n        searchTimeOut: 500,\n        searchText: '',\n        iconSize: undefined,\n        buttonsClass: 'default',\n        iconsPrefix: 'glyphicon', // glyphicon of fa (font awesome)\n        icons: {\n            paginationSwitchDown: 'glyphicon-collapse-down icon-chevron-down',\n            paginationSwitchUp: 'glyphicon-collapse-up icon-chevron-up',\n            refresh: 'glyphicon-refresh icon-refresh',\n            toggle: 'glyphicon-list-alt icon-list-alt',\n            columns: 'glyphicon-th icon-th',\n            detailOpen: 'glyphicon-plus icon-plus',\n            detailClose: 'glyphicon-minus icon-minus'\n        },\n\n        customSearch: $.noop,\n\n        customSort: $.noop,\n\n        rowStyle: function (row, index) {\n            return {};\n        },\n\n        rowAttributes: function (row, index) {\n            return {};\n        },\n\n        footerStyle: function (row, index) {\n            return {};\n        },\n\n        onAll: function (name, args) {\n            return false;\n        },\n        onClickCell: function (field, value, row, $element) {\n            return false;\n        },\n        onDblClickCell: function (field, value, row, $element) {\n            return false;\n        },\n        onClickRow: function (item, $element) {\n            return false;\n        },\n        onDblClickRow: function (item, $element) {\n            return false;\n        },\n        onSort: function (name, order) {\n            return false;\n        },\n        onCheck: function (row) {\n            return false;\n        },\n        onUncheck: function (row) {\n            return false;\n        },\n        onCheckAll: function (rows) {\n            return false;\n        },\n        onUncheckAll: function (rows) {\n            return false;\n        },\n        onCheckSome: function (rows) {\n            return false;\n        },\n        onUncheckSome: function (rows) {\n            return false;\n        },\n        onLoadSuccess: function (data) {\n            return false;\n        },\n        onLoadError: function (status) {\n            return false;\n        },\n        onColumnSwitch: function (field, checked) {\n            return false;\n        },\n        onPageChange: function (number, size) {\n            return false;\n        },\n        onSearch: function (text) {\n            return false;\n        },\n        onToggle: function (cardView) {\n            return false;\n        },\n        onPreBody: function (data) {\n            return false;\n        },\n        onPostBody: function () {\n            return false;\n        },\n        onPostHeader: function () {\n            return false;\n        },\n        onExpandRow: function (index, row, $detail) {\n            return false;\n        },\n        onCollapseRow: function (index, row) {\n            return false;\n        },\n        onRefreshOptions: function (options) {\n            return false;\n        },\n        onRefresh: function (params) {\n          return false;\n        },\n        onResetView: function () {\n            return false;\n        }\n    };\n\n    BootstrapTable.LOCALES = {};\n\n    BootstrapTable.LOCALES['en-US'] = BootstrapTable.LOCALES.en = {\n        formatLoadingMessage: function () {\n            return 'Loading, please wait...';\n        },\n        formatRecordsPerPage: function (pageNumber) {\n            return sprintf('%s rows per page', pageNumber);\n        },\n        formatShowingRows: function (pageFrom, pageTo, totalRows) {\n            return sprintf('Showing %s to %s of %s rows', pageFrom, pageTo, totalRows);\n        },\n        formatDetailPagination: function (totalRows) {\n            return sprintf('Showing %s rows', totalRows);\n        },\n        formatSearch: function () {\n            return 'Search';\n        },\n        formatNoMatches: function () {\n            return 'No matching records found';\n        },\n        formatPaginationSwitch: function () {\n            return 'Hide/Show pagination';\n        },\n        formatRefresh: function () {\n            return 'Refresh';\n        },\n        formatToggle: function () {\n            return 'Toggle';\n        },\n        formatColumns: function () {\n            return 'Columns';\n        },\n        formatAllRows: function () {\n            return 'All';\n        }\n    };\n\n    $.extend(BootstrapTable.DEFAULTS, BootstrapTable.LOCALES['en-US']);\n\n    BootstrapTable.COLUMN_DEFAULTS = {\n        radio: false,\n        checkbox: false,\n        checkboxEnabled: true,\n        field: undefined,\n        title: undefined,\n        titleTooltip: undefined,\n        'class': undefined,\n        align: undefined, // left, right, center\n        halign: undefined, // left, right, center\n        falign: undefined, // left, right, center\n        valign: undefined, // top, middle, bottom\n        width: undefined,\n        sortable: false,\n        order: 'asc', // asc, desc\n        visible: true,\n        switchable: true,\n        clickToSelect: true,\n        formatter: undefined,\n        footerFormatter: undefined,\n        events: undefined,\n        sorter: undefined,\n        sortName: undefined,\n        cellStyle: undefined,\n        searchable: true,\n        searchFormatter: true,\n        cardVisible: true,\n        escape : false\n    };\n\n    BootstrapTable.EVENTS = {\n        'all.bs.table': 'onAll',\n        'click-cell.bs.table': 'onClickCell',\n        'dbl-click-cell.bs.table': 'onDblClickCell',\n        'click-row.bs.table': 'onClickRow',\n        'dbl-click-row.bs.table': 'onDblClickRow',\n        'sort.bs.table': 'onSort',\n        'check.bs.table': 'onCheck',\n        'uncheck.bs.table': 'onUncheck',\n        'check-all.bs.table': 'onCheckAll',\n        'uncheck-all.bs.table': 'onUncheckAll',\n        'check-some.bs.table': 'onCheckSome',\n        'uncheck-some.bs.table': 'onUncheckSome',\n        'load-success.bs.table': 'onLoadSuccess',\n        'load-error.bs.table': 'onLoadError',\n        'column-switch.bs.table': 'onColumnSwitch',\n        'page-change.bs.table': 'onPageChange',\n        'search.bs.table': 'onSearch',\n        'toggle.bs.table': 'onToggle',\n        'pre-body.bs.table': 'onPreBody',\n        'post-body.bs.table': 'onPostBody',\n        'post-header.bs.table': 'onPostHeader',\n        'expand-row.bs.table': 'onExpandRow',\n        'collapse-row.bs.table': 'onCollapseRow',\n        'refresh-options.bs.table': 'onRefreshOptions',\n        'reset-view.bs.table': 'onResetView',\n        'refresh.bs.table': 'onRefresh'\n    };\n\n    BootstrapTable.prototype.init = function () {\n        this.initLocale();\n        this.initContainer();\n        this.initTable();\n        this.initHeader();\n        this.initData();\n        this.initHiddenRows();\n        this.initFooter();\n        this.initToolbar();\n        this.initPagination();\n        this.initBody();\n        this.initSearchText();\n        this.initServer();\n    };\n\n    BootstrapTable.prototype.initLocale = function () {\n        if (this.options.locale) {\n            var parts = this.options.locale.split(/-|_/);\n            parts[0].toLowerCase();\n            if (parts[1]) parts[1].toUpperCase();\n            if ($.fn.bootstrapTable.locales[this.options.locale]) {\n                // locale as requested\n                $.extend(this.options, $.fn.bootstrapTable.locales[this.options.locale]);\n            } else if ($.fn.bootstrapTable.locales[parts.join('-')]) {\n                // locale with sep set to - (in case original was specified with _)\n                $.extend(this.options, $.fn.bootstrapTable.locales[parts.join('-')]);\n            } else if ($.fn.bootstrapTable.locales[parts[0]]) {\n                // short locale language code (i.e. 'en')\n                $.extend(this.options, $.fn.bootstrapTable.locales[parts[0]]);\n            }\n        }\n    };\n\n    BootstrapTable.prototype.initContainer = function () {\n        this.$container = $([\n            '<div class=\"bootstrap-table\">',\n            '<div class=\"fixed-table-toolbar\"></div>',\n            this.options.paginationVAlign === 'top' || this.options.paginationVAlign === 'both' ?\n                '<div class=\"fixed-table-pagination\" style=\"clear: both;\"></div>' :\n                '',\n            '<div class=\"fixed-table-container\">',\n            '<div class=\"fixed-table-header\"><table></table></div>',\n            '<div class=\"fixed-table-body\">',\n            '<div class=\"fixed-table-loading\">',\n            this.options.formatLoadingMessage(),\n            '</div>',\n            '</div>',\n            '<div class=\"fixed-table-footer\"><table><tr></tr></table></div>',\n            this.options.paginationVAlign === 'bottom' || this.options.paginationVAlign === 'both' ?\n                '<div class=\"fixed-table-pagination\"></div>' :\n                '',\n            '</div>',\n            '</div>'\n        ].join(''));\n\n        this.$container.insertAfter(this.$el);\n        this.$tableContainer = this.$container.find('.fixed-table-container');\n        this.$tableHeader = this.$container.find('.fixed-table-header');\n        this.$tableBody = this.$container.find('.fixed-table-body');\n        this.$tableLoading = this.$container.find('.fixed-table-loading');\n        this.$tableFooter = this.$container.find('.fixed-table-footer');\n        this.$toolbar = this.$container.find('.fixed-table-toolbar');\n        this.$pagination = this.$container.find('.fixed-table-pagination');\n\n        this.$tableBody.append(this.$el);\n        this.$container.after('<div class=\"clearfix\"></div>');\n\n        this.$el.addClass(this.options.classes);\n        if (this.options.striped) {\n            this.$el.addClass('table-striped');\n        }\n        if ($.inArray('table-no-bordered', this.options.classes.split(' ')) !== -1) {\n            this.$tableContainer.addClass('table-no-bordered');\n        }\n    };\n\n    BootstrapTable.prototype.initTable = function () {\n        var that = this,\n            columns = [],\n            data = [];\n\n        this.$header = this.$el.find('>thead');\n        if (!this.$header.length) {\n            this.$header = $('<thead></thead>').appendTo(this.$el);\n        }\n        this.$header.find('tr').each(function () {\n            var column = [];\n\n            $(this).find('th').each(function () {\n                // Fix #2014 - getFieldIndex and elsewhere assume this is string, causes issues if not\n                if (typeof $(this).data('field') !== 'undefined') {\n                    $(this).data('field', $(this).data('field') + '');\n                }\n                column.push($.extend({}, {\n                    title: $(this).html(),\n                    'class': $(this).attr('class'),\n                    titleTooltip: $(this).attr('title'),\n                    rowspan: $(this).attr('rowspan') ? +$(this).attr('rowspan') : undefined,\n                    colspan: $(this).attr('colspan') ? +$(this).attr('colspan') : undefined\n                }, $(this).data()));\n            });\n            columns.push(column);\n        });\n        if (!$.isArray(this.options.columns[0])) {\n            this.options.columns = [this.options.columns];\n        }\n        this.options.columns = $.extend(true, [], columns, this.options.columns);\n        this.columns = [];\n\n        setFieldIndex(this.options.columns);\n        $.each(this.options.columns, function (i, columns) {\n            $.each(columns, function (j, column) {\n                column = $.extend({}, BootstrapTable.COLUMN_DEFAULTS, column);\n\n                if (typeof column.fieldIndex !== 'undefined') {\n                    that.columns[column.fieldIndex] = column;\n                }\n\n                that.options.columns[i][j] = column;\n            });\n        });\n\n        // if options.data is setting, do not process tbody data\n        if (this.options.data.length) {\n            return;\n        }\n\n        var m = [];\n        this.$el.find('>tbody>tr').each(function (y) {\n            var row = {};\n\n            // save tr's id, class and data-* attributes\n            row._id = $(this).attr('id');\n            row._class = $(this).attr('class');\n            row._data = getRealDataAttr($(this).data());\n\n            $(this).find('>td').each(function (x) {\n                var $this = $(this),\n                    cspan = +$this.attr('colspan') || 1,\n                    rspan = +$this.attr('rowspan') || 1,\n                    tx, ty;\n\n                for (; m[y] && m[y][x]; x++); //skip already occupied cells in current row\n\n                for (tx = x; tx < x + cspan; tx++) { //mark matrix elements occupied by current cell with true\n                    for (ty = y; ty < y + rspan; ty++) {\n                        if (!m[ty]) { //fill missing rows\n                            m[ty] = [];\n                        }\n                        m[ty][tx] = true;\n                    }\n                }\n\n                var field = that.columns[x].field;\n\n                row[field] = $(this).html();\n                // save td's id, class and data-* attributes\n                row['_' + field + '_id'] = $(this).attr('id');\n                row['_' + field + '_class'] = $(this).attr('class');\n                row['_' + field + '_rowspan'] = $(this).attr('rowspan');\n                row['_' + field + '_colspan'] = $(this).attr('colspan');\n                row['_' + field + '_title'] = $(this).attr('title');\n                row['_' + field + '_data'] = getRealDataAttr($(this).data());\n            });\n            data.push(row);\n        });\n        this.options.data = data;\n        if (data.length) this.fromHtml = true;\n    };\n\n    BootstrapTable.prototype.initHeader = function () {\n        var that = this,\n            visibleColumns = {},\n            html = [];\n\n        this.header = {\n            fields: [],\n            styles: [],\n            classes: [],\n            formatters: [],\n            events: [],\n            sorters: [],\n            sortNames: [],\n            cellStyles: [],\n            searchables: []\n        };\n\n        $.each(this.options.columns, function (i, columns) {\n            html.push('<tr>');\n\n            if (i === 0 && !that.options.cardView && that.options.detailView) {\n                html.push(sprintf('<th class=\"detail\" rowspan=\"%s\"><div class=\"fht-cell\"></div></th>',\n                    that.options.columns.length));\n            }\n\n            $.each(columns, function (j, column) {\n                var text = '',\n                    halign = '', // header align style\n                    align = '', // body align style\n                    style = '',\n                    class_ = sprintf(' class=\"%s\"', column['class']),\n                    order = that.options.sortOrder || column.order,\n                    unitWidth = 'px',\n                    width = column.width;\n\n                if (column.width !== undefined && (!that.options.cardView)) {\n                    if (typeof column.width === 'string') {\n                        if (column.width.indexOf('%') !== -1) {\n                            unitWidth = '%';\n                        }\n                    }\n                }\n                if (column.width && typeof column.width === 'string') {\n                    width = column.width.replace('%', '').replace('px', '');\n                }\n\n                halign = sprintf('text-align: %s; ', column.halign ? column.halign : column.align);\n                align = sprintf('text-align: %s; ', column.align);\n                style = sprintf('vertical-align: %s; ', column.valign);\n                style += sprintf('width: %s; ', (column.checkbox || column.radio) && !width ?\n                    '36px' : (width ? width + unitWidth : undefined));\n\n                if (typeof column.fieldIndex !== 'undefined') {\n                    that.header.fields[column.fieldIndex] = column.field;\n                    that.header.styles[column.fieldIndex] = align + style;\n                    that.header.classes[column.fieldIndex] = class_;\n                    that.header.formatters[column.fieldIndex] = column.formatter;\n                    that.header.events[column.fieldIndex] = column.events;\n                    that.header.sorters[column.fieldIndex] = column.sorter;\n                    that.header.sortNames[column.fieldIndex] = column.sortName;\n                    that.header.cellStyles[column.fieldIndex] = column.cellStyle;\n                    that.header.searchables[column.fieldIndex] = column.searchable;\n\n                    if (!column.visible) {\n                        return;\n                    }\n\n                    if (that.options.cardView && (!column.cardVisible)) {\n                        return;\n                    }\n\n                    visibleColumns[column.field] = column;\n                }\n\n                html.push('<th' + sprintf(' title=\"%s\"', column.titleTooltip),\n                    column.checkbox || column.radio ?\n                        sprintf(' class=\"bs-checkbox %s\"', column['class'] || '') :\n                        class_,\n                    sprintf(' style=\"%s\"', halign + style),\n                    sprintf(' rowspan=\"%s\"', column.rowspan),\n                    sprintf(' colspan=\"%s\"', column.colspan),\n                    sprintf(' data-field=\"%s\"', column.field),\n                    '>');\n\n                html.push(sprintf('<div class=\"th-inner %s\">', that.options.sortable && column.sortable ?\n                    'sortable both' : ''));\n\n                text = that.options.escape ? escapeHTML(column.title) : column.title;\n\n                if (column.checkbox) {\n                    if (!that.options.singleSelect && that.options.checkboxHeader) {\n                        text = '<input name=\"btSelectAll\" type=\"checkbox\" />';\n                    }\n                    that.header.stateField = column.field;\n                }\n                if (column.radio) {\n                    text = '';\n                    that.header.stateField = column.field;\n                    that.options.singleSelect = true;\n                }\n\n                html.push(text);\n                html.push('</div>');\n                html.push('<div class=\"fht-cell\"></div>');\n                html.push('</div>');\n                html.push('</th>');\n            });\n            html.push('</tr>');\n        });\n\n        this.$header.html(html.join(''));\n        this.$header.find('th[data-field]').each(function (i) {\n            $(this).data(visibleColumns[$(this).data('field')]);\n        });\n        this.$container.off('click', '.th-inner').on('click', '.th-inner', function (event) {\n            var target = $(this);\n\n            if (that.options.detailView) {\n                if (target.closest('.bootstrap-table')[0] !== that.$container[0])\n                    return false;\n            }\n\n            if (that.options.sortable && target.parent().data().sortable) {\n                that.onSort(event);\n            }\n        });\n\n        this.$header.children().children().off('keypress').on('keypress', function (event) {\n            if (that.options.sortable && $(this).data().sortable) {\n                var code = event.keyCode || event.which;\n                if (code == 13) { //Enter keycode\n                    that.onSort(event);\n                }\n            }\n        });\n\n        $(window).off('resize.bootstrap-table');\n        if (!this.options.showHeader || this.options.cardView) {\n            this.$header.hide();\n            this.$tableHeader.hide();\n            this.$tableLoading.css('top', 0);\n        } else {\n            this.$header.show();\n            this.$tableHeader.show();\n            this.$tableLoading.css('top', this.$header.outerHeight() + 1);\n            // Assign the correct sortable arrow\n            this.getCaret();\n            $(window).on('resize.bootstrap-table', $.proxy(this.resetWidth, this));\n        }\n\n        this.$selectAll = this.$header.find('[name=\"btSelectAll\"]');\n        this.$selectAll.off('click').on('click', function () {\n                var checked = $(this).prop('checked');\n                that[checked ? 'checkAll' : 'uncheckAll']();\n                that.updateSelected();\n            });\n    };\n\n    BootstrapTable.prototype.initFooter = function () {\n        if (!this.options.showFooter || this.options.cardView) {\n            this.$tableFooter.hide();\n        } else {\n            this.$tableFooter.show();\n        }\n    };\n\n    /**\n     * @param data\n     * @param type: append / prepend\n     */\n    BootstrapTable.prototype.initData = function (data, type) {\n        if (type === 'append') {\n            this.data = this.data.concat(data);\n        } else if (type === 'prepend') {\n            this.data = [].concat(data).concat(this.data);\n        } else {\n            this.data = data || this.options.data;\n        }\n\n        // Fix #839 Records deleted when adding new row on filtered table\n        if (type === 'append') {\n            this.options.data = this.options.data.concat(data);\n        } else if (type === 'prepend') {\n            this.options.data = [].concat(data).concat(this.options.data);\n        } else {\n            this.options.data = this.data;\n        }\n\n        if (this.options.sidePagination === 'server') {\n            return;\n        }\n        this.initSort();\n    };\n\n    BootstrapTable.prototype.initSort = function () {\n        var that = this,\n            name = this.options.sortName,\n            order = this.options.sortOrder === 'desc' ? -1 : 1,\n            index = $.inArray(this.options.sortName, this.header.fields),\n            timeoutId = 0;\n\n        if (this.options.customSort !== $.noop) {\n            this.options.customSort.apply(this, [this.options.sortName, this.options.sortOrder]);\n            return;\n        }\n\n        if (index !== -1) {\n            if (this.options.sortStable) {\n                $.each(this.data, function (i, row) {\n                    if (!row.hasOwnProperty('_position')) row._position = i;\n                });\n            }\n\n            this.data.sort(function (a, b) {\n                if (that.header.sortNames[index]) {\n                    name = that.header.sortNames[index];\n                }\n                var aa = getItemField(a, name, that.options.escape),\n                    bb = getItemField(b, name, that.options.escape),\n                    value = calculateObjectValue(that.header, that.header.sorters[index], [aa, bb]);\n\n                if (value !== undefined) {\n                    return order * value;\n                }\n\n                // Fix #161: undefined or null string sort bug.\n                if (aa === undefined || aa === null) {\n                    aa = '';\n                }\n                if (bb === undefined || bb === null) {\n                    bb = '';\n                }\n\n                if (that.options.sortStable && aa === bb) {\n                    aa = a._position;\n                    bb = b._position;\n                }\n\n                // IF both values are numeric, do a numeric comparison\n                if ($.isNumeric(aa) && $.isNumeric(bb)) {\n                    // Convert numerical values form string to float.\n                    aa = parseFloat(aa);\n                    bb = parseFloat(bb);\n                    if (aa < bb) {\n                        return order * -1;\n                    }\n                    return order;\n                }\n\n                if (aa === bb) {\n                    return 0;\n                }\n\n                // If value is not a string, convert to string\n                if (typeof aa !== 'string') {\n                    aa = aa.toString();\n                }\n\n                if (aa.localeCompare(bb) === -1) {\n                    return order * -1;\n                }\n\n                return order;\n            });\n\n            if (this.options.sortClass !== undefined) {\n                clearTimeout(timeoutId);\n                timeoutId = setTimeout(function () {\n                    that.$el.removeClass(that.options.sortClass);\n                    var index = that.$header.find(sprintf('[data-field=\"%s\"]',\n                        that.options.sortName).index() + 1);\n                    that.$el.find(sprintf('tr td:nth-child(%s)', index))\n                        .addClass(that.options.sortClass);\n                }, 250);\n            }\n        }\n    };\n\n    BootstrapTable.prototype.onSort = function (event) {\n        var $this = event.type === \"keypress\" ? $(event.currentTarget) : $(event.currentTarget).parent(),\n            $this_ = this.$header.find('th').eq($this.index());\n\n        this.$header.add(this.$header_).find('span.order').remove();\n\n        if (this.options.sortName === $this.data('field')) {\n            this.options.sortOrder = this.options.sortOrder === 'asc' ? 'desc' : 'asc';\n        } else {\n            this.options.sortName = $this.data('field');\n            this.options.sortOrder = $this.data('order') === 'asc' ? 'desc' : 'asc';\n        }\n        this.trigger('sort', this.options.sortName, this.options.sortOrder);\n\n        $this.add($this_).data('order', this.options.sortOrder);\n\n        // Assign the correct sortable arrow\n        this.getCaret();\n\n        if (this.options.sidePagination === 'server') {\n            this.initServer(this.options.silentSort);\n            return;\n        }\n\n        this.initSort();\n        this.initBody();\n    };\n\n    BootstrapTable.prototype.initToolbar = function () {\n        var that = this,\n            html = [],\n            timeoutId = 0,\n            $keepOpen,\n            $search,\n            switchableCount = 0;\n\n        if (this.$toolbar.find('.bs-bars').children().length) {\n            $('body').append($(this.options.toolbar));\n        }\n        this.$toolbar.html('');\n\n        if (typeof this.options.toolbar === 'string' || typeof this.options.toolbar === 'object') {\n            $(sprintf('<div class=\"bs-bars pull-%s\"></div>', this.options.toolbarAlign))\n                .appendTo(this.$toolbar)\n                .append($(this.options.toolbar));\n        }\n\n        // showColumns, showToggle, showRefresh\n        html = [sprintf('<div class=\"columns columns-%s btn-group pull-%s\">',\n            this.options.buttonsAlign, this.options.buttonsAlign)];\n\n        if (typeof this.options.icons === 'string') {\n            this.options.icons = calculateObjectValue(null, this.options.icons);\n        }\n\n        if (this.options.showPaginationSwitch) {\n            html.push(sprintf('<button class=\"btn' +\n                    sprintf(' btn-%s', this.options.buttonsClass) +\n                    sprintf(' btn-%s', this.options.iconSize) +\n                    '\" type=\"button\" name=\"paginationSwitch\" aria-label=\"pagination Switch\" title=\"%s\">',\n                    this.options.formatPaginationSwitch()),\n                sprintf('<i class=\"%s %s\"></i>', this.options.iconsPrefix, this.options.icons.paginationSwitchDown),\n                '</button>');\n        }\n\n        if (this.options.showRefresh) {\n            html.push(sprintf('<button class=\"btn' +\n                    sprintf(' btn-%s', this.options.buttonsClass) +\n                    sprintf(' btn-%s', this.options.iconSize) +\n                    '\" type=\"button\" name=\"refresh\" aria-label=\"refresh\" title=\"%s\">',\n                    this.options.formatRefresh()),\n                sprintf('<i class=\"%s %s\"></i>', this.options.iconsPrefix, this.options.icons.refresh),\n                '</button>');\n        }\n\n        if (this.options.showToggle) {\n            html.push(sprintf('<button class=\"btn' +\n                    sprintf(' btn-%s', this.options.buttonsClass) +\n                    sprintf(' btn-%s', this.options.iconSize) +\n                    '\" type=\"button\" name=\"toggle\" aria-label=\"toggle\" title=\"%s\">',\n                    this.options.formatToggle()),\n                sprintf('<i class=\"%s %s\"></i>', this.options.iconsPrefix, this.options.icons.toggle),\n                '</button>');\n        }\n\n        if (this.options.showColumns) {\n            html.push(sprintf('<div class=\"keep-open btn-group\" title=\"%s\">',\n                    this.options.formatColumns()),\n                '<button type=\"button\" aria-label=\"columns\" class=\"btn' +\n                sprintf(' btn-%s', this.options.buttonsClass) +\n                sprintf(' btn-%s', this.options.iconSize) +\n                ' dropdown-toggle\" data-toggle=\"dropdown\">',\n                sprintf('<i class=\"%s %s\"></i>', this.options.iconsPrefix, this.options.icons.columns),\n                ' <span class=\"caret\"></span>',\n                '</button>',\n                '<ul class=\"dropdown-menu\" role=\"menu\">');\n\n            $.each(this.columns, function (i, column) {\n                if (column.radio || column.checkbox) {\n                    return;\n                }\n\n                if (that.options.cardView && !column.cardVisible) {\n                    return;\n                }\n\n                var checked = column.visible ? ' checked=\"checked\"' : '';\n\n                if (column.switchable) {\n                    html.push(sprintf('<li role=\"menuitem\">' +\n                        '<label><input type=\"checkbox\" data-field=\"%s\" value=\"%s\"%s> %s</label>' +\n                        '</li>', column.field, i, checked, column.title));\n                    switchableCount++;\n                }\n            });\n            html.push('</ul>',\n                '</div>');\n        }\n\n        html.push('</div>');\n\n        // Fix #188: this.showToolbar is for extensions\n        if (this.showToolbar || html.length > 2) {\n            this.$toolbar.append(html.join(''));\n        }\n\n        if (this.options.showPaginationSwitch) {\n            this.$toolbar.find('button[name=\"paginationSwitch\"]')\n                .off('click').on('click', $.proxy(this.togglePagination, this));\n        }\n\n        if (this.options.showRefresh) {\n            this.$toolbar.find('button[name=\"refresh\"]')\n                .off('click').on('click', $.proxy(this.refresh, this));\n        }\n\n        if (this.options.showToggle) {\n            this.$toolbar.find('button[name=\"toggle\"]')\n                .off('click').on('click', function () {\n                    that.toggleView();\n                });\n        }\n\n        if (this.options.showColumns) {\n            $keepOpen = this.$toolbar.find('.keep-open');\n\n            if (switchableCount <= this.options.minimumCountColumns) {\n                $keepOpen.find('input').prop('disabled', true);\n            }\n\n            $keepOpen.find('li').off('click').on('click', function (event) {\n                event.stopImmediatePropagation();\n            });\n            $keepOpen.find('input').off('click').on('click', function () {\n                var $this = $(this);\n\n                that.toggleColumn($(this).val(), $this.prop('checked'), false);\n                that.trigger('column-switch', $(this).data('field'), $this.prop('checked'));\n            });\n        }\n\n        if (this.options.search) {\n            html = [];\n            html.push(\n                '<div class=\"pull-' + this.options.searchAlign + ' search\">',\n                sprintf('<input class=\"form-control' +\n                    sprintf(' input-%s', this.options.iconSize) +\n                    '\" type=\"text\" placeholder=\"%s\">',\n                    this.options.formatSearch()),\n                '</div>');\n\n            this.$toolbar.append(html.join(''));\n            $search = this.$toolbar.find('.search input');\n            $search.off('keyup drop blur').on('keyup drop blur', function (event) {\n                if (that.options.searchOnEnterKey && event.keyCode !== 13) {\n                    return;\n                }\n\n                if ($.inArray(event.keyCode, [37, 38, 39, 40]) > -1) {\n                    return;\n                }\n\n                clearTimeout(timeoutId); // doesn't matter if it's 0\n                timeoutId = setTimeout(function () {\n                    that.onSearch(event);\n                }, that.options.searchTimeOut);\n            });\n\n            if (isIEBrowser()) {\n                $search.off('mouseup').on('mouseup', function (event) {\n                    clearTimeout(timeoutId); // doesn't matter if it's 0\n                    timeoutId = setTimeout(function () {\n                        that.onSearch(event);\n                    }, that.options.searchTimeOut);\n                });\n            }\n        }\n    };\n\n    BootstrapTable.prototype.onSearch = function (event) {\n        var text = $.trim($(event.currentTarget).val());\n\n        // trim search input\n        if (this.options.trimOnSearch && $(event.currentTarget).val() !== text) {\n            $(event.currentTarget).val(text);\n        }\n\n        if (text === this.searchText) {\n            return;\n        }\n        this.searchText = text;\n        this.options.searchText = text;\n\n        this.options.pageNumber = 1;\n        this.initSearch();\n        this.updatePagination();\n        this.trigger('search', text);\n    };\n\n    BootstrapTable.prototype.initSearch = function () {\n        var that = this;\n\n        if (this.options.sidePagination !== 'server') {\n            if (this.options.customSearch !== $.noop) {\n                this.options.customSearch.apply(this, [this.searchText]);\n                return;\n            }\n\n            var s = this.searchText && (this.options.escape ?\n                escapeHTML(this.searchText) : this.searchText).toLowerCase();\n            var f = $.isEmptyObject(this.filterColumns) ? null : this.filterColumns;\n\n            // Check filter\n            this.data = f ? $.grep(this.options.data, function (item, i) {\n                for (var key in f) {\n                    if ($.isArray(f[key]) && $.inArray(item[key], f[key]) === -1 ||\n                            !$.isArray(f[key]) && item[key] !== f[key]) {\n                        return false;\n                    }\n                }\n                return true;\n            }) : this.options.data;\n\n            this.data = s ? $.grep(this.data, function (item, i) {\n                for (var j = 0; j < that.header.fields.length; j++) {\n\n                    if (!that.header.searchables[j]) {\n                        continue;\n                    }\n\n                    var key = $.isNumeric(that.header.fields[j]) ? parseInt(that.header.fields[j], 10) : that.header.fields[j];\n                    var column = that.columns[getFieldIndex(that.columns, key)];\n                    var value;\n\n                    if (typeof key === 'string') {\n                        value = item;\n                        var props = key.split('.');\n                        for (var prop_index = 0; prop_index < props.length; prop_index++) {\n                            value = value[props[prop_index]];\n                        }\n\n                        // Fix #142: respect searchForamtter boolean\n                        if (column && column.searchFormatter) {\n                            value = calculateObjectValue(column,\n                                that.header.formatters[j], [value, item, i], value);\n                        }\n                    } else {\n                        value = item[key];\n                    }\n\n                    if (typeof value === 'string' || typeof value === 'number') {\n                        if (that.options.strictSearch) {\n                            if ((value + '').toLowerCase() === s) {\n                                return true;\n                            }\n                        } else {\n                            if ((value + '').toLowerCase().indexOf(s) !== -1) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n                return false;\n            }) : this.data;\n        }\n    };\n\n    BootstrapTable.prototype.initPagination = function () {\n        if (!this.options.pagination) {\n            this.$pagination.hide();\n            return;\n        } else {\n            this.$pagination.show();\n        }\n\n        var that = this,\n            html = [],\n            $allSelected = false,\n            i, from, to,\n            $pageList,\n            $first, $pre,\n            $next, $last,\n            $number,\n            data = this.getData(),\n            pageList = this.options.pageList;\n\n        if (this.options.sidePagination !== 'server') {\n            this.options.totalRows = data.length;\n        }\n\n        this.totalPages = 0;\n        if (this.options.totalRows) {\n            if (this.options.pageSize === this.options.formatAllRows()) {\n                this.options.pageSize = this.options.totalRows;\n                $allSelected = true;\n            } else if (this.options.pageSize === this.options.totalRows) {\n                // Fix #667 Table with pagination,\n                // multiple pages and a search that matches to one page throws exception\n                var pageLst = typeof this.options.pageList === 'string' ?\n                    this.options.pageList.replace('[', '').replace(']', '')\n                        .replace(/ /g, '').toLowerCase().split(',') : this.options.pageList;\n                if ($.inArray(this.options.formatAllRows().toLowerCase(), pageLst)  > -1) {\n                    $allSelected = true;\n                }\n            }\n\n            this.totalPages = ~~((this.options.totalRows - 1) / this.options.pageSize) + 1;\n\n            this.options.totalPages = this.totalPages;\n        }\n        if (this.totalPages > 0 && this.options.pageNumber > this.totalPages) {\n            this.options.pageNumber = this.totalPages;\n        }\n\n        this.pageFrom = (this.options.pageNumber - 1) * this.options.pageSize + 1;\n        this.pageTo = this.options.pageNumber * this.options.pageSize;\n        if (this.pageTo > this.options.totalRows) {\n            this.pageTo = this.options.totalRows;\n        }\n\n        html.push(\n            '<div class=\"pull-' + this.options.paginationDetailHAlign + ' pagination-detail\">',\n            '<span class=\"pagination-info\">',\n            this.options.onlyInfoPagination ? this.options.formatDetailPagination(this.options.totalRows) :\n            this.options.formatShowingRows(this.pageFrom, this.pageTo, this.options.totalRows),\n            '</span>');\n\n        if (!this.options.onlyInfoPagination) {\n            html.push('<span class=\"page-list\">');\n\n            var pageNumber = [\n                    sprintf('<span class=\"btn-group %s\">',\n                        this.options.paginationVAlign === 'top' || this.options.paginationVAlign === 'both' ?\n                            'dropdown' : 'dropup'),\n                    '<button type=\"button\" class=\"btn' +\n                    sprintf(' btn-%s', this.options.buttonsClass) +\n                    sprintf(' btn-%s', this.options.iconSize) +\n                    ' dropdown-toggle\" data-toggle=\"dropdown\">',\n                    '<span class=\"page-size\">',\n                    $allSelected ? this.options.formatAllRows() : this.options.pageSize,\n                    '</span>',\n                    ' <span class=\"caret\"></span>',\n                    '</button>',\n                    '<ul class=\"dropdown-menu\" role=\"menu\">'\n                ];\n\n            if (typeof this.options.pageList === 'string') {\n                var list = this.options.pageList.replace('[', '').replace(']', '')\n                    .replace(/ /g, '').split(',');\n\n                pageList = [];\n                $.each(list, function (i, value) {\n                    pageList.push(value.toUpperCase() === that.options.formatAllRows().toUpperCase() ?\n                        that.options.formatAllRows() : +value);\n                });\n            }\n\n            $.each(pageList, function (i, page) {\n                if (!that.options.smartDisplay || i === 0 || pageList[i - 1] < that.options.totalRows) {\n                    var active;\n                    if ($allSelected) {\n                        active = page === that.options.formatAllRows() ? ' class=\"active\"' : '';\n                    } else {\n                        active = page === that.options.pageSize ? ' class=\"active\"' : '';\n                    }\n                    pageNumber.push(sprintf('<li role=\"menuitem\"%s><a href=\"#\">%s</a></li>', active, page));\n                }\n            });\n            pageNumber.push('</ul></span>');\n\n            html.push(this.options.formatRecordsPerPage(pageNumber.join('')));\n            html.push('</span>');\n\n            html.push('</div>',\n                '<div class=\"pull-' + this.options.paginationHAlign + ' pagination\">',\n                '<ul class=\"pagination' + sprintf(' pagination-%s', this.options.iconSize) + '\">',\n                '<li class=\"page-pre\"><a href=\"#\">' + this.options.paginationPreText + '</a></li>');\n\n            if (this.totalPages < 5) {\n                from = 1;\n                to = this.totalPages;\n            } else {\n                from = this.options.pageNumber - 2;\n                to = from + 4;\n                if (from < 1) {\n                    from = 1;\n                    to = 5;\n                }\n                if (to > this.totalPages) {\n                    to = this.totalPages;\n                    from = to - 4;\n                }\n            }\n\n            if (this.totalPages >= 6) {\n                if (this.options.pageNumber >= 3) {\n                    html.push('<li class=\"page-first' + (1 === this.options.pageNumber ? ' active' : '') + '\">',\n                        '<a href=\"#\">', 1, '</a>',\n                        '</li>');\n\n                    from++;\n                }\n\n                if (this.options.pageNumber >= 4) {\n                    if (this.options.pageNumber == 4 || this.totalPages == 6 || this.totalPages == 7) {\n                        from--;\n                    } else {\n                        html.push('<li class=\"page-first-separator disabled\">',\n                            '<a href=\"#\">...</a>',\n                            '</li>');\n                    }\n\n                    to--;\n                }\n            }\n\n            if (this.totalPages >= 7) {\n                if (this.options.pageNumber >= (this.totalPages - 2)) {\n                    from--;\n                }\n            }\n\n            if (this.totalPages == 6) {\n                if (this.options.pageNumber >= (this.totalPages - 2)) {\n                    to++;\n                }\n            } else if (this.totalPages >= 7) {\n                if (this.totalPages == 7 || this.options.pageNumber >= (this.totalPages - 3)) {\n                    to++;\n                }\n            }\n\n            for (i = from; i <= to; i++) {\n                html.push('<li class=\"page-number' + (i === this.options.pageNumber ? ' active' : '') + '\">',\n                    '<a href=\"#\">', i, '</a>',\n                    '</li>');\n            }\n\n            if (this.totalPages >= 8) {\n                if (this.options.pageNumber <= (this.totalPages - 4)) {\n                    html.push('<li class=\"page-last-separator disabled\">',\n                        '<a href=\"#\">...</a>',\n                        '</li>');\n                }\n            }\n\n            if (this.totalPages >= 6) {\n                if (this.options.pageNumber <= (this.totalPages - 3)) {\n                    html.push('<li class=\"page-last' + (this.totalPages === this.options.pageNumber ? ' active' : '') + '\">',\n                        '<a href=\"#\">', this.totalPages, '</a>',\n                        '</li>');\n                }\n            }\n\n            html.push(\n                '<li class=\"page-next\"><a href=\"#\">' + this.options.paginationNextText + '</a></li>',\n                '</ul>',\n                '</div>');\n        }\n        this.$pagination.html(html.join(''));\n\n        if (!this.options.onlyInfoPagination) {\n            $pageList = this.$pagination.find('.page-list a');\n            $first = this.$pagination.find('.page-first');\n            $pre = this.$pagination.find('.page-pre');\n            $next = this.$pagination.find('.page-next');\n            $last = this.$pagination.find('.page-last');\n            $number = this.$pagination.find('.page-number');\n\n            if (this.options.smartDisplay) {\n                if (this.totalPages <= 1) {\n                    this.$pagination.find('div.pagination').hide();\n                }\n                if (pageList.length < 2 || this.options.totalRows <= pageList[0]) {\n                    this.$pagination.find('span.page-list').hide();\n                }\n\n                // when data is empty, hide the pagination\n                this.$pagination[this.getData().length ? 'show' : 'hide']();\n            }\n\n            if (!this.options.paginationLoop) {\n                if (this.options.pageNumber === 1) {\n                    $pre.addClass('disabled');\n                }\n                if (this.options.pageNumber === this.totalPages) {\n                    $next.addClass('disabled');\n                }\n            }\n\n            if ($allSelected) {\n                this.options.pageSize = this.options.formatAllRows();\n            }\n            $pageList.off('click').on('click', $.proxy(this.onPageListChange, this));\n            $first.off('click').on('click', $.proxy(this.onPageFirst, this));\n            $pre.off('click').on('click', $.proxy(this.onPagePre, this));\n            $next.off('click').on('click', $.proxy(this.onPageNext, this));\n            $last.off('click').on('click', $.proxy(this.onPageLast, this));\n            $number.off('click').on('click', $.proxy(this.onPageNumber, this));\n        }\n    };\n\n    BootstrapTable.prototype.updatePagination = function (event) {\n        // Fix #171: IE disabled button can be clicked bug.\n        if (event && $(event.currentTarget).hasClass('disabled')) {\n            return;\n        }\n\n        if (!this.options.maintainSelected) {\n            this.resetRows();\n        }\n\n        this.initPagination();\n        if (this.options.sidePagination === 'server') {\n            this.initServer();\n        } else {\n            this.initBody();\n        }\n\n        this.trigger('page-change', this.options.pageNumber, this.options.pageSize);\n    };\n\n    BootstrapTable.prototype.onPageListChange = function (event) {\n        var $this = $(event.currentTarget);\n\n        $this.parent().addClass('active').siblings().removeClass('active');\n        this.options.pageSize = $this.text().toUpperCase() === this.options.formatAllRows().toUpperCase() ?\n            this.options.formatAllRows() : +$this.text();\n        this.$toolbar.find('.page-size').text(this.options.pageSize);\n\n        this.updatePagination(event);\n        return false;\n    };\n\n    BootstrapTable.prototype.onPageFirst = function (event) {\n        this.options.pageNumber = 1;\n        this.updatePagination(event);\n        return false;\n    };\n\n    BootstrapTable.prototype.onPagePre = function (event) {\n        if ((this.options.pageNumber - 1) === 0) {\n            this.options.pageNumber = this.options.totalPages;\n        } else {\n            this.options.pageNumber--;\n        }\n        this.updatePagination(event);\n        return false;\n    };\n\n    BootstrapTable.prototype.onPageNext = function (event) {\n        if ((this.options.pageNumber + 1) > this.options.totalPages) {\n            this.options.pageNumber = 1;\n        } else {\n            this.options.pageNumber++;\n        }\n        this.updatePagination(event);\n        return false;\n    };\n\n    BootstrapTable.prototype.onPageLast = function (event) {\n        this.options.pageNumber = this.totalPages;\n        this.updatePagination(event);\n        return false;\n    };\n\n    BootstrapTable.prototype.onPageNumber = function (event) {\n        if (this.options.pageNumber === +$(event.currentTarget).text()) {\n            return;\n        }\n        this.options.pageNumber = +$(event.currentTarget).text();\n        this.updatePagination(event);\n        return false;\n    };\n\n    BootstrapTable.prototype.initRow = function(item, i, data, parentDom) {\n        var that=this,\n            key,\n            html = [],\n            style = {},\n            csses = [],\n            data_ = '',\n            attributes = {},\n            htmlAttributes = [];\n\n        if ($.inArray(item, this.hiddenRows) > -1) {\n            return;\n        }\n\n        style = calculateObjectValue(this.options, this.options.rowStyle, [item, i], style);\n\n        if (style && style.css) {\n            for (key in style.css) {\n                csses.push(key + ': ' + style.css[key]);\n            }\n        }\n\n        attributes = calculateObjectValue(this.options,\n            this.options.rowAttributes, [item, i], attributes);\n\n        if (attributes) {\n            for (key in attributes) {\n                htmlAttributes.push(sprintf('%s=\"%s\"', key, escapeHTML(attributes[key])));\n            }\n        }\n\n        if (item._data && !$.isEmptyObject(item._data)) {\n            $.each(item._data, function(k, v) {\n                // ignore data-index\n                if (k === 'index') {\n                    return;\n                }\n                data_ += sprintf(' data-%s=\"%s\"', k, v);\n            });\n        }\n\n        html.push('<tr',\n            sprintf(' %s', htmlAttributes.join(' ')),\n            sprintf(' id=\"%s\"', $.isArray(item) ? undefined : item._id),\n            sprintf(' class=\"%s\"', style.classes || ($.isArray(item) ? undefined : item._class)),\n            sprintf(' data-index=\"%s\"', i),\n            sprintf(' data-uniqueid=\"%s\"', item[this.options.uniqueId]),\n            sprintf('%s', data_),\n            '>'\n        );\n\n        if (this.options.cardView) {\n            html.push(sprintf('<td colspan=\"%s\"><div class=\"card-views\">', this.header.fields.length));\n        }\n\n        if (!this.options.cardView && this.options.detailView) {\n            html.push('<td>',\n                '<a class=\"detail-icon\" href=\"#\">',\n                sprintf('<i class=\"%s %s\"></i>', this.options.iconsPrefix, this.options.icons.detailOpen),\n                '</a>',\n                '</td>');\n        }\n\n        $.each(this.header.fields, function(j, field) {\n            var text = '',\n                value_ = getItemField(item, field, that.options.escape),\n                value = '',\n                type = '',\n                cellStyle = {},\n                id_ = '',\n                class_ = that.header.classes[j],\n                data_ = '',\n                rowspan_ = '',\n                colspan_ = '',\n                title_ = '',\n                column = that.columns[j];\n\n            if (that.fromHtml && typeof value_ === 'undefined') {\n                return;\n            }\n\n            if (!column.visible) {\n                return;\n            }\n\n            if (that.options.cardView && (!column.cardVisible)) {\n                return;\n            }\n\n            if (column.escape) {\n                value_ = escapeHTML(value_);\n            }\n\n            style = sprintf('style=\"%s\"', csses.concat(that.header.styles[j]).join('; '));\n\n            // handle td's id and class\n            if (item['_' + field + '_id']) {\n                id_ = sprintf(' id=\"%s\"', item['_' + field + '_id']);\n            }\n            if (item['_' + field + '_class']) {\n                class_ = sprintf(' class=\"%s\"', item['_' + field + '_class']);\n            }\n            if (item['_' + field + '_rowspan']) {\n                rowspan_ = sprintf(' rowspan=\"%s\"', item['_' + field + '_rowspan']);\n            }\n            if (item['_' + field + '_colspan']) {\n                colspan_ = sprintf(' colspan=\"%s\"', item['_' + field + '_colspan']);\n            }\n            if (item['_' + field + '_title']) {\n                title_ = sprintf(' title=\"%s\"', item['_' + field + '_title']);\n            }\n            cellStyle = calculateObjectValue(that.header,\n                that.header.cellStyles[j], [value_, item, i, field], cellStyle);\n            if (cellStyle.classes) {\n                class_ = sprintf(' class=\"%s\"', cellStyle.classes);\n            }\n            if (cellStyle.css) {\n                var csses_ = [];\n                for (var key in cellStyle.css) {\n                    csses_.push(key + ': ' + cellStyle.css[key]);\n                }\n                style = sprintf('style=\"%s\"', csses_.concat(that.header.styles[j]).join('; '));\n            }\n\n            value = calculateObjectValue(column,\n                that.header.formatters[j], [value_, item, i], value_);\n\n            if (item['_' + field + '_data'] && !$.isEmptyObject(item['_' + field + '_data'])) {\n                $.each(item['_' + field + '_data'], function(k, v) {\n                    // ignore data-index\n                    if (k === 'index') {\n                        return;\n                    }\n                    data_ += sprintf(' data-%s=\"%s\"', k, v);\n                });\n            }\n\n            if (column.checkbox || column.radio) {\n                type = column.checkbox ? 'checkbox' : type;\n                type = column.radio ? 'radio' : type;\n\n                text = [sprintf(that.options.cardView ?\n                        '<div class=\"card-view %s\">' : '<td class=\"bs-checkbox %s\">', column['class'] || ''),\n                    '<input' +\n                    sprintf(' data-index=\"%s\"', i) +\n                    sprintf(' name=\"%s\"', that.options.selectItemName) +\n                    sprintf(' type=\"%s\"', type) +\n                    sprintf(' value=\"%s\"', item[that.options.idField]) +\n                    sprintf(' checked=\"%s\"', value === true ||\n                        (value_ || value && value.checked) ? 'checked' : undefined) +\n                    sprintf(' disabled=\"%s\"', !column.checkboxEnabled ||\n                        (value && value.disabled) ? 'disabled' : undefined) +\n                    ' />',\n                    that.header.formatters[j] && typeof value === 'string' ? value : '',\n                    that.options.cardView ? '</div>' : '</td>'\n                ].join('');\n\n                item[that.header.stateField] = value === true || (value && value.checked);\n            } else {\n                value = typeof value === 'undefined' || value === null ?\n                    that.options.undefinedText : value;\n\n                text = that.options.cardView ? ['<div class=\"card-view\">',\n                    that.options.showHeader ? sprintf('<span class=\"title\" %s>%s</span>', style,\n                        getPropertyFromOther(that.columns, 'field', 'title', field)) : '',\n                    sprintf('<span class=\"value\">%s</span>', value),\n                    '</div>'\n                ].join('') : [sprintf('<td%s %s %s %s %s %s %s>',\n                        id_, class_, style, data_, rowspan_, colspan_, title_),\n                    value,\n                    '</td>'\n                ].join('');\n\n                // Hide empty data on Card view when smartDisplay is set to true.\n                if (that.options.cardView && that.options.smartDisplay && value === '') {\n                    // Should set a placeholder for event binding correct fieldIndex\n                    text = '<div class=\"card-view\"></div>';\n                }\n            }\n\n            html.push(text);\n        });\n\n        if (this.options.cardView) {\n            html.push('</div></td>');\n        }\n        html.push('</tr>');\n\n        return html.join(' ');\n    };\n\n    BootstrapTable.prototype.initBody = function (fixedScroll) {\n        var that = this,\n            html = [],\n            data = this.getData();\n\n        this.trigger('pre-body', data);\n\n        this.$body = this.$el.find('>tbody');\n        if (!this.$body.length) {\n            this.$body = $('<tbody></tbody>').appendTo(this.$el);\n        }\n\n        //Fix #389 Bootstrap-table-flatJSON is not working\n\n        if (!this.options.pagination || this.options.sidePagination === 'server') {\n            this.pageFrom = 1;\n            this.pageTo = data.length;\n        }\n\n        var trFragments = $(document.createDocumentFragment());\n        var hasTr;\n\n        for (var i = this.pageFrom - 1; i < this.pageTo; i++) {\n            var item = data[i];\n            var tr = this.initRow(item, i, data, trFragments);\n            hasTr = hasTr || !!tr;\n            if (tr&&tr!==true) {\n                trFragments.append(tr);\n            }\n        }\n\n        // show no records\n        if (!hasTr) {\n            trFragments.append('<tr class=\"no-records-found\">' +\n                sprintf('<td colspan=\"%s\">%s</td>',\n                this.$header.find('th').length,\n                this.options.formatNoMatches()) +\n                '</tr>');\n        }\n\n        this.$body.html(trFragments);\n\n        if (!fixedScroll) {\n            this.scrollTo(0);\n        }\n\n        // click to select by column\n        this.$body.find('> tr[data-index] > td').off('click dblclick').on('click dblclick', function (e) {\n            var $td = $(this),\n                $tr = $td.parent(),\n                item = that.data[$tr.data('index')],\n                index = $td[0].cellIndex,\n                fields = that.getVisibleFields(),\n                field = fields[that.options.detailView && !that.options.cardView ? index - 1 : index],\n                column = that.columns[getFieldIndex(that.columns, field)],\n                value = getItemField(item, field, that.options.escape);\n\n            if ($td.find('.detail-icon').length) {\n                return;\n            }\n\n            that.trigger(e.type === 'click' ? 'click-cell' : 'dbl-click-cell', field, value, item, $td);\n            that.trigger(e.type === 'click' ? 'click-row' : 'dbl-click-row', item, $tr, field);\n\n            // if click to select - then trigger the checkbox/radio click\n            if (e.type === 'click' && that.options.clickToSelect && column.clickToSelect) {\n                var $selectItem = $tr.find(sprintf('[name=\"%s\"]', that.options.selectItemName));\n                if ($selectItem.length) {\n                    $selectItem[0].click(); // #144: .trigger('click') bug\n                }\n            }\n        });\n\n        this.$body.find('> tr[data-index] > td > .detail-icon').off('click').on('click', function () {\n            var $this = $(this),\n                $tr = $this.parent().parent(),\n                index = $tr.data('index'),\n                row = data[index]; // Fix #980 Detail view, when searching, returns wrong row\n\n            // remove and update\n            if ($tr.next().is('tr.detail-view')) {\n                $this.find('i').attr('class', sprintf('%s %s', that.options.iconsPrefix, that.options.icons.detailOpen));\n                that.trigger('collapse-row', index, row);\n                $tr.next().remove();\n            } else {\n                $this.find('i').attr('class', sprintf('%s %s', that.options.iconsPrefix, that.options.icons.detailClose));\n                $tr.after(sprintf('<tr class=\"detail-view\"><td colspan=\"%s\"></td></tr>', $tr.find('td').length));\n                var $element = $tr.next().find('td');\n                var content = calculateObjectValue(that.options, that.options.detailFormatter, [index, row, $element], '');\n                if($element.length === 1) {\n                    $element.append(content);\n                }\n                that.trigger('expand-row', index, row, $element);\n            }\n            that.resetView();\n            return false;\n        });\n\n        this.$selectItem = this.$body.find(sprintf('[name=\"%s\"]', this.options.selectItemName));\n        this.$selectItem.off('click').on('click', function (event) {\n            event.stopImmediatePropagation();\n\n            var $this = $(this),\n                checked = $this.prop('checked'),\n                row = that.data[$this.data('index')];\n\n            if (that.options.maintainSelected && $(this).is(':radio')) {\n                $.each(that.options.data, function (i, row) {\n                    row[that.header.stateField] = false;\n                });\n            }\n\n            row[that.header.stateField] = checked;\n\n            if (that.options.singleSelect) {\n                that.$selectItem.not(this).each(function () {\n                    that.data[$(this).data('index')][that.header.stateField] = false;\n                });\n                that.$selectItem.filter(':checked').not(this).prop('checked', false);\n            }\n\n            that.updateSelected();\n            that.trigger(checked ? 'check' : 'uncheck', row, $this);\n        });\n\n        $.each(this.header.events, function (i, events) {\n            if (!events) {\n                return;\n            }\n            // fix bug, if events is defined with namespace\n            if (typeof events === 'string') {\n                events = calculateObjectValue(null, events);\n            }\n\n            var field = that.header.fields[i],\n                fieldIndex = $.inArray(field, that.getVisibleFields());\n\n            if (that.options.detailView && !that.options.cardView) {\n                fieldIndex += 1;\n            }\n\n            for (var key in events) {\n                that.$body.find('>tr:not(.no-records-found)').each(function () {\n                    var $tr = $(this),\n                        $td = $tr.find(that.options.cardView ? '.card-view' : 'td').eq(fieldIndex),\n                        index = key.indexOf(' '),\n                        name = key.substring(0, index),\n                        el = key.substring(index + 1),\n                        func = events[key];\n\n                    $td.find(el).off(name).on(name, function (e) {\n                        var index = $tr.data('index'),\n                            row = that.data[index],\n                            value = row[field];\n\n                        func.apply(this, [e, value, row, index]);\n                    });\n                });\n            }\n        });\n\n        this.updateSelected();\n        this.resetView();\n\n        this.trigger('post-body', data);\n    };\n\n    BootstrapTable.prototype.initServer = function (silent, query, url) {\n        var that = this,\n            data = {},\n            params = {\n                searchText: this.searchText,\n                sortName: this.options.sortName,\n                sortOrder: this.options.sortOrder\n            },\n            request;\n\n        if (this.options.pagination) {\n            params.pageSize = this.options.pageSize === this.options.formatAllRows() ?\n                this.options.totalRows : this.options.pageSize;\n            params.pageNumber = this.options.pageNumber;\n        }\n\n        if (!(url || this.options.url) && !this.options.ajax) {\n            return;\n        }\n\n        if (this.options.queryParamsType === 'limit') {\n            params = {\n                search: params.searchText,\n                sort: params.sortName,\n                order: params.sortOrder\n            };\n\n            if (this.options.pagination) {\n                params.offset = this.options.pageSize === this.options.formatAllRows() ?\n                    0 : this.options.pageSize * (this.options.pageNumber - 1);\n                params.limit = this.options.pageSize === this.options.formatAllRows() ?\n                    this.options.totalRows : this.options.pageSize;\n            }\n        }\n\n        if (!($.isEmptyObject(this.filterColumnsPartial))) {\n            params.filter = JSON.stringify(this.filterColumnsPartial, null);\n        }\n\n        data = calculateObjectValue(this.options, this.options.queryParams, [params], data);\n\n        $.extend(data, query || {});\n\n        // false to stop request\n        if (data === false) {\n            return;\n        }\n\n        if (!silent) {\n            this.$tableLoading.show();\n        }\n        request = $.extend({}, calculateObjectValue(null, this.options.ajaxOptions), {\n            type: this.options.method,\n            url:  url || this.options.url,\n            data: this.options.contentType === 'application/json' && this.options.method === 'post' ?\n                JSON.stringify(data) : data,\n            cache: this.options.cache,\n            contentType: this.options.contentType,\n            dataType: this.options.dataType,\n            success: function (res) {\n                res = calculateObjectValue(that.options, that.options.responseHandler, [res], res);\n\n                that.load(res);\n                that.trigger('load-success', res);\n                if (!silent) that.$tableLoading.hide();\n            },\n            error: function (res) {\n                that.trigger('load-error', res.status, res);\n                if (!silent) that.$tableLoading.hide();\n            }\n        });\n\n        if (this.options.ajax) {\n            calculateObjectValue(this, this.options.ajax, [request], null);\n        } else {\n            if (this._xhr && this._xhr.readyState !== 4) {\n                this._xhr.abort();\n            }\n            this._xhr = $.ajax(request);\n        }\n    };\n\n    BootstrapTable.prototype.initSearchText = function () {\n        if (this.options.search) {\n            if (this.options.searchText !== '') {\n                var $search = this.$toolbar.find('.search input');\n                $search.val(this.options.searchText);\n                this.onSearch({currentTarget: $search});\n            }\n        }\n    };\n\n    BootstrapTable.prototype.getCaret = function () {\n        var that = this;\n\n        $.each(this.$header.find('th'), function (i, th) {\n            $(th).find('.sortable').removeClass('desc asc').addClass($(th).data('field') === that.options.sortName ? that.options.sortOrder : 'both');\n        });\n    };\n\n    BootstrapTable.prototype.updateSelected = function () {\n        var checkAll = this.$selectItem.filter(':enabled').length &&\n            this.$selectItem.filter(':enabled').length ===\n            this.$selectItem.filter(':enabled').filter(':checked').length;\n\n        this.$selectAll.add(this.$selectAll_).prop('checked', checkAll);\n\n        this.$selectItem.each(function () {\n            $(this).closest('tr')[$(this).prop('checked') ? 'addClass' : 'removeClass']('selected');\n        });\n    };\n\n    BootstrapTable.prototype.updateRows = function () {\n        var that = this;\n\n        this.$selectItem.each(function () {\n            that.data[$(this).data('index')][that.header.stateField] = $(this).prop('checked');\n        });\n    };\n\n    BootstrapTable.prototype.resetRows = function () {\n        var that = this;\n\n        $.each(this.data, function (i, row) {\n            that.$selectAll.prop('checked', false);\n            that.$selectItem.prop('checked', false);\n            if (that.header.stateField) {\n                row[that.header.stateField] = false;\n            }\n        });\n        this.initHiddenRows();\n    };\n\n    BootstrapTable.prototype.trigger = function (name) {\n        var args = Array.prototype.slice.call(arguments, 1);\n\n        name += '.bs.table';\n        this.options[BootstrapTable.EVENTS[name]].apply(this.options, args);\n        this.$el.trigger($.Event(name), args);\n\n        this.options.onAll(name, args);\n        this.$el.trigger($.Event('all.bs.table'), [name, args]);\n    };\n\n    BootstrapTable.prototype.resetHeader = function () {\n        // fix #61: the hidden table reset header bug.\n        // fix bug: get $el.css('width') error sometime (height = 500)\n        clearTimeout(this.timeoutId_);\n        this.timeoutId_ = setTimeout($.proxy(this.fitHeader, this), this.$el.is(':hidden') ? 100 : 0);\n    };\n\n    BootstrapTable.prototype.fitHeader = function () {\n        var that = this,\n            fixedBody,\n            scrollWidth,\n            focused,\n            focusedTemp;\n\n        if (that.$el.is(':hidden')) {\n            that.timeoutId_ = setTimeout($.proxy(that.fitHeader, that), 100);\n            return;\n        }\n        fixedBody = this.$tableBody.get(0);\n\n        scrollWidth = fixedBody.scrollWidth > fixedBody.clientWidth &&\n        fixedBody.scrollHeight > fixedBody.clientHeight + this.$header.outerHeight() ?\n            getScrollBarWidth() : 0;\n\n        this.$el.css('margin-top', -this.$header.outerHeight());\n\n        focused = $(':focus');\n        if (focused.length > 0) {\n            var $th = focused.parents('th');\n            if ($th.length > 0) {\n                var dataField = $th.attr('data-field');\n                if (dataField !== undefined) {\n                    var $headerTh = this.$header.find(\"[data-field='\" + dataField + \"']\");\n                    if ($headerTh.length > 0) {\n                        $headerTh.find(\":input\").addClass(\"focus-temp\");\n                    }\n                }\n            }\n        }\n\n        this.$header_ = this.$header.clone(true, true);\n        this.$selectAll_ = this.$header_.find('[name=\"btSelectAll\"]');\n        this.$tableHeader.css({\n            'margin-right': scrollWidth\n        }).find('table').css('width', this.$el.outerWidth())\n            .html('').attr('class', this.$el.attr('class'))\n            .append(this.$header_);\n\n\n        focusedTemp = $('.focus-temp:visible:eq(0)');\n        if (focusedTemp.length > 0) {\n            focusedTemp.focus();\n            this.$header.find('.focus-temp').removeClass('focus-temp');\n        }\n\n        // fix bug: $.data() is not working as expected after $.append()\n        this.$header.find('th[data-field]').each(function (i) {\n            that.$header_.find(sprintf('th[data-field=\"%s\"]', $(this).data('field'))).data($(this).data());\n        });\n\n        var visibleFields = this.getVisibleFields(),\n            $ths = this.$header_.find('th');\n\n        this.$body.find('>tr:first-child:not(.no-records-found) > *').each(function (i) {\n            var $this = $(this),\n                index = i;\n\n            if (that.options.detailView && !that.options.cardView) {\n                if (i === 0) {\n                    that.$header_.find('th.detail').find('.fht-cell').width($this.innerWidth());\n                }\n                index = i - 1;\n            }\n\n            var $th = that.$header_.find(sprintf('th[data-field=\"%s\"]', visibleFields[index]));\n            if ($th.length > 1) {\n                $th = $($ths[$this[0].cellIndex]);\n            }\n\n            $th.find('.fht-cell').width($this.innerWidth());\n        });\n        // horizontal scroll event\n        // TODO: it's probably better improving the layout than binding to scroll event\n        this.$tableBody.off('scroll').on('scroll', function () {\n            that.$tableHeader.scrollLeft($(this).scrollLeft());\n\n            if (that.options.showFooter && !that.options.cardView) {\n                that.$tableFooter.scrollLeft($(this).scrollLeft());\n            }\n        });\n        that.trigger('post-header');\n    };\n\n    BootstrapTable.prototype.resetFooter = function () {\n        var that = this,\n            data = that.getData(),\n            html = [];\n\n        if (!this.options.showFooter || this.options.cardView) { //do nothing\n            return;\n        }\n\n        if (!this.options.cardView && this.options.detailView) {\n            html.push('<td><div class=\"th-inner\">&nbsp;</div><div class=\"fht-cell\"></div></td>');\n        }\n\n        $.each(this.columns, function (i, column) {\n            var key,\n                falign = '', // footer align style\n                valign = '',\n                csses = [],\n                style = {},\n                class_ = sprintf(' class=\"%s\"', column['class']);\n\n            if (!column.visible) {\n                return;\n            }\n\n            if (that.options.cardView && (!column.cardVisible)) {\n                return;\n            }\n\n            falign = sprintf('text-align: %s; ', column.falign ? column.falign : column.align);\n            valign = sprintf('vertical-align: %s; ', column.valign);\n\n            style = calculateObjectValue(null, that.options.footerStyle);\n\n            if (style && style.css) {\n                for (key in style.css) {\n                    csses.push(key + ': ' + style.css[key]);\n                }\n            }\n\n            html.push('<td', class_, sprintf(' style=\"%s\"', falign + valign + csses.concat().join('; ')), '>');\n            html.push('<div class=\"th-inner\">');\n\n            html.push(calculateObjectValue(column, column.footerFormatter, [data], '&nbsp;') || '&nbsp;');\n\n            html.push('</div>');\n            html.push('<div class=\"fht-cell\"></div>');\n            html.push('</div>');\n            html.push('</td>');\n        });\n\n        this.$tableFooter.find('tr').html(html.join(''));\n        this.$tableFooter.show();\n        clearTimeout(this.timeoutFooter_);\n        this.timeoutFooter_ = setTimeout($.proxy(this.fitFooter, this),\n            this.$el.is(':hidden') ? 100 : 0);\n    };\n\n    BootstrapTable.prototype.fitFooter = function () {\n        var that = this,\n            $footerTd,\n            elWidth,\n            scrollWidth;\n\n        clearTimeout(this.timeoutFooter_);\n        if (this.$el.is(':hidden')) {\n            this.timeoutFooter_ = setTimeout($.proxy(this.fitFooter, this), 100);\n            return;\n        }\n\n        elWidth = this.$el.css('width');\n        scrollWidth = elWidth > this.$tableBody.width() ? getScrollBarWidth() : 0;\n\n        this.$tableFooter.css({\n            'margin-right': scrollWidth\n        }).find('table').css('width', elWidth)\n            .attr('class', this.$el.attr('class'));\n\n        $footerTd = this.$tableFooter.find('td');\n\n        this.$body.find('>tr:first-child:not(.no-records-found) > *').each(function (i) {\n            var $this = $(this);\n\n            $footerTd.eq(i).find('.fht-cell').width($this.innerWidth());\n        });\n    };\n\n    BootstrapTable.prototype.toggleColumn = function (index, checked, needUpdate) {\n        if (index === -1) {\n            return;\n        }\n        this.columns[index].visible = checked;\n        this.initHeader();\n        this.initSearch();\n        this.initPagination();\n        this.initBody();\n\n        if (this.options.showColumns) {\n            var $items = this.$toolbar.find('.keep-open input').prop('disabled', false);\n\n            if (needUpdate) {\n                $items.filter(sprintf('[value=\"%s\"]', index)).prop('checked', checked);\n            }\n\n            if ($items.filter(':checked').length <= this.options.minimumCountColumns) {\n                $items.filter(':checked').prop('disabled', true);\n            }\n        }\n    };\n\n    BootstrapTable.prototype.getVisibleFields = function () {\n        var that = this,\n            visibleFields = [];\n\n        $.each(this.header.fields, function (j, field) {\n            var column = that.columns[getFieldIndex(that.columns, field)];\n\n            if (!column.visible) {\n                return;\n            }\n            visibleFields.push(field);\n        });\n        return visibleFields;\n    };\n\n    // PUBLIC FUNCTION DEFINITION\n    // =======================\n\n    BootstrapTable.prototype.resetView = function (params) {\n        var padding = 0;\n\n        if (params && params.height) {\n            this.options.height = params.height;\n        }\n\n        this.$selectAll.prop('checked', this.$selectItem.length > 0 &&\n            this.$selectItem.length === this.$selectItem.filter(':checked').length);\n\n        if (this.options.height) {\n            var toolbarHeight = this.$toolbar.outerHeight(true),\n                paginationHeight = this.$pagination.outerHeight(true),\n                height = this.options.height - toolbarHeight - paginationHeight;\n\n            this.$tableContainer.css('height', height + 'px');\n        }\n\n        if (this.options.cardView) {\n            // remove the element css\n            this.$el.css('margin-top', '0');\n            this.$tableContainer.css('padding-bottom', '0');\n            this.$tableFooter.hide();\n            return;\n        }\n\n        if (this.options.showHeader && this.options.height) {\n            this.$tableHeader.show();\n            this.resetHeader();\n            padding += this.$header.outerHeight();\n        } else {\n            this.$tableHeader.hide();\n            this.trigger('post-header');\n        }\n\n        if (this.options.showFooter) {\n            this.resetFooter();\n            if (this.options.height) {\n                padding += this.$tableFooter.outerHeight() + 1;\n            }\n        }\n\n        // Assign the correct sortable arrow\n        this.getCaret();\n        this.$tableContainer.css('padding-bottom', padding + 'px');\n        this.trigger('reset-view');\n    };\n\n    BootstrapTable.prototype.getData = function (useCurrentPage) {\n        return (this.searchText || !$.isEmptyObject(this.filterColumns) || !$.isEmptyObject(this.filterColumnsPartial)) ?\n            (useCurrentPage ? this.data.slice(this.pageFrom - 1, this.pageTo) : this.data) :\n            (useCurrentPage ? this.options.data.slice(this.pageFrom - 1, this.pageTo) : this.options.data);\n    };\n\n    BootstrapTable.prototype.load = function (data) {\n        var fixedScroll = false;\n\n        // #431: support pagination\n        if (this.options.sidePagination === 'server') {\n            this.options.totalRows = data[this.options.totalField];\n            fixedScroll = data.fixedScroll;\n            data = data[this.options.dataField];\n        } else if (!$.isArray(data)) { // support fixedScroll\n            fixedScroll = data.fixedScroll;\n            data = data.data;\n        }\n\n        this.initData(data);\n        this.initSearch();\n        this.initPagination();\n        this.initBody(fixedScroll);\n    };\n\n    BootstrapTable.prototype.append = function (data) {\n        this.initData(data, 'append');\n        this.initSearch();\n        this.initPagination();\n        this.initSort();\n        this.initBody(true);\n    };\n\n    BootstrapTable.prototype.prepend = function (data) {\n        this.initData(data, 'prepend');\n        this.initSearch();\n        this.initPagination();\n        this.initSort();\n        this.initBody(true);\n    };\n\n    BootstrapTable.prototype.remove = function (params) {\n        var len = this.options.data.length,\n            i, row;\n\n        if (!params.hasOwnProperty('field') || !params.hasOwnProperty('values')) {\n            return;\n        }\n\n        for (i = len - 1; i >= 0; i--) {\n            row = this.options.data[i];\n\n            if (!row.hasOwnProperty(params.field)) {\n                continue;\n            }\n            if ($.inArray(row[params.field], params.values) !== -1) {\n                this.options.data.splice(i, 1);\n                if (this.options.sidePagination === 'server') {\n                    this.options.totalRows -= 1;\n                }\n            }\n        }\n\n        if (len === this.options.data.length) {\n            return;\n        }\n\n        this.initSearch();\n        this.initPagination();\n        this.initSort();\n        this.initBody(true);\n    };\n\n    BootstrapTable.prototype.removeAll = function () {\n        if (this.options.data.length > 0) {\n            this.options.data.splice(0, this.options.data.length);\n            this.initSearch();\n            this.initPagination();\n            this.initBody(true);\n        }\n    };\n\n    BootstrapTable.prototype.getRowByUniqueId = function (id) {\n        var uniqueId = this.options.uniqueId,\n            len = this.options.data.length,\n            dataRow = null,\n            i, row, rowUniqueId;\n\n        for (i = len - 1; i >= 0; i--) {\n            row = this.options.data[i];\n\n            if (row.hasOwnProperty(uniqueId)) { // uniqueId is a column\n                rowUniqueId = row[uniqueId];\n            } else if(row._data.hasOwnProperty(uniqueId)) { // uniqueId is a row data property\n                rowUniqueId = row._data[uniqueId];\n            } else {\n                continue;\n            }\n\n            if (typeof rowUniqueId === 'string') {\n                id = id.toString();\n            } else if (typeof rowUniqueId === 'number') {\n                if ((Number(rowUniqueId) === rowUniqueId) && (rowUniqueId % 1 === 0)) {\n                    id = parseInt(id);\n                } else if ((rowUniqueId === Number(rowUniqueId)) && (rowUniqueId !== 0)) {\n                    id = parseFloat(id);\n                }\n            }\n\n            if (rowUniqueId === id) {\n                dataRow = row;\n                break;\n            }\n        }\n\n        return dataRow;\n    };\n\n    BootstrapTable.prototype.removeByUniqueId = function (id) {\n        var len = this.options.data.length,\n            row = this.getRowByUniqueId(id);\n\n        if (row) {\n            this.options.data.splice(this.options.data.indexOf(row), 1);\n        }\n\n        if (len === this.options.data.length) {\n            return;\n        }\n\n        this.initSearch();\n        this.initPagination();\n        this.initBody(true);\n    };\n\n    BootstrapTable.prototype.updateByUniqueId = function (params) {\n        var that = this;\n        var allParams = $.isArray(params) ? params : [ params ];\n\n        $.each(allParams, function(i, params) {\n            var rowId;\n\n            if (!params.hasOwnProperty('id') || !params.hasOwnProperty('row')) {\n                return;\n            }\n\n            rowId = $.inArray(that.getRowByUniqueId(params.id), that.options.data);\n\n            if (rowId === -1) {\n                return;\n            }\n            $.extend(that.options.data[rowId], params.row);\n        });\n\n        this.initSearch();\n        this.initPagination();\n        this.initSort();\n        this.initBody(true);\n    };\n\n    BootstrapTable.prototype.insertRow = function (params) {\n        if (!params.hasOwnProperty('index') || !params.hasOwnProperty('row')) {\n            return;\n        }\n        this.data.splice(params.index, 0, params.row);\n        this.initSearch();\n        this.initPagination();\n        this.initSort();\n        this.initBody(true);\n    };\n\n    BootstrapTable.prototype.updateRow = function (params) {\n        var that = this;\n        var allParams = $.isArray(params) ? params : [ params ];\n\n        $.each(allParams, function(i, params) {\n            if (!params.hasOwnProperty('index') || !params.hasOwnProperty('row')) {\n                return;\n            }\n            $.extend(that.options.data[params.index], params.row);\n        });\n\n        this.initSearch();\n        this.initPagination();\n        this.initSort();\n        this.initBody(true);\n    };\n\n    BootstrapTable.prototype.initHiddenRows = function () {\n        this.hiddenRows = [];\n    };\n\n    BootstrapTable.prototype.showRow = function (params) {\n        this.toggleRow(params, true);\n    };\n\n    BootstrapTable.prototype.hideRow = function (params) {\n        this.toggleRow(params, false);\n    };\n\n    BootstrapTable.prototype.toggleRow = function (params, visible) {\n        var row, index;\n\n        if (params.hasOwnProperty('index')) {\n            row = this.getData()[params.index];\n        } else if (params.hasOwnProperty('uniqueId')) {\n            row = this.getRowByUniqueId(params.uniqueId);\n        }\n\n        if (!row) {\n            return;\n        }\n\n        index = $.inArray(row, this.hiddenRows);\n\n        if (!visible && index === -1) {\n            this.hiddenRows.push(row);\n        } else if (visible && index > -1) {\n            this.hiddenRows.splice(index, 1);\n        }\n        this.initBody(true);\n    };\n\n    BootstrapTable.prototype.getHiddenRows = function (show) {\n        var that = this,\n            data = this.getData(),\n            rows = [];\n\n        $.each(data, function (i, row) {\n            if ($.inArray(row, that.hiddenRows) > -1) {\n                rows.push(row);\n            }\n        });\n        this.hiddenRows = rows;\n        return rows;\n    };\n\n    BootstrapTable.prototype.mergeCells = function (options) {\n        var row = options.index,\n            col = $.inArray(options.field, this.getVisibleFields()),\n            rowspan = options.rowspan || 1,\n            colspan = options.colspan || 1,\n            i, j,\n            $tr = this.$body.find('>tr'),\n            $td;\n\n        if (this.options.detailView && !this.options.cardView) {\n            col += 1;\n        }\n\n        $td = $tr.eq(row).find('>td').eq(col);\n\n        if (row < 0 || col < 0 || row >= this.data.length) {\n            return;\n        }\n\n        for (i = row; i < row + rowspan; i++) {\n            for (j = col; j < col + colspan; j++) {\n                $tr.eq(i).find('>td').eq(j).hide();\n            }\n        }\n\n        $td.attr('rowspan', rowspan).attr('colspan', colspan).show();\n    };\n\n    BootstrapTable.prototype.updateCell = function (params) {\n        if (!params.hasOwnProperty('index') ||\n            !params.hasOwnProperty('field') ||\n            !params.hasOwnProperty('value')) {\n            return;\n        }\n        this.data[params.index][params.field] = params.value;\n\n        if (params.reinit === false) {\n            return;\n        }\n        this.initSort();\n        this.initBody(true);\n    };\n\n    BootstrapTable.prototype.getOptions = function () {\n        return this.options;\n    };\n\n    BootstrapTable.prototype.getSelections = function () {\n        var that = this;\n\n        return $.grep(this.options.data, function (row) {\n            // fix #2424: from html with checkbox\n            return row[that.header.stateField] === true;\n        });\n    };\n\n    BootstrapTable.prototype.getAllSelections = function () {\n        var that = this;\n\n        return $.grep(this.options.data, function (row) {\n            return row[that.header.stateField];\n        });\n    };\n\n    BootstrapTable.prototype.checkAll = function () {\n        this.checkAll_(true);\n    };\n\n    BootstrapTable.prototype.uncheckAll = function () {\n        this.checkAll_(false);\n    };\n\n    BootstrapTable.prototype.checkInvert = function () {\n        var that = this;\n        var rows = that.$selectItem.filter(':enabled');\n        var checked = rows.filter(':checked');\n        rows.each(function() {\n            $(this).prop('checked', !$(this).prop('checked'));\n        });\n        that.updateRows();\n        that.updateSelected();\n        that.trigger('uncheck-some', checked);\n        checked = that.getSelections();\n        that.trigger('check-some', checked);\n    };\n\n    BootstrapTable.prototype.checkAll_ = function (checked) {\n        var rows;\n        if (!checked) {\n            rows = this.getSelections();\n        }\n        this.$selectAll.add(this.$selectAll_).prop('checked', checked);\n        this.$selectItem.filter(':enabled').prop('checked', checked);\n        this.updateRows();\n        if (checked) {\n            rows = this.getSelections();\n        }\n        this.trigger(checked ? 'check-all' : 'uncheck-all', rows);\n    };\n\n    BootstrapTable.prototype.check = function (index) {\n        this.check_(true, index);\n    };\n\n    BootstrapTable.prototype.uncheck = function (index) {\n        this.check_(false, index);\n    };\n\n    BootstrapTable.prototype.check_ = function (checked, index) {\n        var $el = this.$selectItem.filter(sprintf('[data-index=\"%s\"]', index)).prop('checked', checked);\n        this.data[index][this.header.stateField] = checked;\n        this.updateSelected();\n        this.trigger(checked ? 'check' : 'uncheck', this.data[index], $el);\n    };\n\n    BootstrapTable.prototype.checkBy = function (obj) {\n        this.checkBy_(true, obj);\n    };\n\n    BootstrapTable.prototype.uncheckBy = function (obj) {\n        this.checkBy_(false, obj);\n    };\n\n    BootstrapTable.prototype.checkBy_ = function (checked, obj) {\n        if (!obj.hasOwnProperty('field') || !obj.hasOwnProperty('values')) {\n            return;\n        }\n\n        var that = this,\n            rows = [];\n        $.each(this.options.data, function (index, row) {\n            if (!row.hasOwnProperty(obj.field)) {\n                return false;\n            }\n            if ($.inArray(row[obj.field], obj.values) !== -1) {\n                var $el = that.$selectItem.filter(':enabled')\n                    .filter(sprintf('[data-index=\"%s\"]', index)).prop('checked', checked);\n                row[that.header.stateField] = checked;\n                rows.push(row);\n                that.trigger(checked ? 'check' : 'uncheck', row, $el);\n            }\n        });\n        this.updateSelected();\n        this.trigger(checked ? 'check-some' : 'uncheck-some', rows);\n    };\n\n    BootstrapTable.prototype.destroy = function () {\n        this.$el.insertBefore(this.$container);\n        $(this.options.toolbar).insertBefore(this.$el);\n        this.$container.next().remove();\n        this.$container.remove();\n        this.$el.html(this.$el_.html())\n            .css('margin-top', '0')\n            .attr('class', this.$el_.attr('class') || ''); // reset the class\n    };\n\n    BootstrapTable.prototype.showLoading = function () {\n        this.$tableLoading.show();\n    };\n\n    BootstrapTable.prototype.hideLoading = function () {\n        this.$tableLoading.hide();\n    };\n\n    BootstrapTable.prototype.togglePagination = function () {\n        this.options.pagination = !this.options.pagination;\n        var button = this.$toolbar.find('button[name=\"paginationSwitch\"] i');\n        if (this.options.pagination) {\n            button.attr(\"class\", this.options.iconsPrefix + \" \" + this.options.icons.paginationSwitchDown);\n        } else {\n            button.attr(\"class\", this.options.iconsPrefix + \" \" + this.options.icons.paginationSwitchUp);\n        }\n        this.updatePagination();\n    };\n\n    BootstrapTable.prototype.refresh = function (params) {\n        if (params && params.url) {\n            this.options.url = params.url;\n        }\n        if (params && params.pageNumber) {\n            this.options.pageNumber = params.pageNumber;\n        }\n        if (params && params.pageSize) {\n            this.options.pageSize = params.pageSize;\n        }\n        this.initServer(params && params.silent,\n            params && params.query, params && params.url);\n        this.trigger('refresh', params);\n    };\n\n    BootstrapTable.prototype.resetWidth = function () {\n        if (this.options.showHeader && this.options.height) {\n            this.fitHeader();\n        }\n        if (this.options.showFooter) {\n            this.fitFooter();\n        }\n    };\n\n    BootstrapTable.prototype.showColumn = function (field) {\n        this.toggleColumn(getFieldIndex(this.columns, field), true, true);\n    };\n\n    BootstrapTable.prototype.hideColumn = function (field) {\n        this.toggleColumn(getFieldIndex(this.columns, field), false, true);\n    };\n\n    BootstrapTable.prototype.getHiddenColumns = function () {\n        return $.grep(this.columns, function (column) {\n            return !column.visible;\n        });\n    };\n\n    BootstrapTable.prototype.getVisibleColumns = function () {\n        return $.grep(this.columns, function (column) {\n            return column.visible;\n        });\n    };\n\n    BootstrapTable.prototype.toggleAllColumns = function (visible) {\n        $.each(this.columns, function (i, column) {\n            this.columns[i].visible = visible;\n        });\n\n        this.initHeader();\n        this.initSearch();\n        this.initPagination();\n        this.initBody();\n        if (this.options.showColumns) {\n            var $items = this.$toolbar.find('.keep-open input').prop('disabled', false);\n\n            if ($items.filter(':checked').length <= this.options.minimumCountColumns) {\n                $items.filter(':checked').prop('disabled', true);\n            }\n        }\n    };\n\n    BootstrapTable.prototype.showAllColumns = function () {\n        this.toggleAllColumns(true);\n    };\n\n    BootstrapTable.prototype.hideAllColumns = function () {\n        this.toggleAllColumns(false);\n    };\n\n    BootstrapTable.prototype.filterBy = function (columns) {\n        this.filterColumns = $.isEmptyObject(columns) ? {} : columns;\n        this.options.pageNumber = 1;\n        this.initSearch();\n        this.updatePagination();\n    };\n\n    BootstrapTable.prototype.scrollTo = function (value) {\n        if (typeof value === 'string') {\n            value = value === 'bottom' ? this.$tableBody[0].scrollHeight : 0;\n        }\n        if (typeof value === 'number') {\n            this.$tableBody.scrollTop(value);\n        }\n        if (typeof value === 'undefined') {\n            return this.$tableBody.scrollTop();\n        }\n    };\n\n    BootstrapTable.prototype.getScrollPosition = function () {\n        return this.scrollTo();\n    };\n\n    BootstrapTable.prototype.selectPage = function (page) {\n        if (page > 0 && page <= this.options.totalPages) {\n            this.options.pageNumber = page;\n            this.updatePagination();\n        }\n    };\n\n    BootstrapTable.prototype.prevPage = function () {\n        if (this.options.pageNumber > 1) {\n            this.options.pageNumber--;\n            this.updatePagination();\n        }\n    };\n\n    BootstrapTable.prototype.nextPage = function () {\n        if (this.options.pageNumber < this.options.totalPages) {\n            this.options.pageNumber++;\n            this.updatePagination();\n        }\n    };\n\n    BootstrapTable.prototype.toggleView = function () {\n        this.options.cardView = !this.options.cardView;\n        this.initHeader();\n        // Fixed remove toolbar when click cardView button.\n        //that.initToolbar();\n        this.initBody();\n        this.trigger('toggle', this.options.cardView);\n    };\n\n    BootstrapTable.prototype.refreshOptions = function (options) {\n        //If the objects are equivalent then avoid the call of destroy / init methods\n        if (compareObjects(this.options, options, true)) {\n            return;\n        }\n        this.options = $.extend(this.options, options);\n        this.trigger('refresh-options', this.options);\n        this.destroy();\n        this.init();\n    };\n\n    BootstrapTable.prototype.resetSearch = function (text) {\n        var $search = this.$toolbar.find('.search input');\n        $search.val(text || '');\n        this.onSearch({currentTarget: $search});\n    };\n\n    BootstrapTable.prototype.expandRow_ = function (expand, index) {\n        var $tr = this.$body.find(sprintf('> tr[data-index=\"%s\"]', index));\n        if ($tr.next().is('tr.detail-view') === (expand ? false : true)) {\n            $tr.find('> td > .detail-icon').click();\n        }\n    };\n\n    BootstrapTable.prototype.expandRow = function (index) {\n        this.expandRow_(true, index);\n    };\n\n    BootstrapTable.prototype.collapseRow = function (index) {\n        this.expandRow_(false, index);\n    };\n\n    BootstrapTable.prototype.expandAllRows = function (isSubTable) {\n        if (isSubTable) {\n            var $tr = this.$body.find(sprintf('> tr[data-index=\"%s\"]', 0)),\n                that = this,\n                detailIcon = null,\n                executeInterval = false,\n                idInterval = -1;\n\n            if (!$tr.next().is('tr.detail-view')) {\n                $tr.find('> td > .detail-icon').click();\n                executeInterval = true;\n            } else if (!$tr.next().next().is('tr.detail-view')) {\n                $tr.next().find(\".detail-icon\").click();\n                executeInterval = true;\n            }\n\n            if (executeInterval) {\n                try {\n                    idInterval = setInterval(function () {\n                        detailIcon = that.$body.find(\"tr.detail-view\").last().find(\".detail-icon\");\n                        if (detailIcon.length > 0) {\n                            detailIcon.click();\n                        } else {\n                            clearInterval(idInterval);\n                        }\n                    }, 1);\n                } catch (ex) {\n                    clearInterval(idInterval);\n                }\n            }\n        } else {\n            var trs = this.$body.children();\n            for (var i = 0; i < trs.length; i++) {\n                this.expandRow_(true, $(trs[i]).data(\"index\"));\n            }\n        }\n    };\n\n    BootstrapTable.prototype.collapseAllRows = function (isSubTable) {\n        if (isSubTable) {\n            this.expandRow_(false, 0);\n        } else {\n            var trs = this.$body.children();\n            for (var i = 0; i < trs.length; i++) {\n                this.expandRow_(false, $(trs[i]).data(\"index\"));\n            }\n        }\n    };\n\n    BootstrapTable.prototype.updateFormatText = function (name, text) {\n        if (this.options[sprintf('format%s', name)]) {\n            if (typeof text === 'string') {\n                this.options[sprintf('format%s', name)] = function () {\n                    return text;\n                };\n            } else if (typeof text === 'function') {\n                this.options[sprintf('format%s', name)] = text;\n            }\n        }\n        this.initToolbar();\n        this.initPagination();\n        this.initBody();\n    };\n\n    // BOOTSTRAP TABLE PLUGIN DEFINITION\n    // =======================\n\n    var allowedMethods = [\n        'getOptions',\n        'getSelections', 'getAllSelections', 'getData',\n        'load', 'append', 'prepend', 'remove', 'removeAll',\n        'insertRow', 'updateRow', 'updateCell', 'updateByUniqueId', 'removeByUniqueId',\n        'getRowByUniqueId', 'showRow', 'hideRow', 'getHiddenRows',\n        'mergeCells',\n        'checkAll', 'uncheckAll', 'checkInvert',\n        'check', 'uncheck',\n        'checkBy', 'uncheckBy',\n        'refresh',\n        'resetView',\n        'resetWidth',\n        'destroy',\n        'showLoading', 'hideLoading',\n        'showColumn', 'hideColumn', 'getHiddenColumns', 'getVisibleColumns',\n        'showAllColumns', 'hideAllColumns',\n        'filterBy',\n        'scrollTo',\n        'getScrollPosition',\n        'selectPage', 'prevPage', 'nextPage',\n        'togglePagination',\n        'toggleView',\n        'refreshOptions',\n        'resetSearch',\n        'expandRow', 'collapseRow', 'expandAllRows', 'collapseAllRows',\n        'updateFormatText'\n    ];\n\n    $.fn.bootstrapTable = function (option) {\n        var value,\n            args = Array.prototype.slice.call(arguments, 1);\n\n        this.each(function () {\n            var $this = $(this),\n                data = $this.data('bootstrap.table'),\n                options = $.extend({}, BootstrapTable.DEFAULTS, $this.data(),\n                    typeof option === 'object' && option);\n\n            if (typeof option === 'string') {\n                if ($.inArray(option, allowedMethods) < 0) {\n                    throw new Error(\"Unknown method: \" + option);\n                }\n\n                if (!data) {\n                    return;\n                }\n\n                value = data[option].apply(data, args);\n\n                if (option === 'destroy') {\n                    $this.removeData('bootstrap.table');\n                }\n            }\n\n            if (!data) {\n                $this.data('bootstrap.table', (data = new BootstrapTable(this, options)));\n            }\n        });\n\n        return typeof value === 'undefined' ? this : value;\n    };\n\n    $.fn.bootstrapTable.Constructor = BootstrapTable;\n    $.fn.bootstrapTable.defaults = BootstrapTable.DEFAULTS;\n    $.fn.bootstrapTable.columnDefaults = BootstrapTable.COLUMN_DEFAULTS;\n    $.fn.bootstrapTable.locales = BootstrapTable.LOCALES;\n    $.fn.bootstrapTable.methods = allowedMethods;\n    $.fn.bootstrapTable.utils = {\n        sprintf: sprintf,\n        getFieldIndex: getFieldIndex,\n        compareObjects: compareObjects,\n        calculateObjectValue: calculateObjectValue,\n        getItemField: getItemField,\n        objectKeys: objectKeys,\n        isIEBrowser: isIEBrowser\n    };\n\n    // BOOTSTRAP TABLE INIT\n    // =======================\n\n    $(function () {\n        $('[data-toggle=\"table\"]').bootstrapTable();\n    });\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/locale/bootstrap-table-af-ZA.js":"/**\n * Bootstrap Table Afrikaans translation\n * Author: Phillip Kruger <phillip.kruger@gmail.com>\n */\n(function ($) {\n    'use strict';\n\n    $.fn.bootstrapTable.locales['af-ZA'] = {\n        formatLoadingMessage: function () {\n            return 'Besig om te laai, wag asseblief ...';\n        },\n        formatRecordsPerPage: function (pageNumber) {\n            return pageNumber + ' rekords per bladsy';\n        },\n        formatShowingRows: function (pageFrom, pageTo, totalRows) {\n            return 'Resultate ' + pageFrom + ' tot ' + pageTo + ' van ' + totalRows + ' rye';\n        },\n        formatSearch: function () {\n            return 'Soek';\n        },\n        formatNoMatches: function () {\n            return 'Geen rekords gevind nie';\n        },\n        formatPaginationSwitch: function () {\n            return 'Wys/verberg bladsy nummering';\n        },\n        formatRefresh: function () {\n            return 'Herlaai';\n        },\n        formatToggle: function () {\n            return 'Wissel';\n        },\n        formatColumns: function () {\n            return 'Kolomme';\n        }\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['af-ZA']);\n\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/locale/bootstrap-table-ar-SA.js":"/**\n * Bootstrap Table English translation\n * Author: Zhixin Wen<wenzhixin2010@gmail.com>\n */\n(function ($) {\n    'use strict';\n\n    $.fn.bootstrapTable.locales['ar-SA'] = {\n        formatLoadingMessage: function () {\n            return 'جاري التحميل, يرجى الإنتظار...';\n        },\n        formatRecordsPerPage: function (pageNumber) {\n            return pageNumber + ' سجل لكل صفحة';\n        },\n        formatShowingRows: function (pageFrom, pageTo, totalRows) {\n            return 'الظاهر ' + pageFrom + ' إلى ' + pageTo + ' من ' + totalRows + ' سجل';\n        },\n        formatSearch: function () {\n            return 'بحث';\n        },\n        formatNoMatches: function () {\n            return 'لا توجد نتائج مطابقة للبحث';\n        },\n        formatPaginationSwitch: function () {\n            return 'إخفاء\\إظهار ترقيم الصفحات';\n        },\n        formatRefresh: function () {\n            return 'تحديث';\n        },\n        formatToggle: function () {\n            return 'تغيير';\n        },\n        formatColumns: function () {\n            return 'أعمدة';\n        }\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['ar-SA']);\n\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/locale/bootstrap-table-ca-ES.js":"/**\n * Bootstrap Table Catalan translation\n * Authors: Marc Pina<iwalkalone69@gmail.com>\n *          Claudi Martinez<claudix.kernel@gmail.com>\n */\n(function ($) {\n    'use strict';\n\n    $.fn.bootstrapTable.locales['ca-ES'] = {\n        formatLoadingMessage: function () {\n            return 'Espereu, si us plau...';\n        },\n        formatRecordsPerPage: function (pageNumber) {\n            return pageNumber + ' resultats per pàgina';\n        },\n        formatShowingRows: function (pageFrom, pageTo, totalRows) {\n            return 'Mostrant de ' + pageFrom + ' fins ' + pageTo + ' - total ' + totalRows + ' resultats';\n        },\n        formatSearch: function () {\n            return 'Cerca';\n        },\n        formatNoMatches: function () {\n            return 'No s\\'han trobat resultats';\n        },\n        formatPaginationSwitch: function () {\n            return 'Amaga/Mostra paginació';\n        },\n        formatRefresh: function () {\n            return 'Refresca';\n        },\n        formatToggle: function () {\n            return 'Alterna formatació';\n        },\n        formatColumns: function () {\n            return 'Columnes';\n        },\n        formatAllRows: function () {\n            return 'Tots';\n        }\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['ca-ES']);\n\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/locale/bootstrap-table-cs-CZ.js":"/**\n * Bootstrap Table Czech translation\n * Author: Lukas Kral (monarcha@seznam.cz)\n * Author: Jakub Svestka <svestka1999@gmail.com>\n */\n(function ($) {\n    'use strict';\n\n    $.fn.bootstrapTable.locales['cs-CZ'] = {\n        formatLoadingMessage: function () {\n            return 'Čekejte, prosím...';\n        },\n        formatRecordsPerPage: function (pageNumber) {\n            return pageNumber + ' položek na stránku';\n        },\n        formatShowingRows: function (pageFrom, pageTo, totalRows) {\n            return 'Zobrazena ' + pageFrom + '. - ' + pageTo + '. položka z celkových ' + totalRows;\n        },\n        formatSearch: function () {\n            return 'Vyhledávání';\n        },\n        formatNoMatches: function () {\n            return 'Nenalezena žádná vyhovující položka';\n        },\n        formatPaginationSwitch: function () {\n            return 'Skrýt/Zobrazit stránkování';\n        },\n        formatRefresh: function () {\n            return 'Aktualizovat';\n        },\n        formatToggle: function () {\n            return 'Přepni';\n        },\n        formatColumns: function () {\n            return 'Sloupce';\n        },\n        formatAllRows: function () {\n            return 'Vše';\n        }\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['cs-CZ']);\n\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/locale/bootstrap-table-da-DK.js":"/**\n * Bootstrap Table danish translation\n * Author: Your Name Jan Borup Coyle, github@coyle.dk\n */\n(function ($) {\n    'use strict';\n\n    $.fn.bootstrapTable.locales['da-DK'] = {\n        formatLoadingMessage: function () {\n            return 'Indlæser, vent venligst...';\n        },\n        formatRecordsPerPage: function (pageNumber) {\n            return pageNumber + ' poster pr side';\n        },\n        formatShowingRows: function (pageFrom, pageTo, totalRows) {\n            return 'Viser ' + pageFrom + ' til ' + pageTo + ' af ' + totalRows + ' rækker';\n        },\n        formatSearch: function () {\n            return 'Søg';\n        },\n        formatNoMatches: function () {\n            return 'Ingen poster fundet';\n        },\n        formatRefresh: function () {\n            return 'Opdater';\n        },\n        formatToggle: function () {\n            return 'Skift';\n        },\n        formatColumns: function () {\n            return 'Kolonner';\n        }\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['da-DK']);\n\n})(jQuery);","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/locale/bootstrap-table-de-DE.js":"/**\n* Bootstrap Table German translation\n* Author: Paul Mohr - Sopamo<p.mohr@sopamo.de>\n*/\n(function ($) {\n  'use strict';\n\n  $.fn.bootstrapTable.locales['de-DE'] = {\n    formatLoadingMessage: function () {\n      return 'Lade, bitte warten...';\n    },\n    formatRecordsPerPage: function (pageNumber) {\n      return pageNumber + ' Einträge pro Seite.';\n    },\n    formatShowingRows: function (pageFrom, pageTo, totalRows) {\n      return 'Zeige Zeile ' + pageFrom + ' bis ' + pageTo + ' von ' + totalRows + ' Zeile' + ((totalRows > 1) ? \"n\" : \"\")+\".\";\n    },\n    formatDetailPagination: function (totalRows) {\n      return 'Zeige ' + totalRows + ' Zeile' + ((totalRows > 1) ? \"n\" : \"\")+\".\";\n    },\n    formatSearch: function () {\n      return 'Suchen ...';\n    },\n    formatNoMatches: function () {\n      return 'Keine passenden Ergebnisse gefunden.';\n    },\n    formatRefresh: function () {\n      return 'Neu laden';\n    },\n    formatToggle: function () {\n      return 'Umschalten';\n    },\n    formatColumns: function () {\n      return 'Spalten';\n    },\n    formatAllRows: function () {\n      return 'Alle';\n    }\n  };\n\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['de-DE']);\n\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/locale/bootstrap-table-el-GR.js":"/**\n * Bootstrap Table Greek translation\n * Author: giannisdallas\n */\n(function ($) {\n    'use strict';\n\n    $.fn.bootstrapTable.locales['el-GR'] = {\n        formatLoadingMessage: function () {\n            return 'Φορτώνει, παρακαλώ περιμένετε...';\n        },\n        formatRecordsPerPage: function (pageNumber) {\n            return pageNumber + ' αποτελέσματα ανά σελίδα';\n        },\n        formatShowingRows: function (pageFrom, pageTo, totalRows) {\n            return 'Εμφανίζονται από την ' + pageFrom + ' ως την ' + pageTo + ' από σύνολο ' + totalRows + ' σειρών';\n        },\n        formatSearch: function () {\n            return 'Αναζητήστε';\n        },\n        formatNoMatches: function () {\n            return 'Δεν βρέθηκαν αποτελέσματα';\n        }\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['el-GR']);\n\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/locale/bootstrap-table-en-US.js":"/**\n * Bootstrap Table English translation\n * Author: Zhixin Wen<wenzhixin2010@gmail.com>\n */\n(function ($) {\n    'use strict';\n\n    $.fn.bootstrapTable.locales['en-US'] = {\n        formatLoadingMessage: function () {\n            return 'Loading, please wait...';\n        },\n        formatRecordsPerPage: function (pageNumber) {\n            return pageNumber + ' rows per page';\n        },\n        formatShowingRows: function (pageFrom, pageTo, totalRows) {\n            return 'Showing ' + pageFrom + ' to ' + pageTo + ' of ' + totalRows + ' rows';\n        },\n        formatSearch: function () {\n            return 'Search';\n        },\n        formatNoMatches: function () {\n            return 'No matching records found';\n        },\n        formatPaginationSwitch: function () {\n            return 'Hide/Show pagination';\n        },\n        formatRefresh: function () {\n            return 'Refresh';\n        },\n        formatToggle: function () {\n            return 'Toggle';\n        },\n        formatColumns: function () {\n            return 'Columns';\n        },\n        formatAllRows: function () {\n            return 'All';\n        },\n        formatExport: function () {\n            return 'Export data';\n        },\n        formatClearFilters: function () {\n            return 'Clear filters';\n        }\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['en-US']);\n\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/locale/bootstrap-table-es-AR.js":"/**\n * Bootstrap Table Spanish (Argentina) translation\n * Author: Felix Vera (felix.vera@gmail.com)\n */\n(function ($) {\n    'use strict';\n\n    $.fn.bootstrapTable.locales['es-AR'] = {\n        formatLoadingMessage: function () {\n            return 'Cargando, espere por favor...';\n        },\n        formatRecordsPerPage: function (pageNumber) {\n            return pageNumber + ' registros por página';\n        },\n        formatShowingRows: function (pageFrom, pageTo, totalRows) {\n            return 'Mostrando ' + pageFrom + ' a ' + pageTo + ' de ' + totalRows + ' filas';\n        },\n        formatSearch: function () {\n            return 'Buscar';\n        },\n        formatNoMatches: function () {\n            return 'No se encontraron registros';\n        },\n        formatAllRows: function () {\n            return 'Todo';\n        }\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['es-AR']);\n\n})(jQuery);","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/locale/bootstrap-table-es-CL.js":"/**\n * Traducción de librería Bootstrap Table a Español (Chile)\n * @author Brian Álvarez Azócar\n * email brianalvarezazocar@gmail.com\n */\n(function($) {\n  'use strict';\n\n  $.fn.bootstrapTable.locales['es-CL'] = {\n    formatLoadingMessage: function() {\n      return 'Cargando, espere por favor...';\n    },\n    formatRecordsPerPage: function(pageNumber) {\n      return pageNumber + ' filas por p\\u00E1gina';\n    },\n    formatShowingRows: function(pageFrom, pageTo, totalRows) {\n      return 'Mostrando ' + pageFrom + ' a ' + pageTo + ' de ' + totalRows + ' filas';\n    },\n    formatSearch: function() {\n      return 'Buscar';\n    },\n    formatNoMatches: function() {\n      return 'No se encontraron registros';\n    },\n    formatPaginationSwitch: function() {\n      return 'Ocultar/Mostrar paginaci\\u00F3n';\n    },\n    formatRefresh: function() {\n      return 'Refrescar';\n    },\n    formatToggle: function() {\n      return 'Cambiar';\n    },\n    formatColumns: function() {\n      return 'Columnas';\n    },\n    formatAllRows: function() {\n      return 'Todo';\n    }\n  };\n\n  $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['es-CL']);\n\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/locale/bootstrap-table-es-CR.js":"/**\n * Bootstrap Table Spanish (Costa Rica) translation\n * Author: Dennis Hernández (http://djhvscf.github.io/Blog/)\n */\n(function ($) {\n    'use strict';\n\n    $.fn.bootstrapTable.locales['es-CR'] = {\n        formatLoadingMessage: function () {\n            return 'Cargando, por favor espere...';\n        },\n        formatRecordsPerPage: function (pageNumber) {\n            return pageNumber + ' registros por página';\n        },\n        formatShowingRows: function (pageFrom, pageTo, totalRows) {\n            return 'Mostrando de ' + pageFrom + ' a ' + pageTo + ' registros de ' + totalRows + ' registros en total';\n        },\n        formatSearch: function () {\n            return 'Buscar';\n        },\n        formatNoMatches: function () {\n            return 'No se encontraron registros';\n        },\n        formatRefresh: function () {\n            return 'Refrescar';\n        },\n        formatToggle: function () {\n            return 'Alternar';\n        },\n        formatColumns: function () {\n            return 'Columnas';\n        },\n        formatAllRows: function () {\n            return 'Todo';\n        }\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['es-CR']);\n\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/locale/bootstrap-table-es-ES.js":"/**\n * Bootstrap Table Spanish Spain translation\n * Author: Marc Pina<iwalkalone69@gmail.com>\n */\n(function ($) {\n    'use strict';\n\n    $.fn.bootstrapTable.locales['es-ES'] = {\n        formatLoadingMessage: function () {\n            return 'Por favor espere...';\n        },\n        formatRecordsPerPage: function (pageNumber) {\n            return pageNumber + ' resultados por página';\n        },\n        formatShowingRows: function (pageFrom, pageTo, totalRows) {\n            return 'Mostrando desde ' + pageFrom + ' hasta ' + pageTo + ' - En total ' + totalRows + ' resultados';\n        },\n        formatSearch: function () {\n            return 'Buscar';\n        },\n        formatNoMatches: function () {\n            return 'No se encontraron resultados';\n        },\n        formatPaginationSwitch: function () {\n            return 'Ocultar/Mostrar paginación';\n        },\n        formatRefresh: function () {\n            return 'Refrescar';\n        },\n        formatToggle: function () {\n            return 'Ocultar/Mostrar';\n        },\n        formatColumns: function () {\n            return 'Columnas';\n        },\n        formatAllRows: function () {\n            return 'Todos';\n        }\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['es-ES']);\n\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/locale/bootstrap-table-es-MX.js":"/**\n * Bootstrap Table Spanish (México) translation (Obtenido de traducción de Argentina)\n * Author: Felix Vera (felix.vera@gmail.com) \n * Copiado: Mauricio Vera (mauricioa.vera@gmail.com)\n */\n(function ($) {\n    'use strict';\n\n    $.fn.bootstrapTable.locales['es-MX'] = {\n        formatLoadingMessage: function () {\n            return 'Cargando, espere por favor...';\n        },\n        formatRecordsPerPage: function (pageNumber) {\n            return pageNumber + ' registros por página';\n        },\n        formatShowingRows: function (pageFrom, pageTo, totalRows) {\n            return 'Mostrando ' + pageFrom + ' a ' + pageTo + ' de ' + totalRows + ' filas';\n        },\n        formatSearch: function () {\n            return 'Buscar';\n        },\n        formatNoMatches: function () {\n            return 'No se encontraron registros';\n        },\n        formatAllRows: function () {\n            return 'Todo';\n        }\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['es-MX']);\n\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/locale/bootstrap-table-es-NI.js":"/**\n * Bootstrap Table Spanish (Nicaragua) translation\n * Author: Dennis Hernández (http://djhvscf.github.io/Blog/)\n */\n(function ($) {\n    'use strict';\n\n    $.fn.bootstrapTable.locales['es-NI'] = {\n        formatLoadingMessage: function () {\n            return 'Cargando, por favor espere...';\n        },\n        formatRecordsPerPage: function (pageNumber) {\n            return pageNumber + ' registros por página';\n        },\n        formatShowingRows: function (pageFrom, pageTo, totalRows) {\n            return 'Mostrando de ' + pageFrom + ' a ' + pageTo + ' registros de ' + totalRows + ' registros en total';\n        },\n        formatSearch: function () {\n            return 'Buscar';\n        },\n        formatNoMatches: function () {\n            return 'No se encontraron registros';\n        },\n        formatRefresh: function () {\n            return 'Refrescar';\n        },\n        formatToggle: function () {\n            return 'Alternar';\n        },\n        formatColumns: function () {\n            return 'Columnas';\n        },\n        formatAllRows: function () {\n            return 'Todo';\n        }\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['es-NI']);\n\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/locale/bootstrap-table-es-SP.js":"/**\n * Bootstrap Table Spanish (España) translation\n * Author: Antonio Pérez <anpegar@gmail.com>\n */\n (function ($) {\n    'use strict';\n    \n    $.fn.bootstrapTable.locales['es-SP'] = {\n        formatLoadingMessage: function () {\n            return 'Cargando, por favor espera...';\n        },\n        formatRecordsPerPage: function (pageNumber) {\n            return pageNumber + ' registros por p&#225;gina.';\n        },\n        formatShowingRows: function (pageFrom, pageTo, totalRows) {\n            return pageFrom + ' - ' + pageTo + ' de ' + totalRows + ' registros.';\n        },\n        formatSearch: function () {\n            return 'Buscar';\n        },\n        formatNoMatches: function () {\n            return 'No se han encontrado registros.';\n        },\n        formatRefresh: function () {\n            return 'Actualizar';\n        },\n        formatToggle: function () {\n            return 'Alternar';\n        },\n        formatColumns: function () {\n            return 'Columnas';\n        },\n        formatAllRows: function () {\n            return 'Todo';\n        }\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['es-SP']);\n\n})(jQuery);","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/locale/bootstrap-table-et-EE.js":"/**\n * Bootstrap Table Estonian translation\n * Author: kristjan@logist.it>\n */\n(function ($) {\n    'use strict';\n\n    $.fn.bootstrapTable.locales['et-EE'] = {\n        formatLoadingMessage: function () {\n            return 'Päring käib, palun oota...';\n        },\n        formatRecordsPerPage: function (pageNumber) {\n            return pageNumber + ' rida lehe kohta';\n        },\n        formatShowingRows: function (pageFrom, pageTo, totalRows) {\n            return 'Näitan tulemusi ' + pageFrom + ' kuni ' + pageTo + ' - kokku ' + totalRows + ' tulemust';\n        },\n        formatSearch: function () {\n            return 'Otsi';\n        },\n        formatNoMatches: function () {\n            return 'Päringu tingimustele ei vastanud ühtegi tulemust';\n        },\n        formatPaginationSwitch: function () {\n            return 'Näita/Peida lehtedeks jagamine';\n        },\n        formatRefresh: function () {\n            return 'Värskenda';\n        },\n        formatToggle: function () {\n            return 'Lülita';\n        },\n        formatColumns: function () {\n            return 'Veerud';\n        },\n        formatAllRows: function () {\n            return 'Kõik';\n        }\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['et-EE']);\n\n})(jQuery);","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/locale/bootstrap-table-fa-IR.js":"/**\n * Bootstrap Table Persian translation\n * Author: MJ Vakili <mjv.1989@Gmail.com>\n */\n(function ($) {\n    'use strict';\n\n    $.fn.bootstrapTable.locales['fa-IR'] = {\n        formatLoadingMessage: function () {\n            return 'در حال بارگذاری, لطفا صبر کنید...';\n        },\n        formatRecordsPerPage: function (pageNumber) {\n            return pageNumber + ' رکورد در صفحه';\n        },\n        formatShowingRows: function (pageFrom, pageTo, totalRows) {\n            return 'نمایش ' + pageFrom + ' تا ' + pageTo + ' از ' + totalRows + ' ردیف';\n        },\n        formatSearch: function () {\n            return 'جستجو';\n        },\n        formatNoMatches: function () {\n            return 'رکوردی یافت نشد.';\n        },\n        formatPaginationSwitch: function () {\n            return 'نمایش/مخفی صفحه بندی';\n        },\n        formatRefresh: function () {\n            return 'به روز رسانی';\n        },\n        formatToggle: function () {\n            return 'تغییر نمایش';\n        },\n        formatColumns: function () {\n            return 'سطر ها';\n        },\n        formatAllRows: function () {\n            return 'همه';\n        }\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['fa-IR']);\n\n})(jQuery);","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/locale/bootstrap-table-fr-BE.js":"/**\n * Bootstrap Table French (Belgium) translation\n * Author: Julien Bisconti (julien.bisconti@gmail.com)\n */\n(function ($) {\n    'use strict';\n\n    $.fn.bootstrapTable.locales['fr-BE'] = {\n        formatLoadingMessage: function () {\n            return 'Chargement en cours...';\n        },\n        formatRecordsPerPage: function (pageNumber) {\n            return pageNumber + ' entrées par page';\n        },\n        formatShowingRows: function (pageFrom, pageTo, totalRows) {\n            return 'Affiche de' + pageFrom + ' à ' + pageTo + ' sur ' + totalRows + ' lignes';\n        },\n        formatSearch: function () {\n            return 'Recherche';\n        },\n        formatNoMatches: function () {\n            return 'Pas de fichiers trouvés';\n        }\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['fr-BE']);\n\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/locale/bootstrap-table-fr-FR.js":"/**\n * Bootstrap Table French (France) translation\n * Author: Dennis Hernández (http://djhvscf.github.io/Blog/)\n * Modification: Tidalf (https://github.com/TidalfFR)\n */\n(function ($) {\n    'use strict';\n\n    $.fn.bootstrapTable.locales['fr-FR'] = {\n        formatLoadingMessage: function () {\n            return 'Chargement en cours, patientez, s´il vous plaît ...';\n        },\n        formatRecordsPerPage: function (pageNumber) {\n            return pageNumber + ' lignes par page';\n        },\n        formatShowingRows: function (pageFrom, pageTo, totalRows) {\n            return 'Affichage des lignes ' + pageFrom + ' à ' + pageTo + ' sur ' + totalRows + ' lignes au total';\n        },\n        formatSearch: function () {\n            return 'Rechercher';\n        },\n        formatNoMatches: function () {\n            return 'Aucun résultat trouvé';\n        },\n        formatRefresh: function () {\n            return 'Rafraîchir';\n        },\n        formatToggle: function () {\n            return 'Alterner';\n        },\n        formatColumns: function () {\n            return 'Colonnes';\n        },\n        formatAllRows: function () {\n            return 'Tous';\n        }\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['fr-FR']);\n\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/locale/bootstrap-table-he-IL.js":"/**\n * Bootstrap Table Hebrew translation\n * Author: legshooter\n */\n(function ($) {\n    'use strict';\n\n    $.fn.bootstrapTable.locales['he-IL'] = {\n        formatLoadingMessage: function () {\n            return 'טוען, נא להמתין...';\n        },\n        formatRecordsPerPage: function (pageNumber) {\n            return pageNumber + ' שורות בעמוד';\n        },\n        formatShowingRows: function (pageFrom, pageTo, totalRows) {\n            return 'מציג ' + pageFrom + ' עד ' + pageTo + ' מ-' + totalRows + ' שורות';\n        },\n        formatSearch: function () {\n            return 'חיפוש';\n        },\n        formatNoMatches: function () {\n            return 'לא נמצאו רשומות תואמות';\n        },\n        formatPaginationSwitch: function () {\n            return 'הסתר/הצג מספור דפים';\n        },\n        formatRefresh: function () {\n            return 'רענן';\n        },\n        formatToggle: function () {\n            return 'החלף תצוגה';\n        },\n        formatColumns: function () {\n            return 'עמודות';\n        },\n        formatAllRows: function () {\n            return 'הכל';\n        }\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['he-IL']);\n\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/locale/bootstrap-table-hr-HR.js":"﻿/**\n * Bootstrap Table Croatian translation\n * Author: Petra Štrbenac (petra.strbenac@gmail.com)\n * Author: Petra Štrbenac (petra.strbenac@gmail.com)\n */\n(function ($) {\n    'use strict';\n\n    $.fn.bootstrapTable.locales['hr-HR'] = {\n        formatLoadingMessage: function () {\n            return 'Molimo pričekajte ...';\n        },\n        formatRecordsPerPage: function (pageNumber) {\n            return pageNumber + ' broj zapisa po stranici';\n        },\n        formatShowingRows: function (pageFrom, pageTo, totalRows) {\n            return 'Prikazujem ' + pageFrom + '. - ' + pageTo + '. od ukupnog broja zapisa ' + totalRows;\n        },\n        formatSearch: function () {\n            return 'Pretraži';\n        },\n        formatNoMatches: function () {\n            return 'Nije pronađen niti jedan zapis';\n        },\n        formatPaginationSwitch: function () {\n            return 'Prikaži/sakrij stranice';\n        },\n        formatRefresh: function () {\n            return 'Osvježi';\n        },\n        formatToggle: function () {\n            return 'Promijeni prikaz';\n        },\n        formatColumns: function () {\n            return 'Kolone';\n        },\n        formatAllRows: function () {\n            return 'Sve';\n        }\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['hr-HR']);\n\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/locale/bootstrap-table-hu-HU.js":"/**\n * Bootstrap Table Hungarian translation\n * Author: Nagy Gergely <info@nagygergely.eu>\n */\n(function ($) {\n    'use strict';\n\n    $.fn.bootstrapTable.locales['hu-HU'] = {\n        formatLoadingMessage: function () {\n            return 'Betöltés, kérem várjon...';\n        },\n        formatRecordsPerPage: function (pageNumber) {\n            return pageNumber + ' rekord per oldal';\n        },\n        formatShowingRows: function (pageFrom, pageTo, totalRows) {\n            return 'Megjelenítve ' + pageFrom + ' - ' + pageTo + ' / ' + totalRows + ' összesen';\n        },\n        formatSearch: function () {\n            return 'Keresés';\n        },\n        formatNoMatches: function () {\n            return 'Nincs találat';\n        },\n        formatPaginationSwitch: function () {\n            return 'Lapozó elrejtése/megjelenítése';\n        },\n        formatRefresh: function () {\n            return 'Frissítés';\n        },\n        formatToggle: function () {\n            return 'Összecsuk/Kinyit';\n        },\n        formatColumns: function () {\n            return 'Oszlopok';\n        },\n        formatAllRows: function () {\n            return 'Összes';\n        }\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['hu-HU']);\n\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/locale/bootstrap-table-id-ID.js":"/**\n * Bootstrap Table Indonesian translation\n * Author: Andre Gardiner<andre@sirdre.com> \n */\n(function ($) {\n    'use strict';\n\n    $.fn.bootstrapTable.locales['id-ID'] = {\n        formatLoadingMessage: function () {\n            return 'Memuat, mohon tunggu...';\n        },\n        formatRecordsPerPage: function (pageNumber) {\n            return pageNumber + ' baris per halaman';\n        },\n        formatShowingRows: function (pageFrom, pageTo, totalRows) {\n            return 'Menampilkan ' + pageFrom + ' sampai ' + pageTo + ' dari ' + totalRows + ' baris';\n        }, \n        formatSearch: function () {\n            return 'Pencarian';\n        },\n        formatNoMatches: function () {\n            return 'Tidak ditemukan data yang cocok';\n        },\n        formatPaginationSwitch: function () {\n            return 'Sembunyikan/Tampilkan halaman';\n        },\n        formatRefresh: function () {\n            return 'Muat ulang';\n        },\n        formatToggle: function () {\n            return 'Beralih';\n        },\n        formatColumns: function () {\n            return 'kolom';\n        },\n        formatAllRows: function () {\n            return 'Semua';\n        },\n        formatExport: function () {\n            return 'Ekspor data';\n        },\n        formatClearFilters: function () {\n            return 'Bersihkan filter';\n        }\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['id-ID']);\n\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/locale/bootstrap-table-it-IT.js":"/**\n * Bootstrap Table Italian translation\n * Author: Davide Renzi<davide.renzi@gmail.com>\n * Author: Davide Borsatto <davide.borsatto@gmail.com>\n * Author: Alessio Felicioni <alessio.felicioni@gmail.com>\n */\n(function ($) {\n    'use strict';\n\n    $.fn.bootstrapTable.locales['it-IT'] = {\n        formatLoadingMessage: function () {\n            return 'Caricamento in corso...';\n        },\n        formatRecordsPerPage: function (pageNumber) {\n            return pageNumber + ' elementi per pagina';\n        },\n        formatShowingRows: function (pageFrom, pageTo, totalRows) {\n            return 'Elementi mostrati da ' + pageFrom + ' a ' + pageTo + ' (Numero totali di elementi ' + totalRows + ')';\n        },\n        formatSearch: function () {\n            return 'Cerca';\n        },\n        formatNoMatches: function () {\n            return 'Nessun elemento trovato';\n        },\n        formatPaginationSwitch: function () {\n            return 'Nascondi/Mostra paginazione';\n        },\n        formatRefresh: function () {\n            return 'Aggiorna';\n        },\n        formatToggle: function () {\n            return 'Attiva/Disattiva';\n        },\n        formatColumns: function () {\n            return 'Colonne';\n        },\n        formatAllRows: function () {\n            return 'Tutto';\n        },\n        formatExport: function () {\n            return 'Esporta dati';\n        },\n        formatClearFilters: function () {\n            return 'Pulisci filtri';\n        }\n        \n    };\n\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['it-IT']);\n\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/locale/bootstrap-table-ja-JP.js":"/**\n * Bootstrap Table Japanese translation\n * Author: Azamshul Azizy <azamshul@gmail.com>\n */\n(function ($) {\n    'use strict';\n\n    $.fn.bootstrapTable.locales['ja-JP'] = {\n        formatLoadingMessage: function () {\n            return '読み込み中です。少々お待ちください。';\n        },\n        formatRecordsPerPage: function (pageNumber) {\n            return 'ページ当たり最大' + pageNumber + '件';\n        },\n        formatShowingRows: function (pageFrom, pageTo, totalRows) {\n            return '全' + totalRows + '件から、'+ pageFrom + 'から' + pageTo + '件目まで表示しています';\n        },\n        formatSearch: function () {\n            return '検索';\n        },\n        formatNoMatches: function () {\n            return '該当するレコードが見つかりません';\n        },\n        formatPaginationSwitch: function () {\n            return 'ページ数を表示・非表示';\n        },\n        formatRefresh: function () {\n            return '更新';\n        },\n        formatToggle: function () {\n            return 'トグル';\n        },\n        formatColumns: function () {\n            return '列';\n        },\n        formatAllRows: function () {\n            return 'すべて';\n        }\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['ja-JP']);\n\n})(jQuery);","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/locale/bootstrap-table-ka-GE.js":"/**\n * Bootstrap Table Georgian translation\n * Author: Levan Lotuashvili <l.lotuashvili@gmail.com>\n */\n(function ($) {\n    'use strict';\n\n    $.fn.bootstrapTable.locales['ka-GE'] = {\n        formatLoadingMessage: function() {\n            return 'იტვირთება, გთხოვთ მოიცადოთ...';\n        },\n        formatRecordsPerPage: function(pageNumber) {\n            return pageNumber + ' ჩანაწერი თითო გვერდზე';\n        },\n        formatShowingRows: function(pageFrom, pageTo, totalRows) {\n            return 'ნაჩვენებია ' + pageFrom + '-დან ' + pageTo + '-მდე ჩანაწერი ჯამური ' + totalRows + '-დან';\n        },\n        formatSearch: function() {\n            return 'ძებნა';\n        },\n        formatNoMatches: function() {\n            return 'მონაცემები არ არის';\n        },\n        formatPaginationSwitch: function() {\n            return 'გვერდების გადამრთველის დამალვა/გამოჩენა';\n        },\n        formatRefresh: function() {\n            return 'განახლება';\n        },\n        formatToggle: function() {\n            return 'ჩართვა/გამორთვა';\n        },\n        formatColumns: function() {\n            return 'სვეტები';\n        }\n    };\n    \n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['ka-GE']);\n\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/locale/bootstrap-table-ko-KR.js":"/**\n * Bootstrap Table Korean translation\n * Author: Yi Tae-Hyeong (jsonobject@gmail.com)\n */\n(function ($) {\n    'use strict';\n\n    $.fn.bootstrapTable.locales['ko-KR'] = {\n        formatLoadingMessage: function () {\n            return '데이터를 불러오는 중입니다...';\n        },\n        formatRecordsPerPage: function (pageNumber) {\n            return '페이지 당 ' + pageNumber + '개 데이터 출력';\n        },\n        formatShowingRows: function (pageFrom, pageTo, totalRows) {\n            return '전체 ' + totalRows + '개 중 ' + pageFrom + '~' + pageTo + '번째 데이터 출력,';\n        },\n        formatSearch: function () {\n            return '검색';\n        },\n        formatNoMatches: function () {\n            return '조회된 데이터가 없습니다.';\n        },\n        formatRefresh: function () {\n            return '새로 고침';\n        },\n        formatToggle: function () {\n            return '전환';\n        },\n        formatColumns: function () {\n            return '컬럼 필터링';\n        }\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['ko-KR']);\n\n})(jQuery);","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/locale/bootstrap-table-ms-MY.js":"/**\n * Bootstrap Table Malay translation\n * Author: Azamshul Azizy <azamshul@gmail.com>\n */\n(function ($) {\n    'use strict';\n\n    $.fn.bootstrapTable.locales['ms-MY'] = {\n        formatLoadingMessage: function () {\n            return 'Permintaan sedang dimuatkan. Sila tunggu sebentar...';\n        },\n        formatRecordsPerPage: function (pageNumber) {\n            return pageNumber + ' rekod setiap muka surat';\n        },\n        formatShowingRows: function (pageFrom, pageTo, totalRows) {\n            return 'Sedang memaparkan rekod ' + pageFrom + ' hingga ' + pageTo + ' daripada jumlah ' + totalRows + ' rekod';\n        },\n        formatSearch: function () {\n            return 'Cari';\n        },\n        formatNoMatches: function () {\n            return 'Tiada rekod yang menyamai permintaan';\n        },\n        formatPaginationSwitch: function () {\n            return 'Tunjuk/sembunyi muka surat';\n        },\n        formatRefresh: function () {\n            return 'Muatsemula';\n        },\n        formatToggle: function () {\n            return 'Tukar';\n        },\n        formatColumns: function () {\n            return 'Lajur';\n        },\n        formatAllRows: function () {\n            return 'Semua';\n        }\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['ms-MY']);\n\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/locale/bootstrap-table-nb-NO.js":"/**\n * Bootstrap Table norwegian translation\n * Author: Jim Nordbø, jim@nordb.no\n */\n(function ($) {\n    'use strict';\n\n    $.fn.bootstrapTable.locales['nb-NO'] = {\n        formatLoadingMessage: function () {\n            return 'Oppdaterer, vennligst vent...';\n        },\n        formatRecordsPerPage: function (pageNumber) {\n            return pageNumber + ' poster pr side';\n        },\n        formatShowingRows: function (pageFrom, pageTo, totalRows) {\n            return 'Viser ' + pageFrom + ' til ' + pageTo + ' av ' + totalRows + ' rekker';\n        },\n        formatSearch: function () {\n            return 'Søk';\n        },\n        formatNoMatches: function () {\n            return 'Ingen poster funnet';\n        },\n        formatRefresh: function () {\n            return 'Oppdater';\n        },\n        formatToggle: function () {\n            return 'Endre';\n        },\n        formatColumns: function () {\n            return 'Kolonner';\n        }\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['nb-NO']);\n\n})(jQuery);","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/locale/bootstrap-table-nl-NL.js":"/**\n * Bootstrap Table Dutch translation\n * Author: Your Name <info@a2hankes.nl>\n */\n(function($) {\n    'use strict';\n\n    $.fn.bootstrapTable.locales['nl-NL'] = {\n        formatLoadingMessage: function() {\n            return 'Laden, even geduld...';\n        },\n        formatRecordsPerPage: function(pageNumber) {\n            return pageNumber + ' records per pagina';\n        },\n        formatShowingRows: function(pageFrom, pageTo, totalRows) {\n            return 'Toon ' + pageFrom + ' tot ' + pageTo + ' van ' + totalRows + ' record' + ((totalRows > 1) ? 's' : '');\n        },\n        formatDetailPagination: function(totalRows) {\n            return 'Toon ' + totalRows + ' record' + ((totalRows > 1) ? 's' : '');\n        },\n        formatSearch: function() {\n            return 'Zoeken';\n        },\n        formatNoMatches: function() {\n            return 'Geen resultaten gevonden';\n        },\n        formatRefresh: function() {\n            return 'Vernieuwen';\n        },\n        formatToggle: function() {\n            return 'Omschakelen';\n        },\n        formatColumns: function() {\n            return 'Kolommen';\n        },\n        formatAllRows: function() {\n            return 'Alle';\n        },\n        formatPaginationSwitch: function() {\n            return 'Verberg/Toon paginatie';\n        },\n        formatExport: function() {\n            return 'Exporteer data';\n        },\n        formatClearFilters: function() {\n            return 'Verwijder filters';\n        }\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['nl-NL']);\n\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/locale/bootstrap-table-pl-PL.js":"/**\n * Bootstrap Table Polish translation\n * Author: zergu <michal.zagdan @ gmail com>\n */\n(function ($) {\n    'use strict';\n\n    $.fn.bootstrapTable.locales['pl-PL'] = {\n        formatLoadingMessage: function () {\n            return 'Ładowanie, proszę czekać...';\n        },\n        formatRecordsPerPage: function (pageNumber) {\n            return pageNumber + ' rekordów na stronę';\n        },\n        formatShowingRows: function (pageFrom, pageTo, totalRows) {\n            return 'Wyświetlanie rekordów od ' + pageFrom + ' do ' + pageTo + ' z ' + totalRows;\n        },\n        formatSearch: function () {\n            return 'Szukaj';\n        },\n        formatNoMatches: function () {\n            return 'Niestety, nic nie znaleziono';\n        },\n        formatRefresh: function () {\n            return 'Odśwież';\n        },\n        formatToggle: function () {\n            return 'Przełącz';\n        },\n        formatColumns: function () {\n            return 'Kolumny';\n        }\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['pl-PL']);\n\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/locale/bootstrap-table-pt-BR.js":"/**\n * Bootstrap Table Brazilian Portuguese Translation\n * Author: Eduardo Cerqueira<egcerqueira@gmail.com>\n * Update: João Mello<jmello@hotmail.com.br>\n */\n(function ($) {\n    'use strict';\n\n    $.fn.bootstrapTable.locales['pt-BR'] = {\n        formatLoadingMessage: function () {\n            return 'Carregando, aguarde...';\n        },\n        formatRecordsPerPage: function (pageNumber) {\n            return pageNumber + ' registros por página';\n        },\n        formatShowingRows: function (pageFrom, pageTo, totalRows) {\n            return 'Exibindo ' + pageFrom + ' até ' + pageTo + ' de ' + totalRows + ' linhas';\n        },\n        formatSearch: function () { \n            return 'Pesquisar';\n        },\n        formatRefresh: function () { \n            return 'Recarregar';\n        },\n        formatToggle: function () { \n            return 'Alternar';\n        },\n        formatColumns: function () { \n            return 'Colunas';\n        },\n        formatPaginationSwitch: function () { \n            return 'Ocultar/Exibir paginação';\n        },\n        formatNoMatches: function () {\n            return 'Nenhum registro encontrado';\n        }\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['pt-BR']);\n\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/locale/bootstrap-table-pt-PT.js":"/**\n * Bootstrap Table Portuguese Portugal Translation\n * Author: Burnspirit<burnspirit@gmail.com>\n */\n(function ($) {\n    'use strict';\n\n    $.fn.bootstrapTable.locales['pt-PT'] = {\n        formatLoadingMessage: function () {\n            return 'A carregar, por favor aguarde...';\n        },\n        formatRecordsPerPage: function (pageNumber) {\n            return pageNumber + ' registos por p&aacute;gina';\n        },\n        formatShowingRows: function (pageFrom, pageTo, totalRows) {\n            return 'A mostrar ' + pageFrom + ' at&eacute; ' + pageTo + ' de ' + totalRows + ' linhas';\n        },\n        formatSearch: function () {\n            return 'Pesquisa';\n        },\n        formatNoMatches: function () {\n            return 'Nenhum registo encontrado';\n        },\n        formatPaginationSwitch: function () {\n            return 'Esconder/Mostrar pagina&ccedil&atilde;o';\n        },\n        formatRefresh: function () {\n            return 'Atualizar';\n        },\n        formatToggle: function () {\n            return 'Alternar';\n        },\n        formatColumns: function () {\n            return 'Colunas';\n        },\n        formatAllRows: function () {\n            return 'Tudo';\n        }\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['pt-PT']);\n\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/locale/bootstrap-table-ro-RO.js":"/**\n * Bootstrap Table Romanian translation\n * Author: cristake <cristianiosif@me.com>\n */\n(function ($) {\n    'use strict';\n\n    $.fn.bootstrapTable.locales['ro-RO'] = {\n        formatLoadingMessage: function () {\n            return 'Se incarca, va rugam asteptati...';\n        },\n        formatRecordsPerPage: function (pageNumber) {\n            return pageNumber + ' inregistrari pe pagina';\n        },\n        formatShowingRows: function (pageFrom, pageTo, totalRows) {\n            return 'Arata de la ' + pageFrom + ' pana la ' + pageTo + ' din ' + totalRows + ' randuri';\n        },\n        formatSearch: function () {\n            return 'Cauta';\n        },\n        formatNoMatches: function () {\n            return 'Nu au fost gasite inregistrari';\n        },\n        formatPaginationSwitch: function () {\n            return 'Ascunde/Arata paginatia';\n        },\n        formatRefresh: function () {\n            return 'Reincarca';\n        },\n        formatToggle: function () {\n            return 'Comuta';\n        },\n        formatColumns: function () {\n            return 'Coloane';\n        },\n        formatAllRows: function () {\n            return 'Toate';\n        }\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['ro-RO']);\n\n})(jQuery);","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/locale/bootstrap-table-ru-RU.js":"/**\n * Bootstrap Table Russian translation\n * Author: Dunaevsky Maxim <dunmaksim@yandex.ru>\n */\n(function ($) {\n    'use strict';\n    $.fn.bootstrapTable.locales['ru-RU'] = {\n        formatLoadingMessage: function () {\n            return 'Пожалуйста, подождите, идёт загрузка...';\n        },\n        formatRecordsPerPage: function (pageNumber) {\n            return pageNumber + ' записей на страницу';\n        },\n        formatShowingRows: function (pageFrom, pageTo, totalRows) {\n            return 'Записи с ' + pageFrom + ' по ' + pageTo + ' из ' + totalRows;\n        },\n        formatSearch: function () {\n            return 'Поиск';\n        },\n        formatNoMatches: function () {\n            return 'Ничего не найдено';\n        },\n        formatRefresh: function () {\n            return 'Обновить';\n        },\n        formatToggle: function () {\n            return 'Переключить';\n        },\n        formatColumns: function () {\n            return 'Колонки';\n        },\n        formatClearFilters: function () {\n            return 'Очистить фильтры';\n        },\n        formatMultipleSort: function () {\n            return 'Множественная сортировка';\n        },\n        formatAddLevel: function () {\n            return 'Добавить уровень';\n        },\n        formatDeleteLevel: function () {\n            return 'Удалить уровень';\n        },\n        formatColumn: function () {\n            return 'Колонка';\n        },\n        formatOrder: function () {\n            return 'Порядок';\n        },\n        formatSortBy: function () {\n            return 'Сортировать по';\n        },\n        formatThenBy: function () {\n            return 'затем по';\n        },\n        formatSort: function () {\n            return 'Сортировать';\n        },\n        formatCancel: function () {\n            return 'Отмена';\n        },\n        formatDuplicateAlertTitle: function () {\n            return 'Дублирование колонок!';\n        },\n        formatDuplicateAlertDescription: function () {\n            return 'Удалите, пожалуйста, дублирующую колонку, или замените ее на другую.';\n        }\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['ru-RU']);\n\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/locale/bootstrap-table-sk-SK.js":"/**\n * Bootstrap Table Slovak translation\n * Author: Jozef Dúc<jozef.d13@gmail.com>\n */\n(function ($) {\n    'use strict';\n\n    $.fn.bootstrapTable.locales['sk-SK'] = {\n        formatLoadingMessage: function () {\n            return 'Prosím čakajte ...';\n        },\n        formatRecordsPerPage: function (pageNumber) {\n            return pageNumber + ' záznamov na stranu';\n        },\n        formatShowingRows: function (pageFrom, pageTo, totalRows) {\n            return 'Zobrazená ' + pageFrom + '. - ' + pageTo + '. položka z celkových ' + totalRows;\n        },\n        formatSearch: function () {\n            return 'Vyhľadávanie';\n        },\n        formatNoMatches: function () {\n            return 'Nenájdená žiadna vyhovujúca položka';\n        },\n        formatRefresh: function () {\n            return 'Obnoviť';\n        },\n        formatToggle: function () {\n            return 'Prepni';\n        },\n        formatColumns: function () {\n            return 'Stĺpce';\n        }\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['sk-SK']);\n\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/locale/bootstrap-table-sv-SE.js":"/**\n * Bootstrap Table Swedish translation\n * Author: C Bratt <bratt@inix.se>\n */\n(function ($) {\n    'use strict';\n\n    $.fn.bootstrapTable.locales['sv-SE'] = {\n        formatLoadingMessage: function () {\n            return 'Laddar, vänligen vänta...';\n        },\n        formatRecordsPerPage: function (pageNumber) {\n            return pageNumber + ' rader per sida';\n        },\n        formatShowingRows: function (pageFrom, pageTo, totalRows) {\n            return 'Visa ' + pageFrom + ' till ' + pageTo + ' av ' + totalRows + ' rader';\n        },\n        formatSearch: function () {\n            return 'Sök';\n        },\n        formatNoMatches: function () {\n            return 'Inga matchande resultat funna.';\n        },\n        formatRefresh: function () {\n            return 'Uppdatera';\n        },\n        formatToggle: function () {\n            return 'Skifta';\n        },\n        formatColumns: function () {\n            return 'kolumn';\n        }\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['sv-SE']);\n\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/locale/bootstrap-table-th-TH.js":"/**\n * Bootstrap Table Thai translation\n * Author: Monchai S.<monchais@gmail.com>\n */\n(function ($) {\n    'use strict';\n\n    $.fn.bootstrapTable.locales['th-TH'] = {\n        formatLoadingMessage: function () {\n            return 'กำลังโหลดข้อมูล, กรุณารอสักครู่...';\n        },\n        formatRecordsPerPage: function (pageNumber) {\n            return pageNumber + ' รายการต่อหน้า';\n        },\n        formatShowingRows: function (pageFrom, pageTo, totalRows) {\n            return 'รายการที่ ' + pageFrom + ' ถึง ' + pageTo + ' จากทั้งหมด ' + totalRows + ' รายการ';\n        },\n        formatSearch: function () {\n            return 'ค้นหา';\n        },\n        formatNoMatches: function () {\n            return 'ไม่พบรายการที่ค้นหา !';\n        },\n        formatRefresh: function () {\n            return 'รีเฟรส';\n        },\n        formatToggle: function () {\n            return 'สลับมุมมอง';\n        },\n        formatColumns: function () {\n            return 'คอลัมน์';\n        }\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['th-TH']);\n\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/locale/bootstrap-table-tr-TR.js":"/**\n * Bootstrap Table Turkish translation\n * Author: Emin Şen\n * Author: Sercan Cakir <srcnckr@gmail.com>\n */\n(function ($) {\n    'use strict';\n\n    $.fn.bootstrapTable.locales['tr-TR'] = {\n        formatLoadingMessage: function () {\n            return 'Yükleniyor, lütfen bekleyin...';\n        },\n        formatRecordsPerPage: function (pageNumber) {\n            return 'Sayfa başına ' + pageNumber + ' kayıt.';\n        },\n        formatShowingRows: function (pageFrom, pageTo, totalRows) {\n            return totalRows + ' kayıttan ' + pageFrom + '-' + pageTo + ' arası gösteriliyor.';\n        },\n        formatSearch: function () {\n            return 'Ara';\n        },\n        formatNoMatches: function () {\n            return 'Eşleşen kayıt bulunamadı.';\n        },\n        formatRefresh: function () {\n            return 'Yenile';\n        },\n        formatToggle: function () {\n            return 'Değiştir';\n        },\n        formatColumns: function () {\n            return 'Sütunlar';\n        },\n        formatAllRows: function () {\n            return 'Tüm Satırlar';\n        }\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['tr-TR']);\n\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/locale/bootstrap-table-uk-UA.js":"/**\n * Bootstrap Table Ukrainian translation\n * Author: Vitaliy Timchenko <vitaliy.timchenko@gmail.com>\n */\n (function ($) {\n    'use strict';\n    \n    $.fn.bootstrapTable.locales['uk-UA'] = {\n        formatLoadingMessage: function () {\n            return 'Завантаження, будь ласка, зачекайте...';\n        },\n        formatRecordsPerPage: function (pageNumber) {\n            return pageNumber + ' записів на сторінку';\n        },\n        formatShowingRows: function (pageFrom, pageTo, totalRows) {\n            return 'Показано з ' + pageFrom + ' по ' + pageTo + '. Всього: ' + totalRows;\n        },\n        formatSearch: function () {\n            return 'Пошук';\n        },\n        formatNoMatches: function () {\n            return 'Не знайдено жодного запису';\n        },\n        formatRefresh: function () {\n            return 'Оновити';\n        },\n        formatToggle: function () {\n            return 'Змінити';\n        },\n        formatColumns: function () {\n            return 'Стовпці';\n        },\n        formatClearFilters: function () {\n            return 'Очистити фільтри';\n        },\n        formatMultipleSort: function () {\n            return 'Сортування за кількома стовпцями';\n        },\n        formatAddLevel: function () {\n            return 'Додати рівень';\n        },\n        formatDeleteLevel: function () {\n            return 'Видалити рівень';\n        },\n        formatColumn: function () {\n            return 'Стовпець';\n        },\n        formatOrder: function () {\n            return 'Порядок';\n        },\n        formatSortBy: function () {\n            return 'Сортувати за';\n        },\n        formatThenBy: function () {\n            return 'потім за';\n        },\n        formatSort: function () {\n            return 'Сортувати';\n        },\n        formatCancel: function () {\n            return 'Скасувати';\n        },\n        formatDuplicateAlertTitle: function () {\n            return 'Дублювання стовпців!';\n        },\n        formatDuplicateAlertDescription: function () {\n            return 'Видаліть, будь ласка, дублюючий стовпець, або замініть його на інший.';\n        }\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['uk-UA']);\n\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/locale/bootstrap-table-ur-PK.js":"/**\n * Bootstrap Table Urdu translation\n * Author: Malik <me@malikrizwan.com>\n */\n(function ($) {\n    'use strict';\n\n    $.fn.bootstrapTable.locales['ur-PK'] = {\n        formatLoadingMessage: function () {\n            return 'براۓ مہربانی انتظار کیجئے';\n        },\n        formatRecordsPerPage: function (pageNumber) {\n            return pageNumber + ' ریکارڈز فی صفہ ';\n        },\n        formatShowingRows: function (pageFrom, pageTo, totalRows) {\n            return 'دیکھیں ' + pageFrom + ' سے ' + pageTo + ' کے ' +  totalRows + 'ریکارڈز';\n        },\n        formatSearch: function () {\n            return 'تلاش';\n        },\n        formatNoMatches: function () {\n            return 'کوئی ریکارڈ نہیں ملا';\n        },\n        formatRefresh: function () {\n            return 'تازہ کریں';\n        },\n        formatToggle: function () {\n            return 'تبدیل کریں';\n        },\n        formatColumns: function () {\n            return 'کالم';\n        }\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['ur-PK']);\n\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/locale/bootstrap-table-uz-Latn-UZ.js":"/**\n * Bootstrap Table Uzbek translation\n * Author: Nabijon Masharipov <mnabijonz@gmail.com>\n */\n(function ($) {\n    'use strict';\n\n    $.fn.bootstrapTable.locales['uz-Latn-UZ'] = {\n        formatLoadingMessage: function () {\n            return 'Yuklanyapti, iltimos kuting...';\n        },\n        formatRecordsPerPage: function (pageNumber) {\n            return pageNumber + ' qator har sahifada';\n        },\n        formatShowingRows: function (pageFrom, pageTo, totalRows) {\n            return 'Ko\\'rsatypati ' + pageFrom + ' dan ' + pageTo + ' gacha ' + totalRows + ' qatorlarni';\n        },\n        formatSearch: function () {\n            return 'Qidirish';\n        },\n        formatNoMatches: function () {\n            return 'Hech narsa topilmadi';\n        },\n        formatPaginationSwitch: function () {\n            return 'Sahifalashni yashirish/ko\\'rsatish';\n        },\n        formatRefresh: function () {\n            return 'Yangilash';\n        },\n        formatToggle: function () {\n            return 'Ko\\'rinish';\n        },\n        formatColumns: function () {\n            return 'Ustunlar';\n        },\n        formatAllRows: function () {\n            return 'Hammasi';\n        },\n        formatExport: function () {\n            return 'Eksport';\n        },\n        formatClearFilters: function () {\n            return 'Filtrlarni tozalash';\n        }\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['uz-Latn-UZ']);\n\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/locale/bootstrap-table-vi-VN.js":"/**\n * Bootstrap Table Vietnamese translation\n * Author: Duc N. PHAM <pngduc@gmail.com>\n */\n(function ($) {\n    'use strict';\n\n    $.fn.bootstrapTable.locales['vi-VN'] = {\n        formatLoadingMessage: function () {\n            return 'Đang tải...';\n        },\n        formatRecordsPerPage: function (pageNumber) {\n            return pageNumber + ' bản ghi mỗi trang';\n        },\n        formatShowingRows: function (pageFrom, pageTo, totalRows) {\n            return 'Hiển thị từ trang ' + pageFrom + ' đến ' + pageTo + ' của ' + totalRows + ' bảng ghi';\n        },\n        formatSearch: function () {\n            return 'Tìm kiếm';\n        },\n        formatNoMatches: function () {\n            return 'Không có dữ liệu';\n        }\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['vi-VN']);\n\n})(jQuery);","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/locale/bootstrap-table-zh-CN.js":"/**\n * Bootstrap Table Chinese translation\n * Author: Zhixin Wen<wenzhixin2010@gmail.com>\n */\n(function ($) {\n    'use strict';\n\n    $.fn.bootstrapTable.locales['zh-CN'] = {\n        formatLoadingMessage: function () {\n            return '正在努力地加载数据中，请稍候……';\n        },\n        formatRecordsPerPage: function (pageNumber) {\n            return '每页显示 ' + pageNumber + ' 条记录';\n        },\n        formatShowingRows: function (pageFrom, pageTo, totalRows) {\n            return '显示第 ' + pageFrom + ' 到第 ' + pageTo + ' 条记录，总共 ' + totalRows + ' 条记录';\n        },\n        formatSearch: function () {\n            return '搜索';\n        },\n        formatNoMatches: function () {\n            return '没有找到匹配的记录';\n        },\n        formatPaginationSwitch: function () {\n            return '隐藏/显示分页';\n        },\n        formatRefresh: function () {\n            return '刷新';\n        },\n        formatToggle: function () {\n            return '切换';\n        },\n        formatColumns: function () {\n            return '列';\n        },\n        formatExport: function () {\n            return '导出数据';\n        },\n        formatClearFilters: function () {\n            return '清空过滤';\n        }\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['zh-CN']);\n\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/locale/bootstrap-table-zh-TW.js":"/**\n * Bootstrap Table Chinese translation\n * Author: Zhixin Wen<wenzhixin2010@gmail.com>\n */\n(function ($) {\n    'use strict';\n\n    $.fn.bootstrapTable.locales['zh-TW'] = {\n        formatLoadingMessage: function () {\n            return '正在努力地載入資料，請稍候……';\n        },\n        formatRecordsPerPage: function (pageNumber) {\n            return '每頁顯示 ' + pageNumber + ' 項記錄';\n        },\n        formatShowingRows: function (pageFrom, pageTo, totalRows) {\n            return '顯示第 ' + pageFrom + ' 到第 ' + pageTo + ' 項記錄，總共 ' + totalRows + ' 項記錄';\n        },\n        formatSearch: function () {\n            return '搜尋';\n        },\n        formatNoMatches: function () {\n            return '沒有找到符合的結果';\n        },\n        formatPaginationSwitch: function () {\n            return '隱藏/顯示分頁';\n        },\n        formatRefresh: function () {\n            return '重新整理';\n        },\n        formatToggle: function () {\n            return '切換';\n        },\n        formatColumns: function () {\n            return '列';\n        }\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['zh-TW']);\n\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/extensions/accent-neutralise/bootstrap-table-accent-neutralise.js":"/**\n * @author: Dennis Hernández\n * @webSite: http://djhvscf.github.io/Blog\n * @version: v1.0.0\n */\n\n!function ($) {\n\n    'use strict';\n\n    var diacriticsMap = {};\n    var defaultAccentsDiacritics = [\n        {'base':'A', 'letters':'\\u0041\\u24B6\\uFF21\\u00C0\\u00C1\\u00C2\\u1EA6\\u1EA4\\u1EAA\\u1EA8\\u00C3\\u0100\\u0102\\u1EB0\\u1EAE\\u1EB4\\u1EB2\\u0226\\u01E0\\u00C4\\u01DE\\u1EA2\\u00C5\\u01FA\\u01CD\\u0200\\u0202\\u1EA0\\u1EAC\\u1EB6\\u1E00\\u0104\\u023A\\u2C6F'},\n        {'base':'AA','letters':'\\uA732'},\n        {'base':'AE','letters':'\\u00C6\\u01FC\\u01E2'},\n        {'base':'AO','letters':'\\uA734'},\n        {'base':'AU','letters':'\\uA736'},\n        {'base':'AV','letters':'\\uA738\\uA73A'},\n        {'base':'AY','letters':'\\uA73C'},\n        {'base':'B', 'letters':'\\u0042\\u24B7\\uFF22\\u1E02\\u1E04\\u1E06\\u0243\\u0182\\u0181'},\n        {'base':'C', 'letters':'\\u0043\\u24B8\\uFF23\\u0106\\u0108\\u010A\\u010C\\u00C7\\u1E08\\u0187\\u023B\\uA73E'},\n        {'base':'D', 'letters':'\\u0044\\u24B9\\uFF24\\u1E0A\\u010E\\u1E0C\\u1E10\\u1E12\\u1E0E\\u0110\\u018B\\u018A\\u0189\\uA779'},\n        {'base':'DZ','letters':'\\u01F1\\u01C4'},\n        {'base':'Dz','letters':'\\u01F2\\u01C5'},\n        {'base':'E', 'letters':'\\u0045\\u24BA\\uFF25\\u00C8\\u00C9\\u00CA\\u1EC0\\u1EBE\\u1EC4\\u1EC2\\u1EBC\\u0112\\u1E14\\u1E16\\u0114\\u0116\\u00CB\\u1EBA\\u011A\\u0204\\u0206\\u1EB8\\u1EC6\\u0228\\u1E1C\\u0118\\u1E18\\u1E1A\\u0190\\u018E'},\n        {'base':'F', 'letters':'\\u0046\\u24BB\\uFF26\\u1E1E\\u0191\\uA77B'},\n        {'base':'G', 'letters':'\\u0047\\u24BC\\uFF27\\u01F4\\u011C\\u1E20\\u011E\\u0120\\u01E6\\u0122\\u01E4\\u0193\\uA7A0\\uA77D\\uA77E'},\n        {'base':'H', 'letters':'\\u0048\\u24BD\\uFF28\\u0124\\u1E22\\u1E26\\u021E\\u1E24\\u1E28\\u1E2A\\u0126\\u2C67\\u2C75\\uA78D'},\n        {'base':'I', 'letters':'\\u0049\\u24BE\\uFF29\\u00CC\\u00CD\\u00CE\\u0128\\u012A\\u012C\\u0130\\u00CF\\u1E2E\\u1EC8\\u01CF\\u0208\\u020A\\u1ECA\\u012E\\u1E2C\\u0197'},\n        {'base':'J', 'letters':'\\u004A\\u24BF\\uFF2A\\u0134\\u0248'},\n        {'base':'K', 'letters':'\\u004B\\u24C0\\uFF2B\\u1E30\\u01E8\\u1E32\\u0136\\u1E34\\u0198\\u2C69\\uA740\\uA742\\uA744\\uA7A2'},\n        {'base':'L', 'letters':'\\u004C\\u24C1\\uFF2C\\u013F\\u0139\\u013D\\u1E36\\u1E38\\u013B\\u1E3C\\u1E3A\\u0141\\u023D\\u2C62\\u2C60\\uA748\\uA746\\uA780'},\n        {'base':'LJ','letters':'\\u01C7'},\n        {'base':'Lj','letters':'\\u01C8'},\n        {'base':'M', 'letters':'\\u004D\\u24C2\\uFF2D\\u1E3E\\u1E40\\u1E42\\u2C6E\\u019C'},\n        {'base':'N', 'letters':'\\u004E\\u24C3\\uFF2E\\u01F8\\u0143\\u00D1\\u1E44\\u0147\\u1E46\\u0145\\u1E4A\\u1E48\\u0220\\u019D\\uA790\\uA7A4'},\n        {'base':'NJ','letters':'\\u01CA'},\n        {'base':'Nj','letters':'\\u01CB'},\n        {'base':'O', 'letters':'\\u004F\\u24C4\\uFF2F\\u00D2\\u00D3\\u00D4\\u1ED2\\u1ED0\\u1ED6\\u1ED4\\u00D5\\u1E4C\\u022C\\u1E4E\\u014C\\u1E50\\u1E52\\u014E\\u022E\\u0230\\u00D6\\u022A\\u1ECE\\u0150\\u01D1\\u020C\\u020E\\u01A0\\u1EDC\\u1EDA\\u1EE0\\u1EDE\\u1EE2\\u1ECC\\u1ED8\\u01EA\\u01EC\\u00D8\\u01FE\\u0186\\u019F\\uA74A\\uA74C'},\n        {'base':'OI','letters':'\\u01A2'},\n        {'base':'OO','letters':'\\uA74E'},\n        {'base':'OU','letters':'\\u0222'},\n        {'base':'OE','letters':'\\u008C\\u0152'},\n        {'base':'oe','letters':'\\u009C\\u0153'},\n        {'base':'P', 'letters':'\\u0050\\u24C5\\uFF30\\u1E54\\u1E56\\u01A4\\u2C63\\uA750\\uA752\\uA754'},\n        {'base':'Q', 'letters':'\\u0051\\u24C6\\uFF31\\uA756\\uA758\\u024A'},\n        {'base':'R', 'letters':'\\u0052\\u24C7\\uFF32\\u0154\\u1E58\\u0158\\u0210\\u0212\\u1E5A\\u1E5C\\u0156\\u1E5E\\u024C\\u2C64\\uA75A\\uA7A6\\uA782'},\n        {'base':'S', 'letters':'\\u0053\\u24C8\\uFF33\\u1E9E\\u015A\\u1E64\\u015C\\u1E60\\u0160\\u1E66\\u1E62\\u1E68\\u0218\\u015E\\u2C7E\\uA7A8\\uA784'},\n        {'base':'T', 'letters':'\\u0054\\u24C9\\uFF34\\u1E6A\\u0164\\u1E6C\\u021A\\u0162\\u1E70\\u1E6E\\u0166\\u01AC\\u01AE\\u023E\\uA786'},\n        {'base':'TZ','letters':'\\uA728'},\n        {'base':'U', 'letters':'\\u0055\\u24CA\\uFF35\\u00D9\\u00DA\\u00DB\\u0168\\u1E78\\u016A\\u1E7A\\u016C\\u00DC\\u01DB\\u01D7\\u01D5\\u01D9\\u1EE6\\u016E\\u0170\\u01D3\\u0214\\u0216\\u01AF\\u1EEA\\u1EE8\\u1EEE\\u1EEC\\u1EF0\\u1EE4\\u1E72\\u0172\\u1E76\\u1E74\\u0244'},\n        {'base':'V', 'letters':'\\u0056\\u24CB\\uFF36\\u1E7C\\u1E7E\\u01B2\\uA75E\\u0245'},\n        {'base':'VY','letters':'\\uA760'},\n        {'base':'W', 'letters':'\\u0057\\u24CC\\uFF37\\u1E80\\u1E82\\u0174\\u1E86\\u1E84\\u1E88\\u2C72'},\n        {'base':'X', 'letters':'\\u0058\\u24CD\\uFF38\\u1E8A\\u1E8C'},\n        {'base':'Y', 'letters':'\\u0059\\u24CE\\uFF39\\u1EF2\\u00DD\\u0176\\u1EF8\\u0232\\u1E8E\\u0178\\u1EF6\\u1EF4\\u01B3\\u024E\\u1EFE'},\n        {'base':'Z', 'letters':'\\u005A\\u24CF\\uFF3A\\u0179\\u1E90\\u017B\\u017D\\u1E92\\u1E94\\u01B5\\u0224\\u2C7F\\u2C6B\\uA762'},\n        {'base':'a', 'letters':'\\u0061\\u24D0\\uFF41\\u1E9A\\u00E0\\u00E1\\u00E2\\u1EA7\\u1EA5\\u1EAB\\u1EA9\\u00E3\\u0101\\u0103\\u1EB1\\u1EAF\\u1EB5\\u1EB3\\u0227\\u01E1\\u00E4\\u01DF\\u1EA3\\u00E5\\u01FB\\u01CE\\u0201\\u0203\\u1EA1\\u1EAD\\u1EB7\\u1E01\\u0105\\u2C65\\u0250'},\n        {'base':'aa','letters':'\\uA733'},\n        {'base':'ae','letters':'\\u00E6\\u01FD\\u01E3'},\n        {'base':'ao','letters':'\\uA735'},\n        {'base':'au','letters':'\\uA737'},\n        {'base':'av','letters':'\\uA739\\uA73B'},\n        {'base':'ay','letters':'\\uA73D'},\n        {'base':'b', 'letters':'\\u0062\\u24D1\\uFF42\\u1E03\\u1E05\\u1E07\\u0180\\u0183\\u0253'},\n        {'base':'c', 'letters':'\\u0063\\u24D2\\uFF43\\u0107\\u0109\\u010B\\u010D\\u00E7\\u1E09\\u0188\\u023C\\uA73F\\u2184'},\n        {'base':'d', 'letters':'\\u0064\\u24D3\\uFF44\\u1E0B\\u010F\\u1E0D\\u1E11\\u1E13\\u1E0F\\u0111\\u018C\\u0256\\u0257\\uA77A'},\n        {'base':'dz','letters':'\\u01F3\\u01C6'},\n        {'base':'e', 'letters':'\\u0065\\u24D4\\uFF45\\u00E8\\u00E9\\u00EA\\u1EC1\\u1EBF\\u1EC5\\u1EC3\\u1EBD\\u0113\\u1E15\\u1E17\\u0115\\u0117\\u00EB\\u1EBB\\u011B\\u0205\\u0207\\u1EB9\\u1EC7\\u0229\\u1E1D\\u0119\\u1E19\\u1E1B\\u0247\\u025B\\u01DD'},\n        {'base':'f', 'letters':'\\u0066\\u24D5\\uFF46\\u1E1F\\u0192\\uA77C'},\n        {'base':'g', 'letters':'\\u0067\\u24D6\\uFF47\\u01F5\\u011D\\u1E21\\u011F\\u0121\\u01E7\\u0123\\u01E5\\u0260\\uA7A1\\u1D79\\uA77F'},\n        {'base':'h', 'letters':'\\u0068\\u24D7\\uFF48\\u0125\\u1E23\\u1E27\\u021F\\u1E25\\u1E29\\u1E2B\\u1E96\\u0127\\u2C68\\u2C76\\u0265'},\n        {'base':'hv','letters':'\\u0195'},\n        {'base':'i', 'letters':'\\u0069\\u24D8\\uFF49\\u00EC\\u00ED\\u00EE\\u0129\\u012B\\u012D\\u00EF\\u1E2F\\u1EC9\\u01D0\\u0209\\u020B\\u1ECB\\u012F\\u1E2D\\u0268\\u0131'},\n        {'base':'j', 'letters':'\\u006A\\u24D9\\uFF4A\\u0135\\u01F0\\u0249'},\n        {'base':'k', 'letters':'\\u006B\\u24DA\\uFF4B\\u1E31\\u01E9\\u1E33\\u0137\\u1E35\\u0199\\u2C6A\\uA741\\uA743\\uA745\\uA7A3'},\n        {'base':'l', 'letters':'\\u006C\\u24DB\\uFF4C\\u0140\\u013A\\u013E\\u1E37\\u1E39\\u013C\\u1E3D\\u1E3B\\u017F\\u0142\\u019A\\u026B\\u2C61\\uA749\\uA781\\uA747'},\n        {'base':'lj','letters':'\\u01C9'},\n        {'base':'m', 'letters':'\\u006D\\u24DC\\uFF4D\\u1E3F\\u1E41\\u1E43\\u0271\\u026F'},\n        {'base':'n', 'letters':'\\u006E\\u24DD\\uFF4E\\u01F9\\u0144\\u00F1\\u1E45\\u0148\\u1E47\\u0146\\u1E4B\\u1E49\\u019E\\u0272\\u0149\\uA791\\uA7A5'},\n        {'base':'nj','letters':'\\u01CC'},\n        {'base':'o', 'letters':'\\u006F\\u24DE\\uFF4F\\u00F2\\u00F3\\u00F4\\u1ED3\\u1ED1\\u1ED7\\u1ED5\\u00F5\\u1E4D\\u022D\\u1E4F\\u014D\\u1E51\\u1E53\\u014F\\u022F\\u0231\\u00F6\\u022B\\u1ECF\\u0151\\u01D2\\u020D\\u020F\\u01A1\\u1EDD\\u1EDB\\u1EE1\\u1EDF\\u1EE3\\u1ECD\\u1ED9\\u01EB\\u01ED\\u00F8\\u01FF\\u0254\\uA74B\\uA74D\\u0275'},\n        {'base':'oi','letters':'\\u01A3'},\n        {'base':'ou','letters':'\\u0223'},\n        {'base':'oo','letters':'\\uA74F'},\n        {'base':'p','letters':'\\u0070\\u24DF\\uFF50\\u1E55\\u1E57\\u01A5\\u1D7D\\uA751\\uA753\\uA755'},\n        {'base':'q','letters':'\\u0071\\u24E0\\uFF51\\u024B\\uA757\\uA759'},\n        {'base':'r','letters':'\\u0072\\u24E1\\uFF52\\u0155\\u1E59\\u0159\\u0211\\u0213\\u1E5B\\u1E5D\\u0157\\u1E5F\\u024D\\u027D\\uA75B\\uA7A7\\uA783'},\n        {'base':'s','letters':'\\u0073\\u24E2\\uFF53\\u00DF\\u015B\\u1E65\\u015D\\u1E61\\u0161\\u1E67\\u1E63\\u1E69\\u0219\\u015F\\u023F\\uA7A9\\uA785\\u1E9B'},\n        {'base':'t','letters':'\\u0074\\u24E3\\uFF54\\u1E6B\\u1E97\\u0165\\u1E6D\\u021B\\u0163\\u1E71\\u1E6F\\u0167\\u01AD\\u0288\\u2C66\\uA787'},\n        {'base':'tz','letters':'\\uA729'},\n        {'base':'u','letters': '\\u0075\\u24E4\\uFF55\\u00F9\\u00FA\\u00FB\\u0169\\u1E79\\u016B\\u1E7B\\u016D\\u00FC\\u01DC\\u01D8\\u01D6\\u01DA\\u1EE7\\u016F\\u0171\\u01D4\\u0215\\u0217\\u01B0\\u1EEB\\u1EE9\\u1EEF\\u1EED\\u1EF1\\u1EE5\\u1E73\\u0173\\u1E77\\u1E75\\u0289'},\n        {'base':'v','letters':'\\u0076\\u24E5\\uFF56\\u1E7D\\u1E7F\\u028B\\uA75F\\u028C'},\n        {'base':'vy','letters':'\\uA761'},\n        {'base':'w','letters':'\\u0077\\u24E6\\uFF57\\u1E81\\u1E83\\u0175\\u1E87\\u1E85\\u1E98\\u1E89\\u2C73'},\n        {'base':'x','letters':'\\u0078\\u24E7\\uFF58\\u1E8B\\u1E8D'},\n        {'base':'y','letters':'\\u0079\\u24E8\\uFF59\\u1EF3\\u00FD\\u0177\\u1EF9\\u0233\\u1E8F\\u00FF\\u1EF7\\u1E99\\u1EF5\\u01B4\\u024F\\u1EFF'},\n        {'base':'z','letters':'\\u007A\\u24E9\\uFF5A\\u017A\\u1E91\\u017C\\u017E\\u1E93\\u1E95\\u01B6\\u0225\\u0240\\u2C6C\\uA763'}\n    ];\n\n    var initNeutraliser = function () {\n        for (var i=0; i < defaultAccentsDiacritics.length; i++){\n            var letters = defaultAccentsDiacritics[i].letters;\n            for (var j=0; j < letters.length ; j++){\n                diacriticsMap[letters[j]] = defaultAccentsDiacritics[i].base;\n            }\n        }\n    };\n\n    var removeDiacritics = function (str) {\n        return str.replace(/[^\\u0000-\\u007E]/g, function(a){\n            return diacriticsMap[a] || a;\n        });\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, {\n        searchAccentNeutralise: false\n    });\n\n    var BootstrapTable = $.fn.bootstrapTable.Constructor,\n        _init = BootstrapTable.prototype.init,\n        _initSearch = BootstrapTable.prototype.initSearch;\n\n    BootstrapTable.prototype.init = function () {\n        if (this.options.searchAccentNeutralise) {\n            initNeutraliser();\n        }\n        _init.apply(this, Array.prototype.slice.apply(arguments));\n    };\n\n    BootstrapTable.prototype.initSearch = function () {\n        var that = this;\n\n        if (this.options.sidePagination !== 'server') {\n            var s = this.searchText && this.searchText.toLowerCase();\n            var f = $.isEmptyObject(this.filterColumns) ? null : this.filterColumns;\n\n            // Check filter\n            this.data = f ? $.grep(this.options.data, function (item, i) {\n                for (var key in f) {\n                    if (item[key] !== f[key]) {\n                        return false;\n                    }\n                }\n                return true;\n            }) : this.options.data;\n\n            this.data = s ? $.grep(this.data, function (item, i) {\n                for (var key in item) {\n                    key = $.isNumeric(key) ? parseInt(key, 10) : key;\n                    var value = item[key],\n                        column = that.columns[$.fn.bootstrapTable.utils.getFieldIndex(that.columns, key)],\n                        j = $.inArray(key, that.header.fields);\n\n                    if (column && column.searchFormatter) {\n                        value = $.fn.bootstrapTable.utils.calculateObjectValue(column,\n                            that.header.formatters[j], [value, item, i], value);\n                    }\n\n                    var index = $.inArray(key, that.header.fields);\n                    if (index !== -1 && that.header.searchables[index] && (typeof value === 'string' || typeof value === 'number')) {\n                        if (that.options.searchAccentNeutralise) {\n                            value = removeDiacritics(value);\n                            s = removeDiacritics(s);\n                        }\n                        if (that.options.strictSearch) {\n                            if ((value + '').toLowerCase() === s) {\n                                return true;\n                            }\n                        } else {\n                            if ((value + '').toLowerCase().indexOf(s) !== -1) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n                return false;\n            }) : this.data;\n        }\n    };\n\n}(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/extensions/angular/bootstrap-table-angular.js":"// JavaScript source code\n(function () {\n  if (typeof angular === 'undefined') {\n    return;\n  }\n  angular.module('bsTable', [])\n    .constant('uiBsTables', {bsTables: {}})\n    .directive('bsTableControl', ['uiBsTables', function (uiBsTables) {\n    var CONTAINER_SELECTOR = '.bootstrap-table';\n    var SCROLLABLE_SELECTOR = '.fixed-table-body';\n    var SEARCH_SELECTOR = '.search input';\n    var bsTables = uiBsTables.bsTables;\n    function getBsTable (el) {\n      var result;\n      $.each(bsTables, function (id, bsTable) {\n        if (!bsTable.$el.closest(CONTAINER_SELECTOR).has(el).length) return;\n        result = bsTable;\n        return true;\n      });\n      return result;\n    }\n\n    $(window).resize(function () {\n      $.each(bsTables, function (id, bsTable) {\n        bsTable.$el.bootstrapTable('resetView');\n      });\n    });\n    function onScroll () {\n      var bsTable = this;\n      var state = bsTable.$s.bsTableControl.state;\n      bsTable.$s.$applyAsync(function () {\n        state.scroll = bsTable.$el.bootstrapTable('getScrollPosition');\n      });\n    }\n    $(document)\n      .on('post-header.bs.table', CONTAINER_SELECTOR+' table', function (evt) { // bootstrap-table calls .off('scroll') in initHeader so reattach here\n        var bsTable = getBsTable(evt.target);\n        if (!bsTable) return;\n        bsTable.$el\n          .closest(CONTAINER_SELECTOR)\n          .find(SCROLLABLE_SELECTOR)\n          .on('scroll', onScroll.bind(bsTable));\n      })\n      .on('sort.bs.table', CONTAINER_SELECTOR+' table', function (evt, sortName, sortOrder) {\n        var bsTable = getBsTable(evt.target);\n        if (!bsTable) return;\n        var state = bsTable.$s.bsTableControl.state;\n        bsTable.$s.$applyAsync(function () {\n          state.sortName = sortName;\n          state.sortOrder = sortOrder;\n        });\n      })\n      .on('page-change.bs.table', CONTAINER_SELECTOR+' table', function (evt, pageNumber, pageSize) {\n        var bsTable = getBsTable(evt.target);\n        if (!bsTable) return;\n        var state = bsTable.$s.bsTableControl.state;\n        bsTable.$s.$applyAsync(function () {\n          state.pageNumber = pageNumber;\n          state.pageSize = pageSize;\n        });\n      })\n      .on('search.bs.table', CONTAINER_SELECTOR+' table', function (evt, searchText) {\n        var bsTable = getBsTable(evt.target);\n        if (!bsTable) return;\n        var state = bsTable.$s.bsTableControl.state;\n        bsTable.$s.$applyAsync(function () {\n          state.searchText = searchText;\n        });\n      })\n      .on('focus blur', CONTAINER_SELECTOR+' '+SEARCH_SELECTOR, function (evt) {\n        var bsTable = getBsTable(evt.target);\n        if (!bsTable) return;\n        var state = bsTable.$s.bsTableControl.state;\n        bsTable.$s.$applyAsync(function () {\n          state.searchHasFocus = $(evt.target).is(':focus');\n        });\n      });\n\n    return {\n      restrict: 'EA',\n      scope: {bsTableControl: '='},\n      link: function ($s, $el) {\n        var bsTable = bsTables[$s.$id] = {$s: $s, $el: $el};\n        $s.instantiated = false;\n        $s.$watch('bsTableControl.options', function (options) {\n          if (!options) options = $s.bsTableControl.options = {};\n          var state = $s.bsTableControl.state || {};\n\n          if ($s.instantiated) $el.bootstrapTable('destroy');\n          $el.bootstrapTable(angular.extend(angular.copy(options), state));\n          $s.instantiated = true;\n\n          // Update the UI for state that isn't settable via options\n          if ('scroll' in state) $el.bootstrapTable('scrollTo', state.scroll);\n          if ('searchHasFocus' in state) $el.closest(CONTAINER_SELECTOR).find(SEARCH_SELECTOR).focus(); // $el gets detached so have to recompute whole chain\n        }, true);\n        $s.$watch('bsTableControl.state', function (state) {\n          if (!state) state = $s.bsTableControl.state = {};\n          $el.trigger('directive-updated.bs.table', [state]);\n        }, true);\n        $s.$on('$destroy', function () {\n          delete bsTables[$s.$id];\n        });\n      }\n    };\n  }])\n})();\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/extensions/auto-refresh/bootstrap-table-auto-refresh.js":"/**\n * @author: Alec Fenichel\n * @webSite: https://fenichelar.com\n * @version: v1.0.0\n */\n\n(function ($) {\n\n  'use strict';\n\n  $.extend($.fn.bootstrapTable.defaults, {\n    autoRefresh: false,\n    autoRefreshInterval: 60,\n    autoRefreshSilent: true,\n    autoRefreshStatus: true,\n    autoRefreshFunction: null\n  });\n\n  $.extend($.fn.bootstrapTable.defaults.icons, {\n    autoRefresh: 'glyphicon-time icon-time'\n  });\n\n  $.extend($.fn.bootstrapTable.locales, {\n    formatAutoRefresh: function() {\n      return 'Auto Refresh';\n    }\n  });\n\n  $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales);\n\n  var BootstrapTable = $.fn.bootstrapTable.Constructor;\n  var _init = BootstrapTable.prototype.init;\n  var _initToolbar = BootstrapTable.prototype.initToolbar;\n  var sprintf = $.fn.bootstrapTable.utils.sprintf;\n\n  BootstrapTable.prototype.init = function () {\n    _init.apply(this, Array.prototype.slice.apply(arguments));\n\n    if (this.options.autoRefresh && this.options.autoRefreshStatus) {\n      var that = this;\n      this.options.autoRefreshFunction = setInterval(function () {\n        that.refresh({silent: that.options.autoRefreshSilent});\n      }, this.options.autoRefreshInterval*1000);\n    }\n  };\n\n  BootstrapTable.prototype.initToolbar = function() {\n    _initToolbar.apply(this, Array.prototype.slice.apply(arguments));\n\n    if (this.options.autoRefresh) {\n      var $btnGroup = this.$toolbar.find('>.btn-group');\n      var $btnAutoRefresh = $btnGroup.find('.auto-refresh');\n\n      if (!$btnAutoRefresh.length) {\n        $btnAutoRefresh = $([\n          sprintf('<button class=\"btn btn-default auto-refresh %s\" ', this.options.autoRefreshStatus ? 'enabled' : ''),\n          'type=\"button\" ',\n          sprintf('title=\"%s\">', this.options.formatAutoRefresh()),\n          sprintf('<i class=\"%s %s\"></i>', this.options.iconsPrefix, this.options.icons.autoRefresh),\n          '</button>'\n        ].join('')).appendTo($btnGroup);\n\n        $btnAutoRefresh.on('click', $.proxy(this.toggleAutoRefresh, this));\n      }\n    }\n  };\n\n  BootstrapTable.prototype.toggleAutoRefresh = function() {\n    if (this.options.autoRefresh) {\n      if (this.options.autoRefreshStatus) {\n        clearInterval(this.options.autoRefreshFunction);\n        this.$toolbar.find('>.btn-group').find('.auto-refresh').removeClass('enabled');\n      } else {\n        var that = this;\n        this.options.autoRefreshFunction = setInterval(function () {\n          that.refresh({silent: that.options.autoRefreshSilent});\n        }, this.options.autoRefreshInterval*1000);\n        this.$toolbar.find('>.btn-group').find('.auto-refresh').addClass('enabled');\n      }\n      this.options.autoRefreshStatus = !this.options.autoRefreshStatus;\n    }\n  };\n\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/extensions/click-edit-row/bootstrap-table-click-edit-row.js":"/**\n * @author horken wong <horken.wong@gmail.com>\n * @version: v1.0.0\n * https://github.com/horkenw/bootstrap-table\n * Click to edit row for bootstrap-table\n */\n\n(function ($) {\n    'use strict';\n\n    $.extend($.fn.bootstrapTable.defaults, {\n        clickEdit: false\n    });\n\n    function setDivision(node, options){\n        var $option = $('<option />');\n        if(options){\n            $(options).each(function(i, v){\n                $option.clone().text(v.idxNum + ' ' +v.name).val(v.idxNum).appendTo(node);\n            })\n        }\n        else{\n            console.log('Please setup options first!!')\n        }\n    }\n\n    function clikcToEdit(evt, tarNode){\n        var txt = [], table = evt,\n            submit = '<button type=\"button\" class=\"btn btn-primary btn-sm editable-submit\"><i class=\"glyphicon glyphicon-ok\"></i></button>',\n            cancel = '<button type=\"button\" class=\"btn btn-default btn-sm editable-cancel\"><i class=\"glyphicon glyphicon-remove\"></i></button>';\n\n        var replaceData = function(){\n            txt = [];\n            tarNode.find('td').find('input[type=\"text\"]').each(function(i, td){\n                txt.push($(td).eq(0).val());\n            });\n            tarNode.find('select').each(function(i, td){\n                txt.push($('#'+td.id+' option:selected').val());\n            });\n            $('#table').bootstrapTable('updateRow', {\n                index: table.$data.thId,\n                row: {\n                    noOld: txt[0],\n                    area: tarNode.find('select').eq(0).children(':selected').text(),\n                    town: tarNode.find('select').eq(1).children(':selected').text(),\n                    address: txt[1]\n                }\n            });\n            $('#tooling').remove();\n            table.editing = true;\n            // updateToServerSide(table.$data.itemid, txt);\n            return false;\n        };\n\n        var recoveryData = function(){\n          $('#table').bootstrapTable('updateRow', {\n                index: table.$data.thId,\n                row: {},\n            });\n          $('#tooling').remove();\n          table.editing = true;\n          return false;\n        };\n\n        if(table.editing){\n            var  rootid = 0;\n            table.editing = false;\n            table.columns.forEach(function(column, i){\n                if (!column.editable) return;\n\n                switch(column.editable){\n                    case 'input':\n                        var div=$('<div class=\"editable-input col-md-12 col-sm-12 col-xs-12\" style=\"position: relative;\"/>');\n                        txt.push(tarNode.find('td').eq(column.fieldIndex).text());\n                        div.append($('<input type=\"text\" class=\"form-control input-sm\"/>'));\n                        div.append($('<span class=\"clear\"><i class=\"fa fa-times-circle-o\" aria-hidden=\"true\"></i></span>'));\n                        tarNode.find('td').eq(column.fieldIndex).text('').append(div);\n                        break;\n                    case 'select':\n                        var select=$('<select id=\"'+column.field+'\">'), options = $.selectArray[column.field];\n                        tarNode.find('td').eq(column.fieldIndex).text('').append(select);\n                        setDivision($('#'+column.field), options);\n                        break;\n                    case 'textarea':\n                        break;\n                    default:\n                        console.log(column.fieldIndex+' '+column.editable);\n                }\n\n            }, evt);\n            for(var i=0, l=txt.length; i<l; i++){\n                tarNode.find('input[type=\"text\"]').eq(i).val(txt[i]);\n            }\n            tarNode.find('td').last().append('<div id=\"tooling\" class=\"editable-buttons\"/>');\n            $('.clear').on('click', function(){ $(this).parent().find('input').val('');});\n            $(submit).on('click', replaceData).appendTo('#tooling');\n            $(cancel).on('click', recoveryData).appendTo('#tooling');\n        }\n    }\n\n    function updateToServerSide(item, data){\n        var itemid = $(item).find('a').attr('href').match(/\\d+/g)[0];\n        var datas = {'treeId': itemid, 'oldTreeSerialNo': data[0], 'adminDivision': data[2], 'adminUnit': data[3], 'treeAddr': data[1]}; //傳送至伺服器端的Data產生處，需手動修改對應表格\n        store( 'data/update', datas)\n    }\n\n    var BootstrapTable = $.fn.bootstrapTable.Constructor,\n        _initTable = BootstrapTable.prototype.initTable,\n        _initBody = BootstrapTable.prototype.initBody;\n\n    BootstrapTable.prototype.initTable = function(){\n        var that = this;\n        this.$data = {};\n        _initTable.apply(this, Array.prototype.slice.apply(arguments));\n\n        if (!this.options.clickEdit) {\n            return;\n        }\n\n    };\n\n    BootstrapTable.prototype.initBody = function () {\n        var that = this;\n        _initBody.apply(this, Array.prototype.slice.apply(arguments));\n\n        if (!this.options.clickEdit) {\n            return;\n        }\n\n        var table = this.$tableBody.find('table');\n        that.editing=true;\n\n        table.on('click-row.bs.table', function (e, row, $element, field) {\n            if(field ==='no') return; //|| field ==='noOld'\n            this.$data.thId = $element.data().index;\n            this.$data.itemid = $element.data().uniqueid;\n            this.$data.divi = parseInt(row.area);\n            this.$data.town=parseInt(row.town);\n            clikcToEdit(this, $element);\n        }.bind(this));\n    };\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/extensions/cookie/bootstrap-table-cookie.js":"/**\n * @author: Dennis Hernández\n * @webSite: http://djhvscf.github.io/Blog\n * @version: v1.2.2\n *\n * @update zhixin wen <wenzhixin2010@gmail.com>\n */\n\n(function ($) {\n    'use strict';\n\n    var cookieIds = {\n        sortOrder: 'bs.table.sortOrder',\n        sortName: 'bs.table.sortName',\n        pageNumber: 'bs.table.pageNumber',\n        pageList: 'bs.table.pageList',\n        columns: 'bs.table.columns',\n        searchText: 'bs.table.searchText',\n        filterControl: 'bs.table.filterControl'\n    };\n\n    var getCurrentHeader = function (that) {\n        var header = that.$header;\n        if (that.options.height) {\n            header = that.$tableHeader;\n        }\n\n        return header;\n    };\n\n    var getCurrentSearchControls = function (that) {\n        var searchControls = 'select, input';\n        if (that.options.height) {\n            searchControls = 'table select, table input';\n        }\n\n        return searchControls;\n    };\n\n    var cookieEnabled = function () {\n        return !!(navigator.cookieEnabled);\n    };\n\n    var inArrayCookiesEnabled = function (cookieName, cookiesEnabled) {\n        var index = -1;\n\n        for (var i = 0; i < cookiesEnabled.length; i++) {\n            if (cookieName.toLowerCase() === cookiesEnabled[i].toLowerCase()) {\n                index = i;\n                break;\n            }\n        }\n\n        return index;\n    };\n\n    var setCookie = function (that, cookieName, cookieValue) {\n        if ((!that.options.cookie) || (!cookieEnabled()) || (that.options.cookieIdTable === '')) {\n            return;\n        }\n\n        if (inArrayCookiesEnabled(cookieName, that.options.cookiesEnabled) === -1) {\n            return;\n        }\n\n        cookieName = that.options.cookieIdTable + '.' + cookieName;\n\n        switch(that.options.cookieStorage) {\n            case 'cookieStorage':\n                document.cookie = [\n                        cookieName, '=', cookieValue,\n                        '; expires=' + that.options.cookieExpire,\n                        that.options.cookiePath ? '; path=' + that.options.cookiePath : '',\n                        that.options.cookieDomain ? '; domain=' + that.options.cookieDomain : '',\n                        that.options.cookieSecure ? '; secure' : ''\n                    ].join('');\n            break;\n            case 'localStorage':\n                localStorage.setItem(cookieName, cookieValue);\n            break;\n            case 'sessionStorage':\n                sessionStorage.setItem(cookieName, cookieValue);\n            break;\n            default:\n                return false;\n        }\n\n        return true;\n    };\n\n    var getCookie = function (that, tableName, cookieName) {\n        if (!cookieName) {\n            return null;\n        }\n\n        if (inArrayCookiesEnabled(cookieName, that.options.cookiesEnabled) === -1) {\n            return null;\n        }\n\n        cookieName = tableName + '.' + cookieName;\n\n        switch(that.options.cookieStorage) {\n            case 'cookieStorage':\n                return decodeURIComponent(document.cookie.replace(new RegExp('(?:(?:^|.*;)\\\\s*' + encodeURIComponent(cookieName).replace(/[\\-\\.\\+\\*]/g, '\\\\$&') + '\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$'), '$1')) || null;\n            case 'localStorage':\n                return localStorage.getItem(cookieName);\n            case 'sessionStorage':\n                return sessionStorage.getItem(cookieName);\n            default:\n                return null;\n        }\n    };\n\n    var deleteCookie = function (that, tableName, cookieName) {\n        cookieName = tableName + '.' + cookieName;\n        \n        switch(that.options.cookieStorage) {\n            case 'cookieStorage':\n                document.cookie = [\n                        encodeURIComponent(cookieName), '=',\n                        '; expires=Thu, 01 Jan 1970 00:00:00 GMT',\n                        that.options.cookiePath ? '; path=' + that.options.cookiePath : '',\n                        that.options.cookieDomain ? '; domain=' + that.options.cookieDomain : '',\n                    ].join('');\n                break;\n            case 'localStorage':\n                localStorage.removeItem(cookieName);\n            break;\n            case 'sessionStorage':\n                sessionStorage.removeItem(cookieName);\n            break;\n\n        }\n        return true;\n    };\n\n    var calculateExpiration = function(cookieExpire) {\n        var time = cookieExpire.replace(/[0-9]*/, ''); //s,mi,h,d,m,y\n        cookieExpire = cookieExpire.replace(/[A-Za-z]{1,2}}/, ''); //number\n\n        switch (time.toLowerCase()) {\n            case 's':\n                cookieExpire = +cookieExpire;\n                break;\n            case 'mi':\n                cookieExpire = cookieExpire * 60;\n                break;\n            case 'h':\n                cookieExpire = cookieExpire * 60 * 60;\n                break;\n            case 'd':\n                cookieExpire = cookieExpire * 24 * 60 * 60;\n                break;\n            case 'm':\n                cookieExpire = cookieExpire * 30 * 24 * 60 * 60;\n                break;\n            case 'y':\n                cookieExpire = cookieExpire * 365 * 24 * 60 * 60;\n                break;\n            default:\n                cookieExpire = undefined;\n                break;\n        }\n\n        return cookieExpire === undefined ? '' : '; max-age=' + cookieExpire;\n    };\n\n    var initCookieFilters = function (bootstrapTable) {\n        setTimeout(function () {\n            var parsedCookieFilters = JSON.parse(getCookie(bootstrapTable, bootstrapTable.options.cookieIdTable, cookieIds.filterControl));\n\n            if (!bootstrapTable.options.filterControlValuesLoaded && parsedCookieFilters) {\n                bootstrapTable.options.filterControlValuesLoaded = true;\n\n                var cachedFilters = {},\n                    header = getCurrentHeader(bootstrapTable),\n                    searchControls = getCurrentSearchControls(bootstrapTable),\n\n                    applyCookieFilters = function (element, filteredCookies) {\n                        $(filteredCookies).each(function (i, cookie) {\n                            $(element).val(cookie.text);\n                            cachedFilters[cookie.field] = cookie.text;\n                        });\n                    };\n\n                header.find(searchControls).each(function () {\n                    var field = $(this).closest('[data-field]').data('field'),\n                        filteredCookies = $.grep(parsedCookieFilters, function (cookie) {\n                            return cookie.field === field;\n                        });\n\n                    applyCookieFilters(this, filteredCookies);\n                });\n\n                bootstrapTable.initColumnSearch(cachedFilters);\n            }\n        }, 250);\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, {\n        cookie: false,\n        cookieExpire: '2h',\n        cookiePath: null,\n        cookieDomain: null,\n        cookieSecure: null,\n        cookieIdTable: '',\n        cookiesEnabled: [\n            'bs.table.sortOrder', 'bs.table.sortName',\n            'bs.table.pageNumber', 'bs.table.pageList',\n            'bs.table.columns', 'bs.table.searchText',\n            'bs.table.filterControl'\n        ],\n        cookieStorage: 'cookieStorage', //localStorage, sessionStorage\n        //internal variable\n        filterControls: [],\n        filterControlValuesLoaded: false\n    });\n\n    $.fn.bootstrapTable.methods.push('getCookies');\n    $.fn.bootstrapTable.methods.push('deleteCookie');\n\n    $.extend($.fn.bootstrapTable.utils, {\n        setCookie: setCookie,\n        getCookie: getCookie\n    });\n\n    var BootstrapTable = $.fn.bootstrapTable.Constructor,\n        _init = BootstrapTable.prototype.init,\n        _initTable = BootstrapTable.prototype.initTable,\n        _initServer = BootstrapTable.prototype.initServer,\n        _onSort = BootstrapTable.prototype.onSort,\n        _onPageNumber = BootstrapTable.prototype.onPageNumber,\n        _onPageListChange = BootstrapTable.prototype.onPageListChange,\n        _onPageFirst = BootstrapTable.prototype.onPageFirst,\n        _onPagePre = BootstrapTable.prototype.onPagePre,\n        _onPageNext = BootstrapTable.prototype.onPageNext,\n        _onPageLast = BootstrapTable.prototype.onPageLast,\n        _toggleColumn = BootstrapTable.prototype.toggleColumn,\n        _selectPage = BootstrapTable.prototype.selectPage,\n        _onSearch = BootstrapTable.prototype.onSearch;\n\n    BootstrapTable.prototype.init = function () {\n        var timeoutId = 0;\n        this.options.filterControls = [];\n        this.options.filterControlValuesLoaded = false;\n\n        this.options.cookiesEnabled = typeof this.options.cookiesEnabled === 'string' ?\n            this.options.cookiesEnabled.replace('[', '').replace(']', '')\n                .replace(/ /g, '').toLowerCase().split(',') :\n                this.options.cookiesEnabled;\n\n        if (this.options.filterControl) {\n            var that = this;\n            this.$el.on('column-search.bs.table', function (e, field, text) {\n                var isNewField = true;\n\n                for (var i = 0; i < that.options.filterControls.length; i++) {\n                    if (that.options.filterControls[i].field === field) {\n                        that.options.filterControls[i].text = text;\n                        isNewField = false;\n                        break;\n                    }\n                }\n                if (isNewField) {\n                    that.options.filterControls.push({\n                        field: field,\n                        text: text\n                    });\n                }\n\n                setCookie(that, cookieIds.filterControl, JSON.stringify(that.options.filterControls));\n            }).on('post-body.bs.table', initCookieFilters(that));\n        }\n        _init.apply(this, Array.prototype.slice.apply(arguments));\n    };\n\n    BootstrapTable.prototype.initServer = function () {\n        var bootstrapTable = this,\n            selectsWithoutDefaults = [],\n\n            columnHasSelectControl = function (column) {\n                return column.filterControl && column.filterControl === 'select';\n            },\n\n            columnHasDefaultSelectValues = function (column) {\n                return column.filterData && column.filterData !== 'column';\n            },\n\n            cookiesPresent = function() {\n                var cookie = JSON.parse(getCookie(bootstrapTable, bootstrapTable.options.cookieIdTable, cookieIds.filterControl));\n                return bootstrapTable.options.cookie && cookie;\n            };\n\n        selectsWithoutDefaults = $.grep(bootstrapTable.columns, function(column) {\n            return columnHasSelectControl(column) && !columnHasDefaultSelectValues(column);\n        });\n\n        // reset variable to original initServer function, so that future calls to initServer\n        // use the original function from this point on.\n        BootstrapTable.prototype.initServer = _initServer;\n\n        // early return if we don't need to populate any select values with cookie values\n        if (this.options.filterControl && cookiesPresent() && selectsWithoutDefaults.length === 0) {\n            return;\n        }\n\n        // call BootstrapTable.prototype.initServer\n        _initServer.apply(this, Array.prototype.slice.apply(arguments));\n    };\n\n\n    BootstrapTable.prototype.initTable = function () {\n        _initTable.apply(this, Array.prototype.slice.apply(arguments));\n        this.initCookie();\n    };\n\n    BootstrapTable.prototype.initCookie = function () {\n        if (!this.options.cookie) {\n            return;\n        }\n\n        if ((this.options.cookieIdTable === '') || (this.options.cookieExpire === '') || (!cookieEnabled())) {\n            throw new Error(\"Configuration error. Please review the cookieIdTable, cookieExpire properties, if those properties are ok, then this browser does not support the cookies\");\n        }\n\n        var sortOrderCookie = getCookie(this, this.options.cookieIdTable, cookieIds.sortOrder),\n            sortOrderNameCookie = getCookie(this, this.options.cookieIdTable, cookieIds.sortName),\n            pageNumberCookie = getCookie(this, this.options.cookieIdTable, cookieIds.pageNumber),\n            pageListCookie = getCookie(this, this.options.cookieIdTable, cookieIds.pageList),\n            columnsCookie = JSON.parse(getCookie(this, this.options.cookieIdTable, cookieIds.columns)),\n            searchTextCookie = getCookie(this, this.options.cookieIdTable, cookieIds.searchText);\n\n        //sortOrder\n        this.options.sortOrder = sortOrderCookie ? sortOrderCookie : this.options.sortOrder;\n        //sortName\n        this.options.sortName = sortOrderNameCookie ? sortOrderNameCookie : this.options.sortName;\n        //pageNumber\n        this.options.pageNumber = pageNumberCookie ? +pageNumberCookie : this.options.pageNumber;\n        //pageSize\n        this.options.pageSize = pageListCookie ? pageListCookie === this.options.formatAllRows() ? pageListCookie : +pageListCookie : this.options.pageSize;\n        //searchText\n        this.options.searchText = searchTextCookie ? searchTextCookie : '';\n\n        if (columnsCookie) {\n            $.each(this.columns, function (i, column) {\n                column.visible = $.inArray(column.field, columnsCookie) !== -1;\n            });\n        }\n    };\n\n    BootstrapTable.prototype.onSort = function () {\n        _onSort.apply(this, Array.prototype.slice.apply(arguments));\n        setCookie(this, cookieIds.sortOrder, this.options.sortOrder);\n        setCookie(this, cookieIds.sortName, this.options.sortName);\n    };\n\n    BootstrapTable.prototype.onPageNumber = function () {\n        _onPageNumber.apply(this, Array.prototype.slice.apply(arguments));\n        setCookie(this, cookieIds.pageNumber, this.options.pageNumber);\n    };\n\n    BootstrapTable.prototype.onPageListChange = function () {\n        _onPageListChange.apply(this, Array.prototype.slice.apply(arguments));\n        setCookie(this, cookieIds.pageList, this.options.pageSize);\n    };\n\n    BootstrapTable.prototype.onPageFirst = function () {\n        _onPageFirst.apply(this, Array.prototype.slice.apply(arguments));\n        setCookie(this, cookieIds.pageNumber, this.options.pageNumber);\n    };\n\n    BootstrapTable.prototype.onPagePre = function () {\n        _onPagePre.apply(this, Array.prototype.slice.apply(arguments));\n        setCookie(this, cookieIds.pageNumber, this.options.pageNumber);\n    };\n\n    BootstrapTable.prototype.onPageNext = function () {\n        _onPageNext.apply(this, Array.prototype.slice.apply(arguments));\n        setCookie(this, cookieIds.pageNumber, this.options.pageNumber);\n    };\n\n    BootstrapTable.prototype.onPageLast = function () {\n        _onPageLast.apply(this, Array.prototype.slice.apply(arguments));\n        setCookie(this, cookieIds.pageNumber, this.options.pageNumber);\n    };\n\n    BootstrapTable.prototype.toggleColumn = function () {\n        _toggleColumn.apply(this, Array.prototype.slice.apply(arguments));\n\n        var visibleColumns = [];\n\n        $.each(this.columns, function (i, column) {\n            if (column.visible) {\n                visibleColumns.push(column.field);\n            }\n        });\n\n        setCookie(this, cookieIds.columns, JSON.stringify(visibleColumns));\n    };\n\n    BootstrapTable.prototype.selectPage = function (page) {\n        _selectPage.apply(this, Array.prototype.slice.apply(arguments));\n        setCookie(this, cookieIds.pageNumber, page);\n    };\n\n    BootstrapTable.prototype.onSearch = function () {\n        var target = Array.prototype.slice.apply(arguments);\n        _onSearch.apply(this, target);\n\n        if ($(target[0].currentTarget).parent().hasClass('search')) {\n          setCookie(this, cookieIds.searchText, this.searchText);\n        }\n    };\n\n    BootstrapTable.prototype.getCookies = function () {\n        var bootstrapTable = this;\n        var cookies = {};\n        $.each(cookieIds, function(key, value) {\n            cookies[key] = getCookie(bootstrapTable, bootstrapTable.options.cookieIdTable, value);\n            if (key === 'columns') {\n                cookies[key] = JSON.parse(cookies[key]);\n            }\n        });\n        return cookies;\n    };\n\n    BootstrapTable.prototype.deleteCookie = function (cookieName) {\n        if ((cookieName === '') || (!cookieEnabled())) {\n            return;\n        }\n\n        deleteCookie(this, this.options.cookieIdTable, cookieIds[cookieName]);\n    };\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/extensions/copy-rows/bootstrap-table-copy-rows.js":"/**\n * @author Homer Glascock <HopGlascock@gmail.com>\n * @version: v1.0.0\n */\n\n !function ($) {\n    \"use strict\";\n\n    var calculateObjectValue = $.fn.bootstrapTable.utils.calculateObjectValue,\n        sprintf = $.fn.bootstrapTable.utils.sprintf;\n\n    var copytext = function (text) {\n        var textField = document.createElement('textarea');\n        $(textField).html(text);\n        document.body.appendChild(textField);\n        textField.select();\n\n        try {\n            document.execCommand('copy');\n        }\n        catch (e) {\n            console.log(\"Oops, unable to copy\");\n        }\n        $(textField).remove();\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, {\n        copyBtn: false,\n        copyWHiddenBtn: false,\n        copyDelemeter: \", \"\n    });\n\n    $.fn.bootstrapTable.methods.push('copyColumnsToClipboard', 'copyColumnsToClipboardWithHidden');\n\n    var BootstrapTable = $.fn.bootstrapTable.Constructor,\n        _initToolbar = BootstrapTable.prototype.initToolbar;\n\n    BootstrapTable.prototype.initToolbar = function () {\n\n        _initToolbar.apply(this, Array.prototype.slice.apply(arguments));\n\n        var that = this,\n            $btnGroup = this.$toolbar.find('>.btn-group');\n\n        if (this.options.clickToSelect || this.options.singleSelect) {\n\n            if (this.options.copyBtn) {\n                var copybtn = \"<button class='btn btn-default' id='copyBtn'><span class='glyphicon glyphicon-copy icon-pencil'></span></button>\";\n                $btnGroup.append(copybtn);\n                $btnGroup.find('#copyBtn').click(function () { that.copyColumnsToClipboard(); });\n            }\n\n            if (this.options.copyWHiddenBtn) {\n                var copyhiddenbtn = \"<button class='btn btn-default' id='copyWHiddenBtn'><span class='badge'><span class='glyphicon glyphicon-copy icon-pencil'></span></span></button>\";\n                $btnGroup.append(copyhiddenbtn);\n                $btnGroup.find('#copyWHiddenBtn').click(function () { that.copyColumnsToClipboardWithHidden(); });\n            }\n        }\n    };\n\n    BootstrapTable.prototype.copyColumnsToClipboard = function () {\n        var that = this,\n            ret = \"\",\n            delimet = this.options.copyDelemeter;\n\n        $.each(that.getSelections(), function (index, row) {\n            $.each(that.options.columns[0], function (indy, column) {\n                if (column.field !== \"state\" && column.field !== \"RowNumber\" && column.visible) {\n                    if (row[column.field] !== null) {\n                        ret += calculateObjectValue(column, that.header.formatters[indy], [row[column.field], row, index], row[column.field]);\n                    }\n                    ret += delimet;\n                }\n            });\n\n            ret += \"\\r\\n\";\n        });\n\n        copytext(ret);\n    };\n\n    BootstrapTable.prototype.copyColumnsToClipboardWithHidden = function () {\n        var that = this,\n            ret = \"\",\n            delimet = this.options.copyDelemeter;\n\n        $.each(that.getSelections(), function (index, row) {\n            $.each(that.options.columns[0], function (indy, column) {\n                if (column.field != \"state\" && column.field !== \"RowNumber\") {\n                    if (row[column.field] !== null) {\n                        ret += calculateObjectValue(column, that.header.formatters[indy], [row[column.field], row, index], row[column.field]);\n                    }\n                    ret += delimet;\n                }\n            });\n\n            ret += \"\\r\\n\";\n        });\n\n        copytext(ret);\n    };\n}(jQuery);","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/extensions/editable/bootstrap-table-editable.js":"/**\n * @author zhixin wen <wenzhixin2010@gmail.com>\n * extensions: https://github.com/vitalets/x-editable\n */\n\n(function($) {\n\n    'use strict';\n\n    $.extend($.fn.bootstrapTable.defaults, {\n        editable: true,\n        onEditableInit: function() {\n            return false;\n        },\n        onEditableSave: function(field, row, oldValue, $el) {\n            return false;\n        },\n        onEditableShown: function(field, row, $el, editable) {\n            return false;\n        },\n        onEditableHidden: function(field, row, $el, reason) {\n            return false;\n        }\n    });\n\n    $.extend($.fn.bootstrapTable.Constructor.EVENTS, {\n        'editable-init.bs.table': 'onEditableInit',\n        'editable-save.bs.table': 'onEditableSave',\n        'editable-shown.bs.table': 'onEditableShown',\n        'editable-hidden.bs.table': 'onEditableHidden'\n    });\n\n    var BootstrapTable = $.fn.bootstrapTable.Constructor,\n        _initTable = BootstrapTable.prototype.initTable,\n        _initBody = BootstrapTable.prototype.initBody;\n\n    BootstrapTable.prototype.initTable = function() {\n        var that = this;\n        _initTable.apply(this, Array.prototype.slice.apply(arguments));\n\n        if (!this.options.editable) {\n            return;\n        }\n\n        $.each(this.columns, function(i, column) {\n            if (!column.editable) {\n                return;\n            }\n\n            var editableOptions = {},\n                editableDataMarkup = [],\n                editableDataPrefix = 'editable-';\n\n            var processDataOptions = function(key, value) {\n                // Replace camel case with dashes.\n                var dashKey = key.replace(/([A-Z])/g, function($1) {\n                    return \"-\" + $1.toLowerCase();\n                });\n                if (dashKey.slice(0, editableDataPrefix.length) == editableDataPrefix) {\n                    var dataKey = dashKey.replace(editableDataPrefix, 'data-');\n                    editableOptions[dataKey] = value;\n                }\n            };\n\n            $.each(that.options, processDataOptions);\n\n            column.formatter = column.formatter || function(value, row, index) {\n                return value;\n            };\n            column._formatter = column._formatter ? column._formatter : column.formatter;\n            column.formatter = function(value, row, index) {\n                var result = column._formatter ? column._formatter(value, row, index) : value;\n\n                $.each(column, processDataOptions);\n\n                $.each(editableOptions, function(key, value) {\n                    editableDataMarkup.push(' ' + key + '=\"' + value + '\"');\n                });\n\n                var _dont_edit_formatter = false;\n                if (column.editable.hasOwnProperty('noeditFormatter')) {\n                    _dont_edit_formatter = column.editable.noeditFormatter(value, row, index);\n                }\n\n                if (_dont_edit_formatter === false) {\n                    return ['<a href=\"javascript:void(0)\"',\n                        ' data-name=\"' + column.field + '\"',\n                        ' data-pk=\"' + row[that.options.idField] + '\"',\n                        ' data-value=\"' + result + '\"',\n                        editableDataMarkup.join(''),\n                        '>' + '</a>'\n                    ].join('');\n                } else {\n                    return _dont_edit_formatter;\n                }\n\n            };\n        });\n    };\n\n    BootstrapTable.prototype.initBody = function() {\n        var that = this;\n        _initBody.apply(this, Array.prototype.slice.apply(arguments));\n\n        if (!this.options.editable) {\n            return;\n        }\n\n        $.each(this.columns, function(i, column) {\n            if (!column.editable) {\n                return;\n            }\n\n            that.$body.find('a[data-name=\"' + column.field + '\"]').editable(column.editable)\n                .off('save').on('save', function(e, params) {\n                    var data = that.getData(),\n                        index = $(this).parents('tr[data-index]').data('index'),\n                        row = data[index],\n                        oldValue = row[column.field];\n\n                    $(this).data('value', params.submitValue);\n                    row[column.field] = params.submitValue;\n                    that.trigger('editable-save', column.field, row, oldValue, $(this));\n                    that.resetFooter();\n                });\n            that.$body.find('a[data-name=\"' + column.field + '\"]').editable(column.editable)\n                .off('shown').on('shown', function(e, editable) {\n                    var data = that.getData(),\n                        index = $(this).parents('tr[data-index]').data('index'),\n                        row = data[index];\n\n                    that.trigger('editable-shown', column.field, row, $(this), editable);\n                });\n            that.$body.find('a[data-name=\"' + column.field + '\"]').editable(column.editable)\n                .off('hidden').on('hidden', function(e, reason) {\n                    var data = that.getData(),\n                        index = $(this).parents('tr[data-index]').data('index'),\n                        row = data[index];\n\n                    that.trigger('editable-hidden', column.field, row, $(this), reason);\n                });\n        });\n        this.trigger('editable-init');\n    };\n\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/extensions/export/bootstrap-table-export.js":"/**\n * @author zhixin wen <wenzhixin2010@gmail.com>\n * extensions: https://github.com/kayalshri/tableExport.jquery.plugin\n */\n\n(function ($) {\n    'use strict';\n    var sprintf = $.fn.bootstrapTable.utils.sprintf;\n\n    var TYPE_NAME = {\n        json: 'JSON',\n        xml: 'XML',\n        png: 'PNG',\n        csv: 'CSV',\n        txt: 'TXT',\n        sql: 'SQL',\n        doc: 'MS-Word',\n        excel: 'MS-Excel',\n        xlsx: 'MS-Excel (OpenXML)',\n        powerpoint: 'MS-Powerpoint',\n        pdf: 'PDF'\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, {\n        showExport: false,\n        exportDataType: 'basic', // basic, all, selected\n        // 'json', 'xml', 'png', 'csv', 'txt', 'sql', 'doc', 'excel', 'powerpoint', 'pdf'\n        exportTypes: ['json', 'xml', 'csv', 'txt', 'sql', 'excel'],\n        exportOptions: {}\n    });\n\n    $.extend($.fn.bootstrapTable.defaults.icons, {\n        export: 'glyphicon-export icon-share'\n    });\n\n    $.extend($.fn.bootstrapTable.locales, {\n        formatExport: function () {\n            return 'Export data';\n        }\n    });\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales);\n\n    var BootstrapTable = $.fn.bootstrapTable.Constructor,\n        _initToolbar = BootstrapTable.prototype.initToolbar;\n\n    BootstrapTable.prototype.initToolbar = function () {\n        this.showToolbar = this.options.showExport;\n\n        _initToolbar.apply(this, Array.prototype.slice.apply(arguments));\n\n        if (this.options.showExport) {\n            var that = this,\n                $btnGroup = this.$toolbar.find('>.btn-group'),\n                $export = $btnGroup.find('div.export');\n\n            if (!$export.length) {\n                $export = $([\n                    '<div class=\"export btn-group\">',\n                        '<button class=\"btn' +\n                            sprintf(' btn-%s', this.options.buttonsClass) +\n                            sprintf(' btn-%s', this.options.iconSize) +\n                            ' dropdown-toggle\" aria-label=\"export type\" ' +\n                            'title=\"' + this.options.formatExport() + '\" ' +\n                            'data-toggle=\"dropdown\" type=\"button\">',\n                            sprintf('<i class=\"%s %s\"></i> ', this.options.iconsPrefix, this.options.icons.export),\n                            '<span class=\"caret\"></span>',\n                        '</button>',\n                        '<ul class=\"dropdown-menu\" role=\"menu\">',\n                        '</ul>',\n                    '</div>'].join('')).appendTo($btnGroup);\n\n                var $menu = $export.find('.dropdown-menu'),\n                    exportTypes = this.options.exportTypes;\n\n                if (typeof this.options.exportTypes === 'string') {\n                    var types = this.options.exportTypes.slice(1, -1).replace(/ /g, '').split(',');\n\n                    exportTypes = [];\n                    $.each(types, function (i, value) {\n                        exportTypes.push(value.slice(1, -1));\n                    });\n                }\n                $.each(exportTypes, function (i, type) {\n                    if (TYPE_NAME.hasOwnProperty(type)) {\n                        $menu.append(['<li role=\"menuitem\" data-type=\"' + type + '\">',\n                                '<a href=\"javascript:void(0)\">',\n                                    TYPE_NAME[type],\n                                '</a>',\n                            '</li>'].join(''));\n                    }\n                });\n\n                $menu.find('li').click(function () {\n                    var type = $(this).data('type'),\n                        doExport = function () {\n                            that.$el.tableExport($.extend({}, that.options.exportOptions, {\n                                type: type,\n                                escape: false\n                            }));\n                        };\n\n                    if (that.options.exportDataType === 'all' && that.options.pagination) {\n                        that.$el.one(that.options.sidePagination === 'server' ? 'post-body.bs.table' : 'page-change.bs.table', function () {\n                            doExport();\n                            that.togglePagination();\n                        });\n                        that.togglePagination();\n                    } else if (that.options.exportDataType === 'selected') {\n                        var data = that.getData(),\n                            selectedData = that.getAllSelections();\n\n                        // Quick fix #2220\n                        if (that.options.sidePagination === 'server') {\n                            data = {total: that.options.totalRows};\n                            data[that.options.dataField] = that.getData();\n\n                            selectedData = {total: that.options.totalRows};\n                            selectedData[that.options.dataField] = that.getAllSelections();\n                        }\n\n                        that.load(selectedData);\n                        doExport();\n                        that.load(data);\n                    } else {\n                        doExport();\n                    }\n                });\n            }\n        }\n    };\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/extensions/filter/bootstrap-table-filter.js":"/**\n * @author zhixin wen <wenzhixin2010@gmail.com>\n * extensions: https://github.com/lukaskral/bootstrap-table-filter\n */\n\n!function($) {\n\n    'use strict';\n\n    $.extend($.fn.bootstrapTable.defaults, {\n        showFilter: false\n    });\n\n    var BootstrapTable = $.fn.bootstrapTable.Constructor,\n        _init = BootstrapTable.prototype.init,\n        _initSearch = BootstrapTable.prototype.initSearch;\n\n    BootstrapTable.prototype.init = function () {\n        _init.apply(this, Array.prototype.slice.apply(arguments));\n\n        var that = this;\n        this.$el.on('load-success.bs.table', function () {\n            if (that.options.showFilter) {\n                $(that.options.toolbar).bootstrapTableFilter({\n                    connectTo: that.$el\n                });\n            }\n        });\n    };\n\n    BootstrapTable.prototype.initSearch = function () {\n        _initSearch.apply(this, Array.prototype.slice.apply(arguments));\n\n        if (this.options.sidePagination !== 'server') {\n            if (typeof this.searchCallback === 'function') {\n                this.data = $.grep(this.options.data, this.searchCallback);\n            }\n        }\n    };\n\n    BootstrapTable.prototype.getData = function () {\n        return (this.searchText || this.searchCallback) ? this.data : this.options.data;\n    };\n\n    BootstrapTable.prototype.getColumns = function () {\n        return this.columns;\n    };\n\n    BootstrapTable.prototype.registerSearchCallback = function (callback) {\n        this.searchCallback = callback;\n    };\n\n    BootstrapTable.prototype.updateSearch = function () {\n        this.options.pageNumber = 1;\n        this.initSearch();\n        this.updatePagination();\n    };\n\n    BootstrapTable.prototype.getServerUrl = function () {\n        return (this.options.sidePagination === 'server') ? this.options.url : false;\n    };\n\n    $.fn.bootstrapTable.methods.push('getColumns',\n        'registerSearchCallback', 'updateSearch',\n        'getServerUrl');\n\n}(jQuery);","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/extensions/filter-control/bootstrap-table-filter-control.js":"/**\n * @author: Dennis Hernández\n * @webSite: http://djhvscf.github.io/Blog\n * @version: v2.1.1\n */\n\n(function ($) {\n\n    'use strict';\n\n    var sprintf = $.fn.bootstrapTable.utils.sprintf,\n        objectKeys = $.fn.bootstrapTable.utils.objectKeys;\n\n    var getOptionsFromSelectControl = function (selectControl) {\n        return selectControl.get(selectControl.length - 1).options;\n    };\n\n    var hideUnusedSelectOptions = function (selectControl, uniqueValues) {\n        var options = getOptionsFromSelectControl(selectControl);\n\n        for (var i = 0; i < options.length; i++) {\n            if (options[i].value !== \"\") {\n                if (!uniqueValues.hasOwnProperty(options[i].value)) {\n                    selectControl.find(sprintf(\"option[value='%s']\", options[i].value)).hide();\n                } else {\n                    selectControl.find(sprintf(\"option[value='%s']\", options[i].value)).show();\n                }\n            }\n        }\n    };\n\n    var addOptionToSelectControl = function (selectControl, value, text) {\n        value = $.trim(value);\n        selectControl = $(selectControl.get(selectControl.length - 1));\n        if (!existOptionInSelectControl(selectControl, value)) {\n            selectControl.append($(\"<option></option>\")\n                .attr(\"value\", value)\n                .text($('<div />').html(text).text()));\n        }\n    };\n\n    var sortSelectControl = function (selectControl) {\n            var $opts = selectControl.find('option:gt(0)');\n            $opts.sort(function (a, b) {\n                a = $(a).text().toLowerCase();\n                b = $(b).text().toLowerCase();\n                if ($.isNumeric(a) && $.isNumeric(b)) {\n                    // Convert numerical values from string to float.\n                    a = parseFloat(a);\n                    b = parseFloat(b);\n                }\n                return a > b ? 1 : a < b ? -1 : 0;\n            });\n\n            selectControl.find('option:gt(0)').remove();\n            selectControl.append($opts);\n    };\n\n    var existOptionInSelectControl = function (selectControl, value) {\n        var options = getOptionsFromSelectControl(selectControl);\n        for (var i = 0; i < options.length; i++) {\n            if (options[i].value === value.toString()) {\n                //The value is not valid to add\n                return true;\n            }\n        }\n\n        //If we get here, the value is valid to add\n        return false;\n    };\n\n    var fixHeaderCSS = function (that) {\n        that.$tableHeader.css('height', '77px');\n    };\n\n    var getCurrentHeader = function (that) {\n        var header = that.$header;\n        if (that.options.height) {\n            header = that.$tableHeader;\n        }\n\n        return header;\n    };\n\n    var getCurrentSearchControls = function (that) {\n        var searchControls = 'select, input';\n        if (that.options.height) {\n            searchControls = 'table select, table input';\n        }\n\n        return searchControls;\n    };\n\n    var getCursorPosition = function(el) {\n        if ($.fn.bootstrapTable.utils.isIEBrowser()) {\n            if ($(el).is('input')) {\n                var pos = 0;\n                if ('selectionStart' in el) {\n                    pos = el.selectionStart;\n                } else if ('selection' in document) {\n                    el.focus();\n                    var Sel = document.selection.createRange();\n                    var SelLength = document.selection.createRange().text.length;\n                    Sel.moveStart('character', -el.value.length);\n                    pos = Sel.text.length - SelLength;\n                }\n                return pos;\n            } else {\n                return -1;\n            }\n        } else {\n            return -1;\n        }\n    };\n\n    var setCursorPosition = function (el, index) {\n        if ($.fn.bootstrapTable.utils.isIEBrowser()) {\n            if(el.setSelectionRange !== undefined) {\n                el.setSelectionRange(index, index);\n            } else {\n                $(el).val(el.value);\n            }\n        }\n    };\n\n    var copyValues = function (that) {\n        var header = getCurrentHeader(that),\n            searchControls = getCurrentSearchControls(that);\n\n        that.options.valuesFilterControl = [];\n\n        header.find(searchControls).each(function () {\n            that.options.valuesFilterControl.push(\n                {\n                    field: $(this).closest('[data-field]').data('field'),\n                    value: $(this).val(),\n                    position: getCursorPosition($(this).get(0))\n                });\n        });\n    };\n\n    var setValues = function(that) {\n        var field = null,\n            result = [],\n            header = getCurrentHeader(that),\n            searchControls = getCurrentSearchControls(that);\n\n        if (that.options.valuesFilterControl.length > 0) {\n            header.find(searchControls).each(function (index, ele) {\n                field = $(this).closest('[data-field]').data('field');\n                result = $.grep(that.options.valuesFilterControl, function (valueObj) {\n                    return valueObj.field === field;\n                });\n\n                if (result.length > 0) {\n                    $(this).val(result[0].value);\n                    setCursorPosition($(this).get(0), result[0].position);\n                }\n            });\n        }\n    };\n\n    var collectBootstrapCookies = function cookiesRegex() {\n        var cookies = [],\n            foundCookies = document.cookie.match(/(?:bs.table.)(\\w*)/g);\n\n        if (foundCookies) {\n            $.each(foundCookies, function (i, cookie) {\n                if (/./.test(cookie)) {\n                    cookie = cookie.split(\".\").pop();\n                }\n\n                if ($.inArray(cookie, cookies) === -1) {\n                    cookies.push(cookie);\n                }\n            });\n            return cookies;\n        }\n    };\n\n    var initFilterSelectControls = function (that) {\n        var data = that.data,\n            itemsPerPage = that.pageTo < that.options.data.length ? that.options.data.length : that.pageTo,\n\n            isColumnSearchableViaSelect = function (column) {\n                return column.filterControl && column.filterControl.toLowerCase() === 'select' && column.searchable;\n            },\n\n            isFilterDataNotGiven = function (column) {\n                return column.filterData === undefined || column.filterData.toLowerCase() === 'column';\n            },\n\n            hasSelectControlElement = function (selectControl) {\n                return selectControl && selectControl.length > 0;\n            };\n\n        var z = that.options.pagination ?\n            (that.options.sidePagination === 'server' ? that.pageTo : that.options.totalRows) :\n            that.pageTo;\n\n        $.each(that.header.fields, function (j, field) {\n            var column = that.columns[$.fn.bootstrapTable.utils.getFieldIndex(that.columns, field)],\n                selectControl = $('.bootstrap-table-filter-control-' + escapeID(column.field));\n\n            if (isColumnSearchableViaSelect(column) && isFilterDataNotGiven(column) && hasSelectControlElement(selectControl)) {\n                if (selectControl.get(selectControl.length - 1).options.length === 0) {\n                    //Added the default option\n                    addOptionToSelectControl(selectControl, '', '');\n                }\n\n                var uniqueValues = {};\n                for (var i = 0; i < z; i++) {\n                    //Added a new value\n                    var fieldValue = data[i][field],\n                        formattedValue = $.fn.bootstrapTable.utils.calculateObjectValue(that.header, that.header.formatters[j], [fieldValue, data[i], i], fieldValue);\n\n                    uniqueValues[formattedValue] = fieldValue;\n                }\n\n                for (var key in uniqueValues) {\n                    addOptionToSelectControl(selectControl, uniqueValues[key], key);\n                }\n\n                sortSelectControl(selectControl);\n\n                if (that.options.hideUnusedSelectOptions) {\n                    hideUnusedSelectOptions(selectControl, uniqueValues);\n                }\n            }\n        });\n    };\n\n    var escapeID = function(id) {\n       return String(id).replace( /(:|\\.|\\[|\\]|,)/g, \"\\\\$1\" );\n    };\n\n    var createControls = function (that, header) {\n        var addedFilterControl = false,\n            isVisible,\n            html,\n            timeoutId = 0;\n\n        $.each(that.columns, function (i, column) {\n            isVisible = 'hidden';\n            html = [];\n\n            if (!column.visible) {\n                return;\n            }\n\n            if (!column.filterControl) {\n                html.push('<div class=\"no-filter-control\"></div>');\n            } else {\n                html.push('<div class=\"filter-control\">');\n\n                var nameControl = column.filterControl.toLowerCase();\n                if (column.searchable && that.options.filterTemplate[nameControl]) {\n                    addedFilterControl = true;\n                    isVisible = 'visible';\n                    html.push(that.options.filterTemplate[nameControl](that, column.field, isVisible, column.filterControlPlaceholder));\n                }\n            }\n\n            $.each(header.children().children(), function (i, tr) {\n                tr = $(tr);\n                if (tr.data('field') === column.field) {\n                    tr.find('.fht-cell').append(html.join(''));\n                    return false;\n                }\n            });\n\n            if (column.filterData !== undefined && column.filterData.toLowerCase() !== 'column') {\n                var filterDataType = getFilterDataMethod(filterDataMethods, column.filterData.substring(0, column.filterData.indexOf(':')));\n                var filterDataSource, selectControl;\n\n                if (filterDataType !== null) {\n                    filterDataSource = column.filterData.substring(column.filterData.indexOf(':') + 1, column.filterData.length);\n                    selectControl = $('.bootstrap-table-filter-control-' + escapeID(column.field));\n\n                    addOptionToSelectControl(selectControl, '', '');\n                    filterDataType(filterDataSource, selectControl);\n                } else {\n                    throw new SyntaxError('Error. You should use any of these allowed filter data methods: var, json, url.' + ' Use like this: var: {key: \"value\"}');\n                }\n\n                var variableValues, key;\n                switch (filterDataType) {\n                    case 'url':\n                        $.ajax({\n                            url: filterDataSource,\n                            dataType: 'json',\n                            success: function (data) {\n                                for (var key in data) {\n                                    addOptionToSelectControl(selectControl, key, data[key]);\n                                }\n                                sortSelectControl(selectControl);\n                            }\n                        });\n                        break;\n                    case 'var':\n                        variableValues = window[filterDataSource];\n                        for (key in variableValues) {\n                            addOptionToSelectControl(selectControl, key, variableValues[key]);\n                        }\n                        sortSelectControl(selectControl);\n                        break;\n                    case 'jso':\n                        variableValues = JSON.parse(filterDataSource);\n                        for (key in variableValues) {\n                            addOptionToSelectControl(selectControl, key, variableValues[key]);\n                        }\n                        sortSelectControl(selectControl);\n                        break;\n                }\n            }\n        });\n\n        if (addedFilterControl) {\n            header.off('keyup', 'input').on('keyup', 'input', function (event) {\n                clearTimeout(timeoutId);\n                timeoutId = setTimeout(function () {\n                    that.onColumnSearch(event);\n                }, that.options.searchTimeOut);\n            });\n\n            header.off('change', 'select').on('change', 'select', function (event) {\n                clearTimeout(timeoutId);\n                timeoutId = setTimeout(function () {\n                    that.onColumnSearch(event);\n                }, that.options.searchTimeOut);\n            });\n\n            header.off('mouseup', 'input').on('mouseup', 'input', function (event) {\n                var $input = $(this),\n                oldValue = $input.val();\n\n                if (oldValue === \"\") {\n                    return;\n                }\n\n                setTimeout(function(){\n                    var newValue = $input.val();\n\n                    if (newValue === \"\") {\n                        clearTimeout(timeoutId);\n                        timeoutId = setTimeout(function () {\n                            that.onColumnSearch(event);\n                        }, that.options.searchTimeOut);\n                    }\n                }, 1);\n            });\n\n            if (header.find('.date-filter-control').length > 0) {\n                $.each(that.columns, function (i, column) {\n                    if (column.filterControl !== undefined && column.filterControl.toLowerCase() === 'datepicker') {\n                        header.find('.date-filter-control.bootstrap-table-filter-control-' + column.field).datepicker(column.filterDatepickerOptions)\n                            .on('changeDate', function (e) {\n                                $(sprintf(\".%s\", e.currentTarget.classList.toString().split(\" \").join(\".\"))).val(e.currentTarget.value);\n                                //Fired the keyup event\n                                $(e.currentTarget).keyup();\n                            });\n                    }\n                });\n            }\n        } else {\n            header.find('.filterControl').hide();\n        }\n    };\n\n    var getDirectionOfSelectOptions = function (alignment) {\n        alignment = alignment === undefined ? 'left' : alignment.toLowerCase();\n\n        switch (alignment) {\n            case 'left':\n                return 'ltr';\n            case 'right':\n                return 'rtl';\n            case 'auto':\n                return 'auto';\n            default:\n                return 'ltr';\n        }\n    };\n\n    var filterDataMethods =\n        {\n            'var': function (filterDataSource, selectControl) {\n                var variableValues = window[filterDataSource];\n                for (var key in variableValues) {\n                    addOptionToSelectControl(selectControl, key, variableValues[key]);\n                }\n                sortSelectControl(selectControl);\n            },\n            'url': function (filterDataSource, selectControl) {\n                $.ajax({\n                    url: filterDataSource,\n                    dataType: 'json',\n                    success: function (data) {\n                        for (var key in data) {\n                            addOptionToSelectControl(selectControl, key, data[key]);\n                        }\n                        sortSelectControl(selectControl);\n                    }\n                });\n            },\n            'json':function (filterDataSource, selectControl) {\n                var variableValues = JSON.parse(filterDataSource);\n                for (var key in variableValues) {\n                    addOptionToSelectControl(selectControl, key, variableValues[key]);\n                }\n                sortSelectControl(selectControl);\n            }\n        };\n\n    var getFilterDataMethod = function (objFilterDataMethod, searchTerm) {\n        var keys = Object.keys(objFilterDataMethod);\n        for (var i = 0; i < keys.length; i++) {\n            if (keys[i] === searchTerm) {\n                return objFilterDataMethod[searchTerm];\n            }\n        }\n        return null;\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, {\n        filterControl: false,\n        onColumnSearch: function (field, text) {\n            return false;\n        },\n        filterShowClear: false,\n        alignmentSelectControlOptions: undefined,\n        filterTemplate: {\n            input: function (that, field, isVisible, placeholder) {\n                return sprintf('<input type=\"text\" class=\"form-control bootstrap-table-filter-control-%s\" style=\"width: 100%; visibility: %s\" placeholder=\"%s\">', field, isVisible, placeholder);\n            },\n            select: function (that, field, isVisible) {\n                return sprintf('<select class=\"form-control bootstrap-table-filter-control-%s\" style=\"width: 100%; visibility: %s\" dir=\"%s\"></select>',\n                    field, isVisible, getDirectionOfSelectOptions(that.options.alignmentSelectControlOptions));\n            },\n            datepicker: function (that, field, isVisible) {\n                return sprintf('<input type=\"text\" class=\"form-control date-filter-control bootstrap-table-filter-control-%s\" style=\"width: 100%; visibility: %s\">', field, isVisible);\n            }\n        },\n        //internal variables\n        valuesFilterControl: []\n    });\n\n    $.extend($.fn.bootstrapTable.COLUMN_DEFAULTS, {\n        filterControl: undefined,\n        filterData: undefined,\n        filterDatepickerOptions: undefined,\n        filterStrictSearch: false,\n        filterStartsWithSearch: false,\n        filterControlPlaceholder: \"\"\n    });\n\n    $.extend($.fn.bootstrapTable.Constructor.EVENTS, {\n        'column-search.bs.table': 'onColumnSearch'\n    });\n\n    $.extend($.fn.bootstrapTable.defaults.icons, {\n        clear: 'glyphicon-trash icon-clear'\n    });\n\n    $.extend($.fn.bootstrapTable.locales, {\n        formatClearFilters: function () {\n            return 'Clear Filters';\n        }\n    });\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales);\n\n    var BootstrapTable = $.fn.bootstrapTable.Constructor,\n        _init = BootstrapTable.prototype.init,\n        _initToolbar = BootstrapTable.prototype.initToolbar,\n        _initHeader = BootstrapTable.prototype.initHeader,\n        _initBody = BootstrapTable.prototype.initBody,\n        _initSearch = BootstrapTable.prototype.initSearch;\n\n    BootstrapTable.prototype.init = function () {\n        //Make sure that the filterControl option is set\n        if (this.options.filterControl) {\n            var that = this;\n\n            // Compatibility: IE < 9 and old browsers\n            if (!Object.keys) {\n                objectKeys();\n            }\n\n            //Make sure that the internal variables are set correctly\n            this.options.valuesFilterControl = [];\n\n            this.$el.on('reset-view.bs.table', function () {\n                //Create controls on $tableHeader if the height is set\n                if (!that.options.height) {\n                    return;\n                }\n\n                //Avoid recreate the controls\n                if (that.$tableHeader.find('select').length > 0 || that.$tableHeader.find('input').length > 0) {\n                    return;\n                }\n\n                createControls(that, that.$tableHeader);\n            }).on('post-header.bs.table', function () {\n                setValues(that);\n            }).on('post-body.bs.table', function () {\n                if (that.options.height) {\n                    fixHeaderCSS(that);\n                }\n            }).on('column-switch.bs.table', function() {\n                setValues(that);\n            });\n        }\n        _init.apply(this, Array.prototype.slice.apply(arguments));\n    };\n\n    BootstrapTable.prototype.initToolbar = function () {\n        this.showToolbar = this.options.filterControl && this.options.filterShowClear;\n\n        _initToolbar.apply(this, Array.prototype.slice.apply(arguments));\n\n        if (this.options.filterControl && this.options.filterShowClear) {\n            var $btnGroup = this.$toolbar.find('>.btn-group'),\n                $btnClear = $btnGroup.find('.filter-show-clear');\n\n            if (!$btnClear.length) {\n                $btnClear = $([\n                    '<button class=\"btn btn-default filter-show-clear\" ',\n                    sprintf('type=\"button\" title=\"%s\">', this.options.formatClearFilters()),\n                    sprintf('<i class=\"%s %s\"></i> ', this.options.iconsPrefix, this.options.icons.clear),\n                    '</button>'\n                ].join('')).appendTo($btnGroup);\n\n                $btnClear.off('click').on('click', $.proxy(this.clearFilterControl, this));\n            }\n        }\n    };\n\n    BootstrapTable.prototype.initHeader = function () {\n        _initHeader.apply(this, Array.prototype.slice.apply(arguments));\n\n        if (!this.options.filterControl) {\n            return;\n        }\n        createControls(this, this.$header);\n    };\n\n    BootstrapTable.prototype.initBody = function () {\n        _initBody.apply(this, Array.prototype.slice.apply(arguments));\n\n        initFilterSelectControls(this);\n    };\n\n    BootstrapTable.prototype.initSearch = function () {\n        _initSearch.apply(this, Array.prototype.slice.apply(arguments));\n\n        if (this.options.sidePagination === 'server') {\n            return;\n        }\n\n        var that = this;\n        var fp = $.isEmptyObject(this.filterColumnsPartial) ? null : this.filterColumnsPartial;\n\n        //Check partial column filter\n        this.data = fp ? $.grep(this.data, function (item, i) {\n            for (var key in fp) {\n                var thisColumn = that.columns[$.fn.bootstrapTable.utils.getFieldIndex(that.columns, key)];\n                var fval = fp[key].toLowerCase();\n                var value = item[key];\n\n                // Fix #142: search use formated data\n                if (thisColumn && thisColumn.searchFormatter) {\n                    value = $.fn.bootstrapTable.utils.calculateObjectValue(that.header,\n                    that.header.formatters[$.inArray(key, that.header.fields)],\n                    [value, item, i], value);\n                }\n\n                if (thisColumn.filterStrictSearch) {\n                    if (!($.inArray(key, that.header.fields) !== -1 &&\n                        (typeof value === 'string' || typeof value === 'number') &&\n                        value.toString().toLowerCase() === fval.toString().toLowerCase())) {\n                        return false;\n                    }\n                } else if (thisColumn.filterStartsWithSearch) {\n                  if (!($.inArray(key, that.header.fields) !== -1 &&\n                      (typeof value === 'string' || typeof value === 'number') &&\n                      (value + '').toLowerCase().indexOf(fval) === 0)) {\n                      return false;\n                  }\n                } else {\n                    if (!($.inArray(key, that.header.fields) !== -1 &&\n                        (typeof value === 'string' || typeof value === 'number') &&\n                        (value + '').toLowerCase().indexOf(fval) !== -1)) {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        }) : this.data;\n    };\n\n    BootstrapTable.prototype.initColumnSearch = function(filterColumnsDefaults) {\n        copyValues(this);\n\n        if (filterColumnsDefaults) {\n            this.filterColumnsPartial = filterColumnsDefaults;\n            this.updatePagination();\n\n            for (var filter in filterColumnsDefaults) {\n              this.trigger('column-search', filter, filterColumnsDefaults[filter]);\n            }\n        }\n    };\n\n    BootstrapTable.prototype.onColumnSearch = function (event) {\n        if ($.inArray(event.keyCode, [37, 38, 39, 40]) > -1) {\n            return;\n        }\n\n        copyValues(this);\n        var text = $.trim($(event.currentTarget).val());\n        var $field = $(event.currentTarget).closest('[data-field]').data('field');\n\n        if ($.isEmptyObject(this.filterColumnsPartial)) {\n            this.filterColumnsPartial = {};\n        }\n        if (text) {\n            this.filterColumnsPartial[$field] = text;\n        } else {\n            delete this.filterColumnsPartial[$field];\n        }\n\n        // if the searchText is the same as the previously selected column value,\n        // bootstrapTable will not try searching again (even though the selected column\n        // may be different from the previous search).  As a work around\n        // we're manually appending some text to bootrap's searchText field\n        // to guarantee that it will perform a search again when we call this.onSearch(event)\n        this.searchText += \"randomText\";\n\n        this.options.pageNumber = 1;\n        this.onSearch(event);\n        this.trigger('column-search', $field, text);\n    };\n\n    BootstrapTable.prototype.clearFilterControl = function () {\n        if (this.options.filterControl && this.options.filterShowClear) {\n            var that = this,\n                cookies = collectBootstrapCookies(),\n                header = getCurrentHeader(that),\n                table = header.closest('table'),\n                controls = header.find(getCurrentSearchControls(that)),\n                search = that.$toolbar.find('.search input'),\n                timeoutId = 0;\n\n            $.each(that.options.valuesFilterControl, function (i, item) {\n                item.value = '';\n            });\n\n            setValues(that);\n\n            // Clear each type of filter if it exists.\n            // Requires the body to reload each time a type of filter is found because we never know\n            // which ones are going to be present.\n            if (controls.length > 0) {\n                this.filterColumnsPartial = {};\n                $(controls[0]).trigger(controls[0].tagName === 'INPUT' ? 'keyup' : 'change');\n            } else {\n                return;\n            }\n\n            if (search.length > 0) {\n                that.resetSearch();\n            }\n\n            // use the default sort order if it exists. do nothing if it does not\n            if (that.options.sortName !== table.data('sortName') || that.options.sortOrder !== table.data('sortOrder')) {\n                var sorter = header.find(sprintf('[data-field=\"%s\"]', $(controls[0]).closest('table').data('sortName')));\n                if (sorter.length > 0) {\n                    that.onSort(table.data('sortName'), table.data('sortName'));\n                    $(sorter).find('.sortable').trigger('click');\n                }\n            }\n\n            // clear cookies once the filters are clean\n            clearTimeout(timeoutId);\n            timeoutId = setTimeout(function () {\n                if (cookies && cookies.length > 0) {\n                    $.each(cookies, function (i, item) {\n                        if (that.deleteCookie !== undefined) {\n                            that.deleteCookie(item);\n                        }\n                    });\n                }\n            }, that.options.searchTimeOut);\n        }\n    };\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/extensions/flat-json/bootstrap-table-flat-json.js":"/**\n * @author: Dennis Hernández\n * @webSite: http://djhvscf.github.io/Blog\n * @version: v1.3.0\n */\n\n(function ($) {\n    'use strict';\n\n    var flat = function (element, that) {\n        var result = {};\n\n        function recurse(cur, prop) {\n            if (Object(cur) !== cur) {\n                result[prop] = cur;\n            } else if ($.isArray(cur)) {\n                for (var i = 0, l = cur.length; i < l; i++) {\n                    recurse(cur[i], prop ? prop + that.options.flatSeparator + i : \"\" + i);\n                    if (l == 0) {\n                        result[prop] = [];\n                    }\n                }\n            } else {\n                var isEmpty = true;\n                for (var p in cur) {\n                    isEmpty = false;\n                    recurse(cur[p], prop ? prop + that.options.flatSeparator + p : p);\n                }\n                if (isEmpty) {\n                    result[prop] = {};\n                }\n            }\n        }\n\n        recurse(element, \"\");\n        return result;\n    };\n\n    var flatHelper = function (data, that) {\n        var flatArray = [];\n\n        $.each(!$.isArray(data) ? [data] : data, function (i, element) {\n            flatArray.push(flat(element, that));\n        });\n        return flatArray;\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, {\n        flat: false,\n        flatSeparator: '.'\n    });\n\n    var BootstrapTable = $.fn.bootstrapTable.Constructor,\n        _initData = BootstrapTable.prototype.initData;\n\n    BootstrapTable.prototype.initData = function (data, type) {\n        if (this.options.flat) {\n            data = flatHelper(data ? data : this.options.data, this);\n        }\n        _initData.apply(this, [data, type]);\n    };\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/extensions/group-by/bootstrap-table-group-by.js":"/**\n * @author: Dennis Hernández\n * @webSite: http://djhvscf.github.io/Blog\n * @version: v1.1.0\n */\n\n!function ($) {\n\n    'use strict';\n\n    var originalRowAttr,\n        dataTTId = 'data-tt-id',\n        dataTTParentId = 'data-tt-parent-id',\n        obj = {},\n        parentId = undefined;\n\n    var getParentRowId = function (that, id) {\n        var parentRows = that.$body.find('tr').not('[' + 'data-tt-parent-id]');\n\n        for (var i = 0; i < parentRows.length; i++) {\n            if (i === id) {\n                return $(parentRows[i]).attr('data-tt-id');\n            }\n        }\n\n        return undefined;\n    };\n\n    var sumData = function (that, data) {\n        var sumRow = {};\n        $.each(data, function (i, row) {\n            if (!row.IsParent) {\n                for (var prop in row) {\n                    if (!isNaN(parseFloat(row[prop]))) {\n                        if (that.columns[$.fn.bootstrapTable.utils.getFieldIndex(that.columns, prop)].groupBySumGroup) {\n                            if (sumRow[prop] === undefined) {\n                                sumRow[prop] = 0;\n                            }\n                            sumRow[prop] += +row[prop];\n                        }\n                    }\n                }\n            }\n        });\n        return sumRow;\n    };\n\n    var rowAttr = function (row, index) {\n        //Call the User Defined Function\n        originalRowAttr.apply([row, index]);\n\n        obj[dataTTId.toString()] = index;\n\n        if (!row.IsParent) {\n            obj[dataTTParentId.toString()] = parentId === undefined ? index : parentId;\n        } else {\n            parentId = index;\n            delete obj[dataTTParentId.toString()];\n        }\n\n        return obj;\n    };\n\n    var setObjectKeys = function () {\n        // From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\n        Object.keys = function (o) {\n            if (o !== Object(o)) {\n                throw new TypeError('Object.keys called on a non-object');\n            }\n            var k = [],\n                p;\n            for (p in o) {\n                if (Object.prototype.hasOwnProperty.call(o, p)) {\n                    k.push(p);\n                }\n            }\n            return k;\n        }\n    };\n\n    var getDataArrayFromItem = function (that, item) {\n        var itemDataArray = [];\n        for (var i = 0; i < that.options.groupByField.length; i++) {\n            itemDataArray.push(item[that.options.groupByField[i]]);\n        }\n\n        return itemDataArray;\n    };\n\n    var getNewRow = function (that, result, index) {\n        var newRow = {};\n        for (var i = 0; i < that.options.groupByField.length; i++) {\n            newRow[that.options.groupByField[i].toString()] = result[index][0][that.options.groupByField[i]];\n        }\n\n        newRow.IsParent = true;\n\n        return newRow;\n    };\n\n    var groupBy = function (array, f) {\n        var groups = {};\n        $.each(array, function (i, o) {\n            var group = JSON.stringify(f(o));\n            groups[group] = groups[group] || [];\n            groups[group].push(o);\n        });\n        return Object.keys(groups).map(function (group) {\n            return groups[group];\n        });\n    };\n\n    var makeGrouped = function (that, data) {\n        var newData = [],\n            sumRow = {};\n\n        var result = groupBy(data, function (item) {\n            return getDataArrayFromItem(that, item);\n        });\n\n        for (var i = 0; i < result.length; i++) {\n            result[i].unshift(getNewRow(that, result, i));\n            if (that.options.groupBySumGroup) {\n                sumRow = sumData(that, result[i]);\n                if (!$.isEmptyObject(sumRow)) {\n                    result[i].push(sumRow);\n                }\n            }\n        }\n\n        newData = newData.concat.apply(newData, result);\n\n        if (!that.options.loaded && newData.length > 0) {\n            that.options.loaded = true;\n            that.options.originalData = that.options.data;\n            that.options.data = newData;\n        }\n\n        return newData;\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, {\n        groupBy: false,\n        groupByField: [],\n        groupBySumGroup: false,\n        groupByInitExpanded: undefined, //node, 'all'\n        //internal variables\n        loaded: false,\n        originalData: undefined\n    });\n\n    $.fn.bootstrapTable.methods.push('collapseAll', 'expandAll', 'refreshGroupByField');\n\n    $.extend($.fn.bootstrapTable.COLUMN_DEFAULTS, {\n        groupBySumGroup: false\n    });\n\n    var BootstrapTable = $.fn.bootstrapTable.Constructor,\n        _init = BootstrapTable.prototype.init,\n        _initData = BootstrapTable.prototype.initData;\n\n    BootstrapTable.prototype.init = function () {\n        //Temporal validation\n        if (!this.options.sortName) {\n            if ((this.options.groupBy) && (this.options.groupByField.length > 0)) {\n                var that = this;\n\n                // Compatibility: IE < 9 and old browsers\n                if (!Object.keys) {\n                    $.fn.bootstrapTable.utils.objectKeys();\n                }\n\n                //Make sure that the internal variables are set correctly\n                this.options.loaded = false;\n                this.options.originalData = undefined;\n\n                originalRowAttr = this.options.rowAttributes;\n                this.options.rowAttributes = rowAttr;\n                this.$el.on('post-body.bs.table', function () {\n                    that.$el.treetable({\n                        expandable: true,\n                        onNodeExpand: function () {\n                            if (that.options.height) {\n                                that.resetHeader();\n                            }\n                        },\n                        onNodeCollapse: function () {\n                            if (that.options.height) {\n                                that.resetHeader();\n                            }\n                        }\n                    }, true);\n\n                    if (that.options.groupByInitExpanded !== undefined) {\n                        if (typeof that.options.groupByInitExpanded === 'number') {\n                            that.expandNode(that.options.groupByInitExpanded);\n                        } else if (that.options.groupByInitExpanded.toLowerCase() === 'all') {\n                            that.expandAll();\n                        }\n                    }\n                });\n            }\n        }\n        _init.apply(this, Array.prototype.slice.apply(arguments));\n    };\n\n    BootstrapTable.prototype.initData = function (data, type) {\n        //Temporal validation\n        if (!this.options.sortName) {\n            if ((this.options.groupBy) && (this.options.groupByField.length > 0)) {\n\n                this.options.groupByField = typeof this.options.groupByField === 'string' ?\n                    this.options.groupByField.replace('[', '').replace(']', '')\n                        .replace(/ /g, '').toLowerCase().split(',') : this.options.groupByField;\n\n                data = makeGrouped(this, data ? data : this.options.data);\n            }\n        }\n        _initData.apply(this, [data, type]);\n    };\n\n    BootstrapTable.prototype.expandAll = function () {\n        this.$el.treetable('expandAll');\n    };\n\n    BootstrapTable.prototype.collapseAll = function () {\n        this.$el.treetable('collapseAll');\n    };\n\n    BootstrapTable.prototype.expandNode = function (id) {\n        id = getParentRowId(this, id);\n        if (id !== undefined) {\n            this.$el.treetable('expandNode', id);\n        }\n    };\n\n    BootstrapTable.prototype.refreshGroupByField = function (groupByFields) {\n        if (!$.fn.bootstrapTable.utils.compareObjects(this.options.groupByField, groupByFields)) {\n            this.options.groupByField = groupByFields;\n            this.load(this.options.originalData);\n        }\n    };\n}(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/extensions/group-by-v2/bootstrap-table-group-by.js":"/**\n * @author: Yura Knoxville\n * @version: v1.0.0\n */\n\n!function ($) {\n\n    'use strict';\n\n    var initBodyCaller,\n        tableGroups;\n\n    // it only does '%s', and return '' when arguments are undefined\n    var sprintf = function (str) {\n        var args = arguments,\n            flag = true,\n            i = 1;\n\n        str = str.replace(/%s/g, function () {\n            var arg = args[i++];\n\n            if (typeof arg === 'undefined') {\n                flag = false;\n                return '';\n            }\n            return arg;\n        });\n        return flag ? str : '';\n    };\n\n    var groupBy = function (array , f) {\n        var groups = {};\n        array.forEach(function(o) {\n            var group = f(o);\n            groups[group] = groups[group] || [];\n            groups[group].push(o);\n        });\n\n        return groups;\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, {\n        groupBy: false,\n        groupByField: ''\n    });\n\n    var BootstrapTable = $.fn.bootstrapTable.Constructor,\n        _initSort = BootstrapTable.prototype.initSort,\n        _initBody = BootstrapTable.prototype.initBody,\n        _updateSelected = BootstrapTable.prototype.updateSelected;\n\n    BootstrapTable.prototype.initSort = function () {\n        _initSort.apply(this, Array.prototype.slice.apply(arguments));\n\n        var that = this;\n        tableGroups = [];\n\n        if ((this.options.groupBy) && (this.options.groupByField !== '')) {\n\n            if ((this.options.sortName != this.options.groupByField)) {\n                this.data.sort(function(a, b) {\n                    return a[that.options.groupByField].localeCompare(b[that.options.groupByField]);\n                });\n            }\n\n            var that = this;\n            var groups = groupBy(that.data, function (item) {\n                return [item[that.options.groupByField]];\n            });\n\n            var index = 0;\n            $.each(groups, function(key, value) {\n                tableGroups.push({\n                    id: index,\n                    name: key\n                });\n\n                value.forEach(function(item) {\n                    if (!item._data) {\n                        item._data = {};\n                    }\n\n                    item._data['parent-index'] = index;\n                });\n\n                index++;\n            });\n        }\n    }\n\n    BootstrapTable.prototype.initBody = function () {\n        initBodyCaller = true;\n\n        _initBody.apply(this, Array.prototype.slice.apply(arguments));\n\n        if ((this.options.groupBy) && (this.options.groupByField !== '')) {\n            var that = this,\n                checkBox = false,\n                visibleColumns = 0;\n\n            this.columns.forEach(function(column) {\n                if (column.checkbox) {\n                    checkBox = true;\n                } else {\n                    if (column.visible) {\n                        visibleColumns += 1;\n                    }\n                }\n            });\n\n            if (this.options.detailView && !this.options.cardView) {\n                visibleColumns += 1;\n            }\n\n            tableGroups.forEach(function(item){\n                var html = [];\n\n                html.push(sprintf('<tr class=\"info groupBy expanded\" data-group-index=\"%s\">', item.id));\n\n                if (that.options.detailView && !that.options.cardView) {\n                    html.push('<td class=\"detail\"></td>');\n                }\n\n                if (checkBox) {\n                    html.push('<td class=\"bs-checkbox\">',\n                        '<input name=\"btSelectGroup\" type=\"checkbox\" />',\n                        '</td>'\n                    );\n                }\n\n                html.push('<td',\n                    sprintf(' colspan=\"%s\"', visibleColumns),\n                    '>', item.name, '</td>'\n                );\n\n                html.push('</tr>');\n\n                that.$body.find('tr[data-parent-index='+item.id+']:first').before($(html.join('')));\n            });\n\n            this.$selectGroup = [];\n            this.$body.find('[name=\"btSelectGroup\"]').each(function() {\n                var self = $(this);\n\n                that.$selectGroup.push({\n                    group: self,\n                    item: that.$selectItem.filter(function () {\n                        return ($(this).closest('tr').data('parent-index') ===\n                        self.closest('tr').data('group-index'));\n                    })\n                });\n            });\n\n            this.$container.off('click', '.groupBy')\n                .on('click', '.groupBy', function() {\n                    $(this).toggleClass('expanded');\n                    that.$body.find('tr[data-parent-index='+$(this).closest('tr').data('group-index')+']').toggleClass('hidden');\n                });\n\n            this.$container.off('click', '[name=\"btSelectGroup\"]')\n                .on('click', '[name=\"btSelectGroup\"]', function (event) {\n                    event.stopImmediatePropagation();\n\n                    var self = $(this);\n                    var checked = self.prop('checked');\n                    that[checked ? 'checkGroup' : 'uncheckGroup']($(this).closest('tr').data('group-index'));\n                });\n        }\n\n        initBodyCaller = false;\n        this.updateSelected();\n    };\n\n    BootstrapTable.prototype.updateSelected = function () {\n        if (!initBodyCaller) {\n            _updateSelected.apply(this, Array.prototype.slice.apply(arguments));\n\n            if ((this.options.groupBy) && (this.options.groupByField !== '')) {\n                this.$selectGroup.forEach(function (item) {\n                    var checkGroup = item.item.filter(':enabled').length ===\n                        item.item.filter(':enabled').filter(':checked').length;\n\n                    item.group.prop('checked', checkGroup);\n                });\n            }\n        }\n    };\n\n    BootstrapTable.prototype.getGroupSelections = function (index) {\n        var that = this;\n\n        return $.grep(this.data, function (row) {\n            return (row[that.header.stateField] && (row._data['parent-index'] === index));\n        });\n    };\n\n    BootstrapTable.prototype.checkGroup = function (index) {\n        this.checkGroup_(index, true);\n    };\n\n    BootstrapTable.prototype.uncheckGroup = function (index) {\n        this.checkGroup_(index, false);\n    };\n\n    BootstrapTable.prototype.checkGroup_ = function (index, checked) {\n        var rows;\n        var filter = function() {\n            return ($(this).closest('tr').data('parent-index') === index);\n        };\n\n        if (!checked) {\n            rows = this.getGroupSelections(index);\n        }\n\n        this.$selectItem.filter(filter).prop('checked', checked);\n\n\n        this.updateRows();\n        this.updateSelected();\n        if (checked) {\n            rows = this.getGroupSelections(index);\n        }\n        this.trigger(checked ? 'check-all' : 'uncheck-all', rows);\n    };\n\n}(jQuery);","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/extensions/i18n-enhance/bootstrap-table-i18n-enhance.js":"/**\n * @author: Jewway\n * @version: v1.0.0\n */\n\n!function ($) {\n  'use strict';\n\n  var BootstrapTable = $.fn.bootstrapTable.Constructor;\n\n  BootstrapTable.prototype.changeTitle = function (locale) {\n    $.each(this.options.columns, function (idx, columnList) {\n      $.each(columnList, function (idx, column) {\n        if (column.field) {\n          column.title = locale[column.field];\n        }\n      });\n    });\n\n    this.initHeader();\n    this.initBody();\n    this.initToolbar();\n  };\n\n  BootstrapTable.prototype.changeLocale = function (localeId) {\n    this.options.locale = localeId;\n    this.initLocale();\n    this.initPagination();\n  };\n\n  $.fn.bootstrapTable.methods.push('changeTitle');\n  $.fn.bootstrapTable.methods.push('changeLocale');\n\n}(jQuery);","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/extensions/key-events/bootstrap-table-key-events.js":"/**\n * @author: Dennis Hernández\n * @webSite: http://djhvscf.github.io/Blog\n * @version: v1.0.0\n *\n * @update zhixin wen <wenzhixin2010@gmail.com>\n */\n\n!function ($) {\n\n    'use strict';\n\n    $.extend($.fn.bootstrapTable.defaults, {\n        keyEvents: false\n    });\n\n    var BootstrapTable = $.fn.bootstrapTable.Constructor,\n        _init = BootstrapTable.prototype.init;\n\n    BootstrapTable.prototype.init = function () {\n        _init.apply(this, Array.prototype.slice.apply(arguments));\n        this.initKeyEvents();\n    };\n\n    BootstrapTable.prototype.initKeyEvents = function () {\n        if (this.options.keyEvents) {\n            var that = this;\n\n            $(document).off('keydown').on('keydown', function (e) {\n                var $search = that.$toolbar.find('.search input'),\n                    $refresh = that.$toolbar.find('button[name=\"refresh\"]'),\n                    $toggle = that.$toolbar.find('button[name=\"toggle\"]'),\n                    $paginationSwitch = that.$toolbar.find('button[name=\"paginationSwitch\"]');\n\n                if (document.activeElement === $search.get(0) || !$.contains(document.activeElement ,that.$toolbar.get(0))) {\n                    return true;\n                }\n\n                switch (e.keyCode) {\n                    case 83: //s\n                        if (!that.options.search) {\n                            return;\n                        }\n                        $search.focus();\n                        return false;\n                    case 82: //r\n                        if (!that.options.showRefresh) {\n                            return;\n                        }\n                        $refresh.click();\n                        return false;\n                    case 84: //t\n                        if (!that.options.showToggle) {\n                            return;\n                        }\n                        $toggle.click();\n                        return false;\n                    case 80: //p\n                        if (!that.options.showPaginationSwitch) {\n                            return;\n                        }\n                        $paginationSwitch.click();\n                        return false;\n                    case 37: // left\n                        if (!that.options.pagination) {\n                            return;\n                        }\n                        that.prevPage();\n                        return false;\n                    case 39: // right\n                        if (!that.options.pagination) {\n                            return;\n                        }\n                        that.nextPage();\n                        return;\n                }\n            });\n        }\n    };\n}(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/extensions/mobile/bootstrap-table-mobile.js":"/**\n * @author: Dennis Hernández\n * @webSite: http://djhvscf.github.io/Blog\n * @version: v1.1.0\n */\n\n!function ($) {\n\n    'use strict';\n\n    var showHideColumns = function (that, checked) {\n        if (that.options.columnsHidden.length > 0 ) {\n            $.each(that.columns, function (i, column) {\n                if (that.options.columnsHidden.indexOf(column.field) !== -1) {\n                    if (column.visible !== checked) {\n                        that.toggleColumn($.fn.bootstrapTable.utils.getFieldIndex(that.columns, column.field), checked, true);\n                    }\n                }\n            });\n        }\n    };\n\n    var resetView = function (that) {\n        if (that.options.height || that.options.showFooter) {\n            setTimeout(function(){\n                that.resetView.call(that);\n            }, 1);\n        }\n    };\n\n    var changeView = function (that, width, height) {\n        if (that.options.minHeight) {\n            if ((width <= that.options.minWidth) && (height <= that.options.minHeight)) {\n                conditionCardView(that);\n            } else if ((width > that.options.minWidth) && (height > that.options.minHeight)) {\n                conditionFullView(that);\n            }\n        } else {\n            if (width <= that.options.minWidth) {\n                conditionCardView(that);\n            } else if (width > that.options.minWidth) {\n                conditionFullView(that);\n            }\n        }\n\n        resetView(that);\n    };\n\n    var conditionCardView = function (that) {\n        changeTableView(that, false);\n        showHideColumns(that, false);\n    };\n\n    var conditionFullView = function (that) {\n        changeTableView(that, true);\n        showHideColumns(that, true);\n    };\n\n    var changeTableView = function (that, cardViewState) {\n        that.options.cardView = cardViewState;\n        that.toggleView();\n    };\n\n    var debounce = function(func,wait) {\n        var timeout;\n        return function() {\n            var context = this,\n                args = arguments;\n            var later = function() {\n                timeout = null;\n                func.apply(context,args);\n            };\n            clearTimeout(timeout);\n            timeout = setTimeout(later, wait);\n        };\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, {\n        mobileResponsive: false,\n        minWidth: 562,\n        minHeight: undefined,\n        heightThreshold: 100, // just slightly larger than mobile chrome's auto-hiding toolbar\n        checkOnInit: true,\n        columnsHidden: []\n    });\n\n    var BootstrapTable = $.fn.bootstrapTable.Constructor,\n        _init = BootstrapTable.prototype.init;\n\n    BootstrapTable.prototype.init = function () {\n        _init.apply(this, Array.prototype.slice.apply(arguments));\n\n        if (!this.options.mobileResponsive) {\n            return;\n        }\n\n        if (!this.options.minWidth) {\n            return;\n        }\n\n        if (this.options.minWidth < 100 && this.options.resizable) {\n            console.log(\"The minWidth when the resizable extension is active should be greater or equal than 100\");\n            this.options.minWidth = 100;\n        }\n\n        var that = this,\n            old = {\n                width: $(window).width(),\n                height: $(window).height()\n            };\n\n        $(window).on('resize orientationchange',debounce(function (evt) {\n            // reset view if height has only changed by at least the threshold.\n            var height = $(this).height(),\n                width = $(this).width();\n\n            if (Math.abs(old.height - height) > that.options.heightThreshold || old.width != width) {\n                changeView(that, width, height);\n                old = {\n                    width: width,\n                    height: height\n                };\n            }\n        },200));\n\n        if (this.options.checkOnInit) {\n            var height = $(window).height(),\n                width = $(window).width();\n            changeView(this, width, height);\n            old = {\n                width: width,\n                height: height\n            };\n        }\n    };\n}(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/extensions/multi-column-toggle/bootstrap-table-multi-toggle.js":"/**\n * @author Homer Glascock <HopGlascock@gmail.com>\n * @version: v1.0.0\n */\n\n !function ($) {\n    \"use strict\";\n\n    var sprintf = $.fn.bootstrapTable.utils.sprintf;\n\n    var reInit = function (self) {\n        self.initHeader();\n        self.initSearch();\n        self.initPagination();\n        self.initBody();\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, {\n        showToggleBtn: false,\n        multiToggleDefaults: [], //column names go here\n    });\n\n    $.fn.bootstrapTable.methods.push('hideAllColumns', 'showAllColumns');\n\n    var BootstrapTable = $.fn.bootstrapTable.Constructor,\n        _initToolbar = BootstrapTable.prototype.initToolbar;\n\n    BootstrapTable.prototype.initToolbar = function () {\n\n        _initToolbar.apply(this, Array.prototype.slice.apply(arguments));\n\n        var that = this,\n            $btnGroup = this.$toolbar.find('>.btn-group');\n\n        if (typeof this.options.multiToggleDefaults === 'string') {\n            this.options.multiToggleDefaults = JSON.parse(this.options.multiToggleDefaults);\n        }\n\n        if (this.options.showToggleBtn && this.options.showColumns) {\n            var showbtn = \"<button class='btn btn-default hidden' id='showAllBtn'><span class='glyphicon glyphicon-resize-full icon-zoom-in'></span></button>\",\n                hidebtn = \"<button class='btn btn-default' id='hideAllBtn'><span class='glyphicon glyphicon-resize-small icon-zoom-out'></span></button>\";\n\n            $btnGroup.append(showbtn + hidebtn);\n\n            $btnGroup.find('#showAllBtn').click(function () { that.showAllColumns(); \n                $btnGroup.find('#hideAllBtn').toggleClass('hidden');\n                $btnGroup.find('#showAllBtn').toggleClass('hidden');  \n            });\n            $btnGroup.find('#hideAllBtn').click(function () { that.hideAllColumns(); \n                $btnGroup.find('#hideAllBtn').toggleClass('hidden');\n                $btnGroup.find('#showAllBtn').toggleClass('hidden');  \n            });\n        }\n    };\n\n    BootstrapTable.prototype.hideAllColumns = function () {\n        var that = this,\n            defaults = that.options.multiToggleDefaults;\n\n        $.each(this.columns, function (index, column) {\n            //if its one of the defaults dont touch it\n            if (defaults.indexOf(column.field) == -1 && column.switchable) {\n                column.visible = false;\n                var $items = that.$toolbar.find('.keep-open input').prop('disabled', false);\n                $items.filter(sprintf('[value=\"%s\"]', index)).prop('checked', false);\n            }\n        });\n\n        reInit(that);\n    };\n\n    BootstrapTable.prototype.showAllColumns = function () {\n        var that = this;\n        $.each(this.columns, function (index, column) {\n            if (column.switchable) {\n                column.visible = true;\n            }\n\n            var $items = that.$toolbar.find('.keep-open input').prop('disabled', false);\n            $items.filter(sprintf('[value=\"%s\"]', index)).prop('checked', true);\n        });\n\n        reInit(that);\n\n        that.toggleColumn(0, that.columns[0].visible, false);\n    };\n    \n}(jQuery);","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/extensions/multiple-search/bootstrap-table-multiple-search.js":"/**\n * @author: Dennis Hernández\n * @webSite: http://djhvscf.github.io/Blog\n * @version: v1.0.0\n */\n\n!function ($) {\n\n    'use strict';\n\n    $.extend($.fn.bootstrapTable.defaults, {\n        multipleSearch: false,\n\t    delimeter: \" \"\n    });\n\n    var BootstrapTable = $.fn.bootstrapTable.Constructor,\n        _initSearch = BootstrapTable.prototype.initSearch;\n\n    BootstrapTable.prototype.initSearch = function () {\n        if (this.options.multipleSearch) {\n            if (this.searchText === undefined) {\n                return;\n            }\n            var strArray = this.searchText.split(this.options.delimeter),\n                that = this,\n                f = $.isEmptyObject(this.filterColumns) ? null : this.filterColumns,\n                dataFiltered = [];\n\n            if (strArray.length === 1) {\n                _initSearch.apply(this, Array.prototype.slice.apply(arguments));\n            } else {\n                for (var i = 0; i < strArray.length; i++) {\n                    var str = strArray[i].trim();\n                    dataFiltered = str ? $.grep(dataFiltered.length === 0 ? this.options.data : dataFiltered, function (item, i) {\n                        for (var key in item) {\n                            key = $.isNumeric(key) ? parseInt(key, 10) : key;\n                            var value = item[key],\n                                column = that.columns[$.fn.bootstrapTable.utils.getFieldIndex(that.columns, key)],\n                                j = $.inArray(key, that.header.fields);\n\n                            // Fix #142: search use formated data\n                            if (column && column.searchFormatter) {\n                                value = $.fn.bootstrapTable.utils.calculateObjectValue(column,\n                                    that.header.formatters[j], [value, item, i], value);\n                            }\n\n                            var index = $.inArray(key, that.header.fields);\n                            if (index !== -1 && that.header.searchables[index] && (typeof value === 'string' || typeof value === 'number')) {\n                                if (that.options.strictSearch) {\n                                    if ((value + '').toLowerCase() === str) {\n                                        return true;\n                                    }\n                                } else {\n                                    if ((value + '').toLowerCase().indexOf(str) !== -1) {\n                                        return true;\n                                    }\n                                }\n                            }\n                        }\n                        return false;\n                    }) : this.data;\n                }\n\n                this.data = dataFiltered;\n            }\n        } else {\n            _initSearch.apply(this, Array.prototype.slice.apply(arguments));\n        }\n    };\n\n}(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/extensions/multiple-selection-row/bootstrap-table-multiple-selection-row.js":"/**\n * @author: Dennis Hernández\n * @webSite: http://djhvscf.github.io/Blog\n * @version: v1.0.0\n */\n\n!function ($) {\n\n    'use strict';\n\n    document.onselectstart = function() {\n        return false;\n    };\n\n    var getTableObjectFromCurrentTarget = function (currentTarget) {\n        currentTarget = $(currentTarget);\n        return currentTarget.is(\"table\") ? currentTarget : currentTarget.parents().find(\".table\");\n    };\n\n    var getRow = function (target) {\n        target = $(target);\n        return target.parent().parent();\n    };\n\n    var onRowClick = function (e) {\n        var that = getTableObjectFromCurrentTarget(e.currentTarget);\n\n        if (window.event.ctrlKey) {\n            toggleRow(e.currentTarget, that, false, false);\n        }\n\n        if (window.event.button === 0) {\n            if (!window.event.ctrlKey && !window.event.shiftKey) {\n                clearAll(that);\n                toggleRow(e.currentTarget, that, false, false);\n            }\n\n            if (window.event.shiftKey) {\n                selectRowsBetweenIndexes([that.bootstrapTable(\"getOptions\").multipleSelectRowLastSelectedRow.rowIndex, e.currentTarget.rowIndex], that)\n            }\n        }\n    };\n\n    var onCheckboxChange = function (e) {\n        var that = getTableObjectFromCurrentTarget(e.currentTarget);\n        clearAll(that);\n        toggleRow(getRow(e.currentTarget), that, false, false);\n    };\n\n    var toggleRow = function (row, that, clearAll, useShift) {\n        if (clearAll) {\n            row = $(row);\n            that.bootstrapTable(\"getOptions\").multipleSelectRowLastSelectedRow = undefined;\n            row.removeClass(that.bootstrapTable(\"getOptions\").multipleSelectRowCssClass);\n            that.bootstrapTable(\"uncheck\", row.data(\"index\"));    \n        } else {\n            that.bootstrapTable(\"getOptions\").multipleSelectRowLastSelectedRow = row;\n            row = $(row);\n            if (useShift) {\n                row.addClass(that.bootstrapTable(\"getOptions\").multipleSelectRowCssClass);\n                that.bootstrapTable(\"check\", row.data(\"index\"));  \n            } else {\n                if(row.hasClass(that.bootstrapTable(\"getOptions\").multipleSelectRowCssClass)) {\n                    row.removeClass(that.bootstrapTable(\"getOptions\").multipleSelectRowCssClass)\n                    that.bootstrapTable(\"uncheck\", row.data(\"index\"));  \n                } else {\n                    row.addClass(that.bootstrapTable(\"getOptions\").multipleSelectRowCssClass);\n                    that.bootstrapTable(\"check\", row.data(\"index\"));  \n                }\n            }\n        }\n    };\n\n    var selectRowsBetweenIndexes = function (indexes, that) {\n        indexes.sort(function(a, b) {\n            return a - b;\n        });\n\n        for (var i = indexes[0]; i <= indexes[1]; i++) {\n            toggleRow(that.bootstrapTable(\"getOptions\").multipleSelectRowRows[i-1], that, false, true);\n        }\n    };\n\n    var clearAll = function (that) {\n        for (var i = 0; i < that.bootstrapTable(\"getOptions\").multipleSelectRowRows.length; i++) {\n            toggleRow(that.bootstrapTable(\"getOptions\").multipleSelectRowRows[i], that, true, false);\n        }\n    };\n    \n    $.extend($.fn.bootstrapTable.defaults, {\n        multipleSelectRow: false,\n        multipleSelectRowCssClass: 'multiple-select-row-selected',\n        //internal variables used by the extension\n        multipleSelectRowLastSelectedRow: undefined,\n        multipleSelectRowRows: []\n    });\n\n    var BootstrapTable = $.fn.bootstrapTable.Constructor,\n        _init = BootstrapTable.prototype.init,\n        _initBody = BootstrapTable.prototype.initBody;\n\n    BootstrapTable.prototype.init = function () {\n        if (this.options.multipleSelectRow) {\n            var that = this;\n\n            //Make sure that the internal variables have the correct value\n            this.options.multipleSelectRowLastSelectedRow = undefined;\n            this.options.multipleSelectRowRows = [];\n            \n            this.$el.on(\"post-body.bs.table\", function (e) {\n                setTimeout(function () {\n                    that.options.multipleSelectRowRows = that.$body.children();\n                    that.options.multipleSelectRowRows.click(onRowClick);\n                    that.options.multipleSelectRowRows.find(\"input[type=checkbox]\").change(onCheckboxChange);\n                }, 1);\n            });\n        }\n\n        _init.apply(this, Array.prototype.slice.apply(arguments));\n    };\n\n    BootstrapTable.prototype.clearAllMultipleSelectionRow = function () {\n        clearAll(this);\n    };\n\n    $.fn.bootstrapTable.methods.push('clearAllMultipleSelectionRow');\n}(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/extensions/multiple-sort/bootstrap-table-multiple-sort.js":"/**\n * @author Nadim Basalamah <dimbslmh@gmail.com>\n * @version: v1.1.0\n * https://github.com/dimbslmh/bootstrap-table/tree/master/src/extensions/multiple-sort/bootstrap-table-multiple-sort.js\n * Modification: ErwannNevou <https://github.com/ErwannNevou>\n */\n\n(function($) {\n    'use strict';\n\n    var isSingleSort = false;\n\n    var showSortModal = function(that) {\n        var _selector = that.$sortModal.selector,\n            _id = _selector.substr(1);\n\n        if (!$(_id).hasClass(\"modal\")) {\n            var sModal = '  <div class=\"modal fade\" id=\"' + _id + '\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"' + _id + 'Label\" aria-hidden=\"true\">';\n            sModal += '         <div class=\"modal-dialog\">';\n            sModal += '             <div class=\"modal-content\">';\n            sModal += '                 <div class=\"modal-header\">';\n            sModal += '                     <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>';\n            sModal += '                     <h4 class=\"modal-title\" id=\"' + _id + 'Label\">' + that.options.formatMultipleSort() + '</h4>';\n            sModal += '                 </div>';\n            sModal += '                 <div class=\"modal-body\">';\n            sModal += '                     <div class=\"bootstrap-table\">';\n            sModal += '                         <div class=\"fixed-table-toolbar\">';\n            sModal += '                             <div class=\"bars\">';\n            sModal += '                                 <div id=\"toolbar\">';\n            sModal += '                                     <button id=\"add\" type=\"button\" class=\"btn btn-default\"><i class=\"' + that.options.iconsPrefix + ' ' + that.options.icons.plus + '\"></i> ' + that.options.formatAddLevel() + '</button>';\n            sModal += '                                     <button id=\"delete\" type=\"button\" class=\"btn btn-default\" disabled><i class=\"' + that.options.iconsPrefix + ' ' + that.options.icons.minus + '\"></i> ' + that.options.formatDeleteLevel() + '</button>';\n            sModal += '                                 </div>';\n            sModal += '                             </div>';\n            sModal += '                         </div>';\n            sModal += '                         <div class=\"fixed-table-container\">';\n            sModal += '                             <table id=\"multi-sort\" class=\"table\">';\n            sModal += '                                 <thead>';\n            sModal += '                                     <tr>';\n            sModal += '                                         <th></th>';\n            sModal += '                                         <th><div class=\"th-inner\">' + that.options.formatColumn() + '</div></th>';\n            sModal += '                                         <th><div class=\"th-inner\">' + that.options.formatOrder() + '</div></th>';\n            sModal += '                                     </tr>';\n            sModal += '                                 </thead>';\n            sModal += '                                 <tbody></tbody>';\n            sModal += '                             </table>';\n            sModal += '                         </div>';\n            sModal += '                     </div>';\n            sModal += '                 </div>';\n            sModal += '                 <div class=\"modal-footer\">';\n            sModal += '                     <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">' + that.options.formatCancel() + '</button>';\n            sModal += '                     <button type=\"button\" class=\"btn btn-primary\">' + that.options.formatSort() + '</button>';\n            sModal += '                 </div>';\n            sModal += '             </div>';\n            sModal += '         </div>';\n            sModal += '     </div>';\n\n            $('body').append($(sModal));\n\n            that.$sortModal = $(_selector);\n            var $rows = that.$sortModal.find('tbody > tr');\n\n            that.$sortModal.off('click', '#add').on('click', '#add', function() {\n                var total = that.$sortModal.find('.multi-sort-name:first option').length,\n                    current = that.$sortModal.find('tbody tr').length;\n\n                if (current < total) {\n                    current++;\n                    that.addLevel();\n                    that.setButtonStates();\n                }\n            });\n\n            that.$sortModal.off('click', '#delete').on('click', '#delete', function() {\n                var total = that.$sortModal.find('.multi-sort-name:first option').length,\n                    current = that.$sortModal.find('tbody tr').length;\n\n                if (current > 1 && current <= total) {\n                    current--;\n                    that.$sortModal.find('tbody tr:last').remove();\n                    that.setButtonStates();\n                }\n            });\n\n            that.$sortModal.off('click', '.btn-primary').on('click', '.btn-primary', function() {\n                var $rows = that.$sortModal.find('tbody > tr'),\n                    $alert = that.$sortModal.find('div.alert'),\n                    fields = [],\n                    results = [];\n\n\n                that.options.sortPriority = $.map($rows, function(row) {\n                    var $row = $(row),\n                        name = $row.find('.multi-sort-name').val(),\n                        order = $row.find('.multi-sort-order').val();\n\n                    fields.push(name);\n\n                    return {\n                        sortName: name,\n                        sortOrder: order\n                    };\n                });\n\n                var sorted_fields = fields.sort();\n\n                for (var i = 0; i < fields.length - 1; i++) {\n                    if (sorted_fields[i + 1] == sorted_fields[i]) {\n                        results.push(sorted_fields[i]);\n                    }\n                }\n\n                if (results.length > 0) {\n                    if ($alert.length === 0) {\n                        $alert = '<div class=\"alert alert-danger\" role=\"alert\"><strong>' + that.options.formatDuplicateAlertTitle() + '</strong> ' + that.options.formatDuplicateAlertDescription() + '</div>';\n                        $($alert).insertBefore(that.$sortModal.find('.bars'));\n                    }\n                } else {\n                    if ($alert.length === 1) {\n                        $($alert).remove();\n                    }\n\n                    that.$sortModal.modal('hide');\n                    that.options.sortName = '';\n\n                    if (that.options.sidePagination === 'server') {\n\n                        that.options.queryParams = function(params) {\n                            params.multiSort = that.options.sortPriority;\n                            return params;\n                        };\n\n                        that.initServer(that.options.silentSort);\n                        return;\n                    }\n\n                    that.onMultipleSort();\n\n                }\n            });\n\n            if (that.options.sortPriority === null || that.options.sortPriority.length === 0) {\n                if (that.options.sortName) {\n                    that.options.sortPriority = [{\n                        sortName: that.options.sortName,\n                        sortOrder: that.options.sortOrder\n                    }];\n                }\n            }\n\n            if (that.options.sortPriority !== null && that.options.sortPriority.length > 0) {\n                if ($rows.length < that.options.sortPriority.length && typeof that.options.sortPriority === 'object') {\n                    for (var i = 0; i < that.options.sortPriority.length; i++) {\n                        that.addLevel(i, that.options.sortPriority[i]);\n                    }\n                }\n            } else {\n                that.addLevel(0);\n            }\n\n            that.setButtonStates();\n        }\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, {\n        showMultiSort: false,\n        sortPriority: null,\n        onMultipleSort: function() {\n            return false;\n        }\n    });\n\n    $.extend($.fn.bootstrapTable.defaults.icons, {\n        sort: 'glyphicon-sort',\n        plus: 'glyphicon-plus',\n        minus: 'glyphicon-minus'\n    });\n\n    $.extend($.fn.bootstrapTable.Constructor.EVENTS, {\n        'multiple-sort.bs.table': 'onMultipleSort'\n    });\n\n    $.extend($.fn.bootstrapTable.locales, {\n        formatMultipleSort: function() {\n            return 'Multiple Sort';\n        },\n        formatAddLevel: function() {\n            return 'Add Level';\n        },\n        formatDeleteLevel: function() {\n            return 'Delete Level';\n        },\n        formatColumn: function() {\n            return 'Column';\n        },\n        formatOrder: function() {\n            return 'Order';\n        },\n        formatSortBy: function() {\n            return 'Sort by';\n        },\n        formatThenBy: function() {\n            return 'Then by';\n        },\n        formatSort: function() {\n            return 'Sort';\n        },\n        formatCancel: function() {\n            return 'Cancel';\n        },\n        formatDuplicateAlertTitle: function() {\n            return 'Duplicate(s) detected!';\n        },\n        formatDuplicateAlertDescription: function() {\n            return 'Please remove or change any duplicate column.';\n        },\n        formatSortOrders: function() {\n            return {\n                asc: 'Ascending',\n                desc: 'Descending'\n            };\n        }\n    });\n\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales);\n\n    var BootstrapTable = $.fn.bootstrapTable.Constructor,\n        _initToolbar = BootstrapTable.prototype.initToolbar;\n\n    BootstrapTable.prototype.initToolbar = function() {\n        this.showToolbar = true;\n        var that = this,\n            sortModalId = '#sortModal_' + this.$el.attr('id');\n        this.$sortModal = $(sortModalId);\n\n        _initToolbar.apply(this, Array.prototype.slice.apply(arguments));\n\n        if (this.options.showMultiSort) {\n            var $btnGroup = this.$toolbar.find('>.btn-group').first(),\n                $multiSortBtn = this.$toolbar.find('div.multi-sort');\n\n            if (!$multiSortBtn.length) {\n                $multiSortBtn = '  <button class=\"multi-sort btn btn-default' + (this.options.iconSize === undefined ? '' : ' btn-' + this.options.iconSize) + '\" type=\"button\" data-toggle=\"modal\" data-target=\"' + sortModalId + '\" title=\"' + this.options.formatMultipleSort() + '\">';\n                $multiSortBtn += '     <i class=\"' + this.options.iconsPrefix + ' ' + this.options.icons.sort + '\"></i>';\n                $multiSortBtn += '</button>';\n\n                $btnGroup.append($multiSortBtn);\n\n                showSortModal(that);\n            }\n\n            this.$el.on('sort.bs.table', function() {\n                isSingleSort = true;\n            });\n\n            this.$el.on('multiple-sort.bs.table', function() {\n                isSingleSort = false;\n            });\n\n            this.$el.on('load-success.bs.table', function() {\n                if (!isSingleSort && that.options.sortPriority !== null && typeof that.options.sortPriority === 'object' && that.options.sidePagination !== 'server') {\n                    that.onMultipleSort();\n                }\n            });\n\n            this.$el.on('column-switch.bs.table', function(field, checked) {\n                for (var i = 0; i < that.options.sortPriority.length; i++) {\n                    if (that.options.sortPriority[i].sortName === checked) {\n                        that.options.sortPriority.splice(i, 1);\n                    }\n                }\n\n                that.assignSortableArrows();\n                that.$sortModal.remove();\n                showSortModal(that);\n            });\n\n            this.$el.on('reset-view.bs.table', function() {\n                if (!isSingleSort && that.options.sortPriority !== null && typeof that.options.sortPriority === 'object') {\n                    that.assignSortableArrows();\n                }\n            });\n        }\n    };\n\n    BootstrapTable.prototype.onMultipleSort = function() {\n        var that = this;\n\n        var cmp = function(x, y) {\n            return x > y ? 1 : x < y ? -1 : 0;\n        };\n\n        var arrayCmp = function(a, b) {\n            var arr1 = [],\n                arr2 = [];\n\n            for (var i = 0; i < that.options.sortPriority.length; i++) {\n                var order = that.options.sortPriority[i].sortOrder === 'desc' ? -1 : 1,\n                    aa = a[that.options.sortPriority[i].sortName],\n                    bb = b[that.options.sortPriority[i].sortName];\n\n                if (aa === undefined || aa === null) {\n                    aa = '';\n                }\n                if (bb === undefined || bb === null) {\n                    bb = '';\n                }\n                if ($.isNumeric(aa) && $.isNumeric(bb)) {\n                    aa = parseFloat(aa);\n                    bb = parseFloat(bb);\n                }\n                if (typeof aa !== 'string') {\n                    aa = aa.toString();\n                }\n\n                arr1.push(\n                    order * cmp(aa, bb));\n                arr2.push(\n                    order * cmp(bb, aa));\n            }\n\n            return cmp(arr1, arr2);\n        };\n\n        this.data.sort(function(a, b) {\n            return arrayCmp(a, b);\n        });\n\n        this.initBody();\n        this.assignSortableArrows();\n        this.trigger('multiple-sort');\n    };\n\n    BootstrapTable.prototype.addLevel = function(index, sortPriority) {\n        var text = index === 0 ? this.options.formatSortBy() : this.options.formatThenBy();\n\n        this.$sortModal.find('tbody')\n            .append($('<tr>')\n                .append($('<td>').text(text))\n                .append($('<td>').append($('<select class=\"form-control multi-sort-name\">')))\n                .append($('<td>').append($('<select class=\"form-control multi-sort-order\">')))\n            );\n\n        var $multiSortName = this.$sortModal.find('.multi-sort-name').last(),\n            $multiSortOrder = this.$sortModal.find('.multi-sort-order').last();\n\n        $.each(this.columns, function(i, column) {\n            if (column.sortable === false || column.visible === false) {\n                return true;\n            }\n            $multiSortName.append('<option value=\"' + column.field + '\">' + column.title + '</option>');\n        });\n\n        $.each(this.options.formatSortOrders(), function(value, order) {\n            $multiSortOrder.append('<option value=\"' + value + '\">' + order + '</option>');\n        });\n\n        if (sortPriority !== undefined) {\n            $multiSortName.find('option[value=\"' + sortPriority.sortName + '\"]').attr(\"selected\", true);\n            $multiSortOrder.find('option[value=\"' + sortPriority.sortOrder + '\"]').attr(\"selected\", true);\n        }\n    };\n\n    BootstrapTable.prototype.assignSortableArrows = function() {\n        var that = this,\n            headers = that.$header.find('th');\n\n        for (var i = 0; i < headers.length; i++) {\n            for (var c = 0; c < that.options.sortPriority.length; c++) {\n                if ($(headers[i]).data('field') === that.options.sortPriority[c].sortName) {\n                    $(headers[i]).find('.sortable').removeClass('desc asc').addClass(that.options.sortPriority[c].sortOrder);\n                }\n            }\n        }\n    };\n\n    BootstrapTable.prototype.setButtonStates = function() {\n        var total = this.$sortModal.find('.multi-sort-name:first option').length,\n            current = this.$sortModal.find('tbody tr').length;\n\n        if (current == total) {\n            this.$sortModal.find('#add').attr('disabled', 'disabled');\n        }\n        if (current > 1) {\n            this.$sortModal.find('#delete').removeAttr('disabled');\n        }\n        if (current < total) {\n            this.$sortModal.find('#add').removeAttr('disabled');\n        }\n        if (current == 1) {\n            this.$sortModal.find('#delete').attr('disabled', 'disabled');\n        }\n    };\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/extensions/natural-sorting/bootstrap-table-natural-sorting.js":"/**\n * @author: Brian Huisman\n * @webSite: http://www.greywyvern.com\n * @version: v1.0.0\n * JS functions to allow natural sorting on bootstrap-table columns\n * add data-sorter=\"alphanum\" or data-sorter=\"numericOnly\" to any th\n *\n * @update Dennis Hernández <http://djhvscf.github.io/Blog>\n * @update Duane May\n */\n\nfunction alphanum(a, b) {\n  function chunkify(t) {\n    var tz = [],\n        x = 0,\n        y = -1,\n        n = 0,\n        i,\n        j;\n\n    while (i = (j = t.charAt(x++)).charCodeAt(0)) {\n      var m = (i === 46 || (i >= 48 && i <= 57));\n      if (m !== n) {\n        tz[++y] = \"\";\n        n = m;\n      }\n      tz[y] += j;\n    }\n    return tz;\n  }\n\n  function stringfy(v) {\n    if (typeof(v) === \"number\") {\n      v = \"\" + v;\n    }\n    if (!v) {\n      v = \"\";\n    }\n    return v;\n  }\n\n  var aa = chunkify(stringfy(a));\n  var bb = chunkify(stringfy(b));\n\n  for (x = 0; aa[x] && bb[x]; x++) {\n    if (aa[x] !== bb[x]) {\n      var c = Number(aa[x]),\n          d = Number(bb[x]);\n\n      if (c == aa[x] && d == bb[x]) {\n        return c - d;\n      } else {\n          return (aa[x] > bb[x]) ? 1 : -1;\n      }\n    }\n  }\n  return aa.length - bb.length;\n}\n\nfunction numericOnly(a, b) {\n    function stripNonNumber(s) {\n        s = s.replace(new RegExp(/[^0-9]/g), \"\");\n        return parseInt(s, 10);\n    }\n\n    return stripNonNumber(a) - stripNonNumber(b);\n}","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/extensions/print/bootstrap-table-print.js":"(function ($) {\n    'use strict';\n\n    var sprintf = $.fn.bootstrapTable.utils.sprintf;\n\n    function printPageBuilderDefault(table) {\n        return '<html><head>' +\n            '<style type=\"text/css\" media=\"print\">' +\n            '  @page { size: auto;   margin: 25px 0 25px 0; }' +\n            '</style>' +\n            '<style type=\"text/css\" media=\"all\">' +\n            'table{border-collapse: collapse; font-size: 12px; }\\n' +\n            'table, th, td {border: 1px solid grey}\\n' +\n            'th, td {text-align: center; vertical-align: middle;}\\n' +\n            'p {font-weight: bold; margin-left:20px }\\n' +\n            'table { width:94%; margin-left:3%; margin-right:3%}\\n' +\n            'div.bs-table-print { text-align:center;}\\n' +\n            '</style></head><title>Print Table</title><body>' +\n            '<p>Printed on: ' + new Date + ' </p>' +\n            '<div class=\"bs-table-print\">' + table + \"</div></body></html>\";\n    }\n    $.extend($.fn.bootstrapTable.defaults, {\n        showPrint: false,\n        printAsFilteredAndSortedOnUI: true, //boolean, when true - print table as sorted and filtered on UI.\n                                            //Please note that if true is set, along with explicit predefined print options for filtering and sorting (printFilter, printSortOrder, printSortColumn)- then they will be applied on data already filtered and sorted by UI controls.\n                                            //For printing data as filtered and sorted on UI - do not set these 3 options:printFilter, printSortOrder, printSortColumn\n        printSortColumn: undefined  , //String, set column field name to be sorted by\n        printSortOrder: 'asc', //String: 'asc' , 'desc'  - relevant only if printSortColumn is set\n        printPageBuilder: function(table){return printPageBuilderDefault(table)} // function, receive html <table> element as string, returns html string for printing. by default delegates to function printPageBuilderDefault(table). used for styling and adding header or footer\n    });\n    $.extend($.fn.bootstrapTable.COLUMN_DEFAULTS, {\n        printFilter: undefined, //set value to filter by in print page\n        printIgnore: false, //boolean, set true to ignore this column in the print page\n        printFormatter:undefined //function(value, row, index), formats the cell value for this column in the printed table. Function behaviour is similar to the 'formatter' column option\n    });\n    $.extend($.fn.bootstrapTable.defaults.icons, {\n        print: 'glyphicon-print icon-share'\n    });\n\n    var BootstrapTable = $.fn.bootstrapTable.Constructor,\n        _initToolbar = BootstrapTable.prototype.initToolbar;\n\n    BootstrapTable.prototype.initToolbar = function () {\n        this.showToolbar = this.options.showPrint;\n\n        _initToolbar.apply(this, Array.prototype.slice.apply(arguments));\n\n        if (this.options.showPrint) {\n            var that = this,\n                $btnGroup = this.$toolbar.find('>.btn-group'),\n                $print = $btnGroup.find('button.bs-print');\n\n            if (!$print.length) {\n                $print = $([\n                    '<button class=\"bs-print btn btn-default' + sprintf(' btn-%s\"', this.options.iconSize) + ' name=\"print\" title=\"print\" type=\"button\">',\n                    sprintf('<i class=\"%s %s\"></i> ', this.options.iconsPrefix, this.options.icons.print),\n                    '</button>'].join('')).appendTo($btnGroup);\n\n                $print.click(function () {\n                    function formatValue(row, i, column ) {\n                        var value = row[column.field];\n                        if (typeof column.printFormatter === 'function') {\n                            return  column.printFormatter.apply(column, [value, row, i]);\n                        }\n                        else {\n                            return  value || \"-\";\n                        }\n                    }\n                    function buildTable(data,columns) {\n                        var out = \"<table><thead><tr>\";\n                        for(var h = 0; h < columns.length; h++) {\n                            if(!columns[h].printIgnore) {\n                                out += (\"<th>\"+columns[h].title+\"</th>\");\n                            }\n                        }\n                        out += \"</tr></thead><tbody>\";\n                        for(var i = 0; i < data.length; i++) {\n                            out += \"<tr>\";\n                            for(var j = 0; j < columns.length; j++) {\n                                if(!columns[j].printIgnore) {\n                                    out += (\"<td>\"+ formatValue(data[i], i, columns[j])+\"</td>\");\n                                }\n                            }\n                            out += \"</tr>\";\n                        }\n                        out += \"</tbody></table>\";\n                        return out;\n                    }\n                    function sortRows(data,colName,sortOrder) {\n                        if(!colName){\n                            return data;\n                        }\n                        var reverse = sortOrder != 'asc';\n                        reverse = -((+reverse) || -1);\n                        return  data.sort(function (a, b) {\n                            return reverse * (a[colName].localeCompare(b[colName]));\n                        });\n                    }\n                    function filterRow(row,filters) {\n                        for (var index = 0; index < filters.length; ++index) {\n                            if(row[filters[index].colName]!=filters[index].value) {\n                                return false;\n                            }\n                        }\n                        return true;\n                    }\n                    function filterRows(data,filters) {\n                        return data.filter(function (row) {\n                            return filterRow(row,filters)\n                        });\n                    }\n                    function getColumnFilters(columns) {\n                        return !columns || !columns[0] ? [] : columns[0].filter(function (col) {\n                            return col.printFilter;\n                        }).map(function (col) {\n                            return {colName:col.field, value:col.printFilter};\n                        });\n                    }\n                    var doPrint = function (data) {\n                        data=filterRows(data,getColumnFilters(that.options.columns));\n                        data=sortRows(data,that.options.printSortColumn,that.options.printSortOrder);\n                        var table=buildTable(data,that.options.columns[0]);\n                        var newWin = window.open(\"\");\n                        newWin.document.write(that.options.printPageBuilder.call(this, table));\n                        newWin.print();\n                        newWin.close();\n                    };\n                    doPrint(that.options.printAsFilteredAndSortedOnUI? that.getData() : that.options.data.slice(0));\n                });\n            }\n        }\n    };\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/extensions/reorder-columns/bootstrap-table-reorder-columns.js":"/**\n * @author: Dennis Hernández\n * @webSite: http://djhvscf.github.io/Blog\n * @version: v1.1.0\n */\n\n!function ($) {\n\n    'use strict';\n\n    //From MDN site, https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\n    var filterFn = function () {\n        if (!Array.prototype.filter) {\n            Array.prototype.filter = function(fun/*, thisArg*/) {\n                'use strict';\n\n                if (this === void 0 || this === null) {\n                    throw new TypeError();\n                }\n\n                var t = Object(this);\n                var len = t.length >>> 0;\n                if (typeof fun !== 'function') {\n                    throw new TypeError();\n                }\n\n                var res = [];\n                var thisArg = arguments.length >= 2 ? arguments[1] : void 0;\n                for (var i = 0; i < len; i++) {\n                    if (i in t) {\n                        var val = t[i];\n\n                        // NOTE: Technically this should Object.defineProperty at\n                        //       the next index, as push can be affected by\n                        //       properties on Object.prototype and Array.prototype.\n                        //       But that method's new, and collisions should be\n                        //       rare, so use the more-compatible alternative.\n                        if (fun.call(thisArg, val, i, t)) {\n                            res.push(val);\n                        }\n                    }\n                }\n\n                return res;\n            };\n        }\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, {\n        reorderableColumns: false,\n        maxMovingRows: 10,\n        onReorderColumn: function (headerFields) {\n            return false;\n        },\n        dragaccept: null\n    });\n\n    $.extend($.fn.bootstrapTable.Constructor.EVENTS, {\n        'reorder-column.bs.table': 'onReorderColumn'\n    });\n\n    var BootstrapTable = $.fn.bootstrapTable.Constructor,\n        _initHeader = BootstrapTable.prototype.initHeader,\n        _toggleColumn = BootstrapTable.prototype.toggleColumn,\n        _toggleView = BootstrapTable.prototype.toggleView,\n        _resetView = BootstrapTable.prototype.resetView;\n\n    BootstrapTable.prototype.initHeader = function () {\n        _initHeader.apply(this, Array.prototype.slice.apply(arguments));\n\n        if (!this.options.reorderableColumns) {\n            return;\n        }\n\n        this.makeRowsReorderable();\n    };\n\n    BootstrapTable.prototype.toggleColumn = function () {\n        _toggleColumn.apply(this, Array.prototype.slice.apply(arguments));\n\n        if (!this.options.reorderableColumns) {\n            return;\n        }\n\n        this.makeRowsReorderable();\n    };\n\n    BootstrapTable.prototype.toggleView = function () {\n        _toggleView.apply(this, Array.prototype.slice.apply(arguments));\n\n        if (!this.options.reorderableColumns) {\n            return;\n        }\n\n        if (this.options.cardView) {\n            return;\n        }\n\n        this.makeRowsReorderable();\n    };\n\n    BootstrapTable.prototype.resetView = function () {\n        _resetView.apply(this, Array.prototype.slice.apply(arguments));\n\n        if (!this.options.reorderableColumns) {\n            return;\n        }\n\n        this.makeRowsReorderable();\n    };\n\n    BootstrapTable.prototype.makeRowsReorderable = function () {\n        var that = this;\n        try {\n            $(this.$el).dragtable('destroy');\n        } catch (e) {}\n        $(this.$el).dragtable({\n            maxMovingRows: that.options.maxMovingRows,\n            dragaccept: that.options.dragaccept,\n            clickDelay:200,\n            beforeStop: function() {\n                var ths = [],\n                    formatters = [],\n                    columns = [],\n                    columnsHidden = [],\n                    columnIndex = -1,\n                    optionsColumns = [];\n                that.$header.find('th').each(function (i) {\n                    ths.push($(this).data('field'));\n                    formatters.push($(this).data('formatter'));\n                });\n\n                //Exist columns not shown\n                if (ths.length < that.columns.length) {\n                    columnsHidden = $.grep(that.columns, function (column) {\n                       return !column.visible;\n                    });\n                    for (var i = 0; i < columnsHidden.length; i++) {\n                        ths.push(columnsHidden[i].field);\n                        formatters.push(columnsHidden[i].formatter);\n                    }\n                }\n\n                for (var i = 0; i < ths.length; i++ ) {\n                    columnIndex = $.fn.bootstrapTable.utils.getFieldIndex(that.columns, ths[i]);\n                    if (columnIndex !== -1) {\n                        that.columns[columnIndex].fieldIndex = i;\n                        columns.push(that.columns[columnIndex]);\n                        that.columns.splice(columnIndex, 1);\n                    }\n                }\n\n                that.columns = that.columns.concat(columns);\n\n                filterFn(); //Support <IE9\n                $.each(that.columns, function(i, column) {\n                    var found = false,\n                        field = column.field;\n                    that.options.columns[0].filter(function(item) {\n                        if(!found && item[\"field\"] == field) {\n                            optionsColumns.push(item);\n                            found = true;\n                            return false;\n                        } else\n                            return true;\n                    })\n                });\n\n                that.options.columns[0] = optionsColumns;\n\n                that.header.fields = ths;\n                that.header.formatters = formatters;\n                that.initHeader();\n                that.initToolbar();\n                that.initBody();\n                that.resetView();\n                that.trigger('reorder-column', ths);\n            }\n        });\n    };\n}(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/extensions/reorder-rows/bootstrap-table-reorder-rows.js":"/**\n * @author: Dennis Hernández\n * @webSite: http://djhvscf.github.io/Blog\n * @version: v1.0.1\n */\n\n(function ($) {\n\n    'use strict';\n\n    var isSearch = false;\n\n    var rowAttr = function (row, index) {\n        return {\n            id: 'customId_' + index\n        };\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, {\n        reorderableRows: false,\n        onDragStyle: null,\n        onDropStyle: null,\n        onDragClass: \"reorder_rows_onDragClass\",\n        dragHandle: null,\n        useRowAttrFunc: false,\n        onReorderRowsDrag: function (table, row) {\n            return false;\n        },\n        onReorderRowsDrop: function (table, row) {\n            return false;\n        },\n        onReorderRow: function (newData) {\n             return false;\n        }\n    });\n\n    $.extend($.fn.bootstrapTable.Constructor.EVENTS, {\n        'reorder-row.bs.table': 'onReorderRow'\n    });\n\n    var BootstrapTable = $.fn.bootstrapTable.Constructor,\n        _init = BootstrapTable.prototype.init,\n        _initSearch = BootstrapTable.prototype.initSearch;\n\n    BootstrapTable.prototype.init = function () {\n\n        if (!this.options.reorderableRows) {\n            _init.apply(this, Array.prototype.slice.apply(arguments));\n            return;\n        }\n\n        var that = this;\n        if (this.options.useRowAttrFunc) {\n            this.options.rowAttributes = rowAttr;\n        }\n\n        var onPostBody = this.options.onPostBody;\n        this.options.onPostBody = function () {\n            setTimeout(function () {\n                that.makeRowsReorderable();\n                onPostBody.apply();\n            }, 1);\n        };\n\n        _init.apply(this, Array.prototype.slice.apply(arguments));\n    };\n\n    BootstrapTable.prototype.initSearch = function () {\n        _initSearch.apply(this, Array.prototype.slice.apply(arguments));\n\n        if (!this.options.reorderableRows) {\n            return;\n        }\n\n        //Known issue after search if you reorder the rows the data is not display properly\n        //isSearch = true;\n    };\n\n    BootstrapTable.prototype.makeRowsReorderable = function () {\n        if (this.options.cardView) {\n            return;\n        }\n\n        var that = this;\n        this.$el.tableDnD({\n            onDragStyle: that.options.onDragStyle,\n            onDropStyle: that.options.onDropStyle,\n            onDragClass: that.options.onDragClass,\n            onDrop: that.onDrop,\n            onDragStart: that.options.onReorderRowsDrag,\n            dragHandle: that.options.dragHandle\n        });\n    };\n\n    BootstrapTable.prototype.onDrop = function (table, droppedRow) {\n        var tableBs = $(table),\n            tableBsData = tableBs.data('bootstrap.table'),\n            tableBsOptions = tableBs.data('bootstrap.table').options,\n            row = null,\n            newData = [];\n\n        for (var i = 0; i < table.tBodies[0].rows.length; i++) {\n            row = $(table.tBodies[0].rows[i]);\n            newData.push(tableBsOptions.data[row.data('index')]);\n            row.data('index', i).attr('data-index', i);\n        }\n\n        tableBsOptions.data = tableBsOptions.data.slice(0, tableBsData.pageFrom - 1)\n            .concat(newData)\n            .concat(tableBsOptions.data.slice(tableBsData.pageTo));\n\n        //Call the user defined function\n        tableBsOptions.onReorderRowsDrop.apply(table, [table, droppedRow]);\n\n        //Call the event reorder-row\n        tableBsData.trigger('reorder-row', newData);\n    };\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/extensions/resizable/bootstrap-table-resizable.js":"/**\n * @author: Dennis Hernández\n * @webSite: http://djhvscf.github.io/Blog\n * @version: v1.0.0\n */\n\n(function ($) {\n    'use strict';\n\n    var initResizable = function (that) {\n        //Deletes the plugin to re-create it\n        that.$el.colResizable({disable: true});\n\n        //Creates the plugin\n        that.$el.colResizable({\n            liveDrag: that.options.liveDrag,\n            fixed: that.options.fixed,\n            headerOnly: that.options.headerOnly,\n            minWidth: that.options.minWidth,\n            hoverCursor: that.options.hoverCursor,\n            dragCursor: that.options.dragCursor,\n            onResize: that.onResize,\n            onDrag: that.options.onResizableDrag\n        });\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, {\n        resizable: false,\n        liveDrag: false,\n        fixed: true,\n        headerOnly: false,\n        minWidth: 15,\n        hoverCursor: 'e-resize',\n        dragCursor: 'e-resize',\n        onResizableResize: function (e) {\n            return false;\n        },\n        onResizableDrag: function (e) {\n            return false;\n        }\n    });\n\n    var BootstrapTable = $.fn.bootstrapTable.Constructor,\n        _toggleView = BootstrapTable.prototype.toggleView,\n        _resetView = BootstrapTable.prototype.resetView;\n\n    BootstrapTable.prototype.toggleView = function () {\n        _toggleView.apply(this, Array.prototype.slice.apply(arguments));\n\n        if (this.options.resizable && this.options.cardView) {\n            //Deletes the plugin\n            $(this.$el).colResizable({disable: true});\n        }\n    };\n\n    BootstrapTable.prototype.resetView = function () {\n        var that = this;\n\n        _resetView.apply(this, Array.prototype.slice.apply(arguments));\n\n        if (this.options.resizable) {\n            // because in fitHeader function, we use setTimeout(func, 100);\n            setTimeout(function () {\n                initResizable(that);\n            }, 100);\n        }\n    };\n\n    BootstrapTable.prototype.onResize = function (e) {\n        var that = $(e.currentTarget);\n        that.bootstrapTable('resetView');\n        that.data('bootstrap.table').options.onResizableResize.apply(e);\n    }\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/extensions/select2-filter/bootstrap-table-select2-filter.js":"/**\n * @author: Jewway\n * @version: v1.0.0\n */\n\n!function ($) {\n  'use strict';\n\n  function getCurrentHeader(that) {\n    var header = that.$header;\n    if (that.options.height) {\n      header = that.$tableHeader;\n    }\n\n    return header;\n  }\n\n  function getFilterFields(that) {\n    return getCurrentHeader(that).find('[data-filter-field]');\n  }\n\n  function setFilterValues(that) {\n    var $filterElms = getFilterFields(that);\n    if (!$.isEmptyObject(that.filterColumnsPartial)) {\n      $filterElms.each(function (index, ele) {\n        var $ele = $(ele),\n            field = $ele.attr('data-filter-field'),\n            value = that.filterColumnsPartial[field];\n\n        if ($ele.is(\"select\")) {\n          $ele.val(value).trigger('change');\n        }\n        else {\n          $ele.val(value);\n        }\n      });\n    }\n  }\n\n  function createFilter(that, header) {\n    var enableFilter = false,\n        isVisible,\n        html,\n        timeoutId = 0;\n\n    $.each(that.columns, function (i, column) {\n      isVisible = 'hidden';\n      html = [];\n\n      if (!column.visible) {\n        return;\n      }\n\n      if (!column.filter) {\n        html.push('<div class=\"no-filter\"></div>');\n      } else {\n        var filterClass = column.filter.class ? ' ' + column.filter.class : '';\n        html.push('<div style=\"margin: 0px 2px 2px 2px;\" class=\"filter' + filterClass + '\">');\n\n        if (column.searchable) {\n          enableFilter = true;\n          isVisible = 'visible'\n        }\n\n        switch (column.filter.type.toLowerCase()) {\n          case 'input' :\n            html.push('<input type=\"text\" data-filter-field=\"' + column.field + '\" style=\"width: 100%; visibility:' + isVisible + '\">');\n            break;\n          case 'select':\n            html.push('<select data-filter-field=\"' + column.field + '\" style=\"width: 100%; visibility:' + isVisible + '\"></select>');\n            break;\n        }\n      }\n\n      $.each(header.children().children(), function (i, tr) {\n        tr = $(tr);\n        if (tr.data('field') === column.field) {\n          tr.find('.fht-cell').append(html.join(''));\n          return false;\n        }\n      });\n    });\n\n    if (enableFilter) {\n      var $inputs = header.find('input'),\n          $selects = header.find('select');\n\n\n      if ($inputs.length > 0) {\n        $inputs.off('keyup').on('keyup', function (event) {\n          clearTimeout(timeoutId);\n          timeoutId = setTimeout(function () {\n            that.onColumnSearch(event);\n          }, that.options.searchTimeOut);\n        });\n\n\n        $inputs.off('mouseup').on('mouseup', function (event) {\n          var $input = $(this),\n              oldValue = $input.val();\n\n          if (oldValue === \"\") {\n            return;\n          }\n\n          setTimeout(function () {\n            var newValue = $input.val();\n\n            if (newValue === \"\") {\n              clearTimeout(timeoutId);\n              timeoutId = setTimeout(function () {\n                that.onColumnSearch(event);\n              }, that.options.searchTimeOut);\n            }\n          }, 1);\n        });\n      }\n\n      if ($selects.length > 0) {\n        $selects.on('select2:select', function (event) {\n          that.onColumnSearch(event);\n        });\n      }\n    } else {\n      header.find('.filter').hide();\n    }\n  }\n\n  function initSelect2(that) {\n    var $header = getCurrentHeader(that);\n\n    $.each(that.columns, function (idx, column) {\n      if (column.filter && column.filter.type === 'select') {\n        var $selectEle = $header.find('select[data-filter-field=' + column.field + ']');\n\n        if ($selectEle.length > 0 && !$selectEle.data().select2) {\n          column.filter.data.unshift(\"\");\n\n          var select2Opts = {\n            placeholder: \"\",\n            allowClear: true,\n            data: column.filter.data,\n            dropdownParent: that.$el.closest(\".bootstrap-table\")\n          };\n\n          $selectEle.select2(select2Opts);\n          $selectEle.on(\"select2:unselecting\", function (event) {\n            event.preventDefault();\n            $selectEle.val(null).trigger('change');\n            that.searchText = undefined;\n            that.onColumnSearch(event);\n          });\n        }\n      }\n    });\n  }\n\n  $.extend($.fn.bootstrapTable.defaults, {\n    filter: false,\n    filterValues: {}\n  });\n\n  $.extend($.fn.bootstrapTable.COLUMN_DEFAULTS, {\n    filter: undefined\n  });\n\n  var BootstrapTable = $.fn.bootstrapTable.Constructor,\n      _init = BootstrapTable.prototype.init,\n      _initHeader = BootstrapTable.prototype.initHeader,\n      _initSearch = BootstrapTable.prototype.initSearch;\n\n  BootstrapTable.prototype.init = function () {\n    //Make sure that the filtercontrol option is set\n    if (this.options.filter) {\n      var that = this;\n\n      if (!$.isEmptyObject(that.options.filterValues)) {\n        that.filterColumnsPartial = that.options.filterValues;\n        that.options.filterValues = {};\n      }\n\n      this.$el.on('reset-view.bs.table', function () {\n        //Create controls on $tableHeader if the height is set\n        if (!that.options.height) {\n          return;\n        }\n\n        //Avoid recreate the controls\n        if (that.$tableHeader.find('select').length > 0 || that.$tableHeader.find('input').length > 0) {\n          return;\n        }\n\n        createFilter(that, that.$tableHeader);\n      }).on('post-header.bs.table', function () {\n        var timeoutId = 0;\n\n        initSelect2(that);\n        clearTimeout(timeoutId);\n        timeoutId = setTimeout(function () {\n          setFilterValues(that);\n        }, that.options.searchTimeOut - 1000);\n      }).on('column-switch.bs.table', function (field, checked) {\n        setFilterValues(that);\n      });\n    }\n\n    _init.apply(this, Array.prototype.slice.apply(arguments));\n  };\n\n  BootstrapTable.prototype.initHeader = function () {\n    _initHeader.apply(this, Array.prototype.slice.apply(arguments));\n    if (this.options.filter) {\n      createFilter(this, this.$header);\n    }\n  };\n\n  BootstrapTable.prototype.initSearch = function () {\n    _initSearch.apply(this, Array.prototype.slice.apply(arguments));\n\n    var that = this,\n        filterValues = that.filterColumnsPartial;\n\n    // Filter for client\n    if (that.options.sidePagination === 'client') {\n      this.data = $.grep(this.data, function (row, idx) {\n        for (var field in filterValues) {\n          var column = that.columns[$.fn.bootstrapTable.utils.getFieldIndex(that.columns, field)],\n              filterValue = filterValues[field].toLowerCase(),\n              rowValue = row[field];\n\n          rowValue = $.fn.bootstrapTable.utils.calculateObjectValue(\n              that.header,\n              that.header.formatters[$.inArray(field, that.header.fields)],\n              [rowValue, row, idx], rowValue);\n\n          if (column.filterStrictSearch) {\n            if (!($.inArray(field, that.header.fields) !== -1 &&\n                (typeof rowValue === 'string' || typeof rowValue === 'number') &&\n                rowValue.toString().toLowerCase() === filterValue.toString().toLowerCase())) {\n              return false;\n            }\n          } else {\n            if (!($.inArray(field, that.header.fields) !== -1 &&\n                (typeof rowValue === 'string' || typeof rowValue === 'number') &&\n                (rowValue + '').toLowerCase().indexOf(filterValue) !== -1)) {\n              return false;\n            }\n          }\n        }\n\n        return true;\n      });\n    }\n  };\n\n  BootstrapTable.prototype.onColumnSearch = function (event) {\n    var field = $(event.currentTarget).attr('data-filter-field'),\n        value = $.trim($(event.currentTarget).val());\n\n    if ($.isEmptyObject(this.filterColumnsPartial)) {\n      this.filterColumnsPartial = {};\n    }\n\n    if (value) {\n      this.filterColumnsPartial[field] = value;\n    } else {\n      delete this.filterColumnsPartial[field];\n    }\n\n    this.options.pageNumber = 1;\n    this.onSearch(event);\n  };\n\n  BootstrapTable.prototype.setFilterData = function (field, data) {\n    var that = this,\n        $header = getCurrentHeader(that),\n        $selectEle = $header.find('select[data-filter-field=\\\"' + field + '\\\"]');\n\n    data.unshift(\"\");\n    $selectEle.empty();\n    $selectEle.select2({\n      data: data,\n      placeholder: \"\",\n      allowClear: true,\n      dropdownParent: that.$el.closest(\".bootstrap-table\")\n    });\n\n    $.each(this.columns, function (idx, column) {\n      if (column.field === field) {\n        column.filter.data = data;\n        return false;\n      }\n    });\n  };\n\n  BootstrapTable.prototype.setFilterValues = function (values) {\n    this.filterColumnsPartial = values;\n  };\n\n  $.fn.bootstrapTable.methods.push('setFilterData');\n  $.fn.bootstrapTable.methods.push('setFilterValues');\n\n}(jQuery);","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/extensions/sticky-header/bootstrap-table-sticky-header.js":"/**\n * @author vincent loh <vincent.ml@gmail.com>\n * @version: v1.0.0\n * https://github.com/vinzloh/bootstrap-table/\n * Sticky header for bootstrap-table\n */\n\n(function ($) {\n    'use strict';\n\n    var sprintf = $.fn.bootstrapTable.utils.sprintf;\n    $.extend($.fn.bootstrapTable.defaults, {\n        stickyHeader: false\n    });\n\n    var BootstrapTable = $.fn.bootstrapTable.Constructor,\n        _initHeader = BootstrapTable.prototype.initHeader;\n\n    BootstrapTable.prototype.initHeader = function () {\n        var that = this;\n        _initHeader.apply(this, Array.prototype.slice.apply(arguments));\n\n        if (!this.options.stickyHeader) {\n            return;\n        }\n\n        var table = this.$tableBody.find('table'),\n            table_id = table.attr('id'),\n            header_id = table.attr('id') + '-sticky-header',\n            sticky_header_container_id = header_id +'-sticky-header-container',\n            anchor_begin_id = header_id +'_sticky_anchor_begin',\n            anchor_end_id = header_id +'_sticky_anchor_end';\n        // add begin and end anchors to track table position\n\n        table.before(sprintf('<div id=\"%s\" class=\"hidden\"></div>', sticky_header_container_id));\n        table.before(sprintf('<div id=\"%s\"></div>', anchor_begin_id));\n        table.after(sprintf('<div id=\"%s\"></div>', anchor_end_id));\n\n        table.find('thead').attr('id', header_id);\n\n        // clone header just once, to be used as sticky header\n        // deep clone header. using source header affects tbody>td width\n        this.$stickyHeader = $($('#'+header_id).clone(true, true));\n        // avoid id conflict\n        this.$stickyHeader.removeAttr('id');\n\n        // render sticky on window scroll or resize\n        $(window).on('resize.'+table_id, table, render_sticky_header);\n        $(window).on('scroll.'+table_id, table, render_sticky_header);\n        // render sticky when table scroll left-right\n        table.closest('.fixed-table-container').find('.fixed-table-body').on('scroll.'+table_id, table, match_position_x);\n\n        this.$el.on('all.bs.table', function (e) {\n            that.$stickyHeader = $($('#'+header_id).clone(true, true));\n            that.$stickyHeader.removeAttr('id');\n        });\n\n        function render_sticky_header(event) {\n            var table = event.data;\n            var table_header_id = table.find('thead').attr('id');\n            // console.log('render_sticky_header for > '+table_header_id);\n            if (table.length < 1 || $('#'+table_id).length < 1){\n                // turn off window listeners\n                $(window).off('resize.'+table_id);\n                $(window).off('scroll.'+table_id);\n                table.closest('.fixed-table-container').find('.fixed-table-body').off('scroll.'+table_id);\n                return;\n            }\n            // get header height\n            var header_height = '0';\n            if (that.options.stickyHeaderOffsetY) header_height = that.options.stickyHeaderOffsetY.replace('px','');\n            // window scroll top\n            var t = $(window).scrollTop();\n            // top anchor scroll position, minus header height\n            var e = $(\"#\"+anchor_begin_id).offset().top - header_height;\n            // bottom anchor scroll position, minus header height, minus sticky height\n            var e_end = $(\"#\"+anchor_end_id).offset().top - header_height - $('#'+table_header_id).css('height').replace('px','');\n            // show sticky when top anchor touches header, and when bottom anchor not exceeded\n            if (t > e && t <= e_end) {\n                // ensure clone and source column widths are the same\n                $.each( that.$stickyHeader.find('tr').eq(0).find('th'), function (index, item) {\n                    $(item).css('min-width', $('#'+table_header_id+' tr').eq(0).find('th').eq(index).css('width'));\n                });\n                // match bootstrap table style\n                $(\"#\"+sticky_header_container_id).removeClass('hidden').addClass(\"fix-sticky fixed-table-container\") ;\n                // stick it in position\n                $(\"#\"+sticky_header_container_id).css('top', header_height + 'px');\n                // create scrollable container for header\n                var scrollable_div = $('<div style=\"position:absolute;width:100%;overflow-x:hidden;\" />');\n                // append cloned header to dom\n                $(\"#\"+sticky_header_container_id).html(scrollable_div.append(that.$stickyHeader));\n                // match clone and source header positions when left-right scroll\n                match_position_x(event);\n            } else {\n                // hide sticky\n                $(\"#\"+sticky_header_container_id).removeClass(\"fix-sticky\").addClass('hidden');\n            }\n\n        }\n        function match_position_x(event){\n            var table = event.data;\n            var table_header_id = table.find('thead').attr('id');\n            // match clone and source header positions when left-right scroll\n            $(\"#\"+sticky_header_container_id).css(\n                'width', +table.closest('.fixed-table-body').css('width').replace('px', '') + 1\n            );\n            $(\"#\"+sticky_header_container_id+\" thead\").parent().scrollLeft(Math.abs($('#'+table_header_id).position().left));\n        }\n    };\n\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/extensions/toolbar/bootstrap-table-toolbar.js":"/**\n * @author: aperez <aperez@datadec.es>\n * @version: v2.0.0\n *\n * @update Dennis Hernández <http://djhvscf.github.io/Blog>\n */\n\n!function($) {\n    'use strict';\n\n    var firstLoad = false;\n\n    var sprintf = $.fn.bootstrapTable.utils.sprintf;\n\n    var showAvdSearch = function(pColumns, searchTitle, searchText, that) {\n        if (!$(\"#avdSearchModal\" + \"_\" + that.options.idTable).hasClass(\"modal\")) {\n            var vModal = sprintf(\"<div id=\\\"avdSearchModal%s\\\"  class=\\\"modal fade\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"mySmallModalLabel\\\" aria-hidden=\\\"true\\\">\", \"_\" + that.options.idTable);\n            vModal += \"<div class=\\\"modal-dialog modal-xs\\\">\";\n            vModal += \" <div class=\\\"modal-content\\\">\";\n            vModal += \"  <div class=\\\"modal-header\\\">\";\n            vModal += \"   <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\" >&times;</button>\";\n            vModal += sprintf(\"   <h4 class=\\\"modal-title\\\">%s</h4>\", searchTitle);\n            vModal += \"  </div>\";\n            vModal += \"  <div class=\\\"modal-body modal-body-custom\\\">\";\n            vModal += sprintf(\"   <div class=\\\"container-fluid\\\" id=\\\"avdSearchModalContent%s\\\" style=\\\"padding-right: 0px;padding-left: 0px;\\\" >\", \"_\" + that.options.idTable);\n            vModal += \"   </div>\";\n            vModal += \"  </div>\";\n            vModal += \"  </div>\";\n            vModal += \" </div>\";\n            vModal += \"</div>\";\n\n            $(\"body\").append($(vModal));\n\n            var vFormAvd = createFormAvd(pColumns, searchText, that),\n                timeoutId = 0;;\n\n            $('#avdSearchModalContent' + \"_\" + that.options.idTable).append(vFormAvd.join(''));\n\n            $('#' + that.options.idForm).off('keyup blur', 'input').on('keyup blur', 'input', function (event) {\n                clearTimeout(timeoutId);\n                timeoutId = setTimeout(function () {\n                    that.onColumnAdvancedSearch(event);\n                }, that.options.searchTimeOut);\n            });\n\n            $(\"#btnCloseAvd\" + \"_\" + that.options.idTable).click(function() {\n                $(\"#avdSearchModal\" + \"_\" + that.options.idTable).modal('hide');\n            });\n\n            $(\"#avdSearchModal\" + \"_\" + that.options.idTable).modal();\n        } else {\n            $(\"#avdSearchModal\" + \"_\" + that.options.idTable).modal();\n        }\n    };\n\n    var createFormAvd = function(pColumns, searchText, that) {\n        var htmlForm = [];\n        htmlForm.push(sprintf('<form class=\"form-horizontal\" id=\"%s\" action=\"%s\" >', that.options.idForm, that.options.actionForm));\n        for (var i in pColumns) {\n            var vObjCol = pColumns[i];\n            if (!vObjCol.checkbox && vObjCol.visible && vObjCol.searchable) {\n                htmlForm.push('<div class=\"form-group\">');\n                htmlForm.push(sprintf('<label class=\"col-sm-4 control-label\">%s</label>', vObjCol.title));\n                htmlForm.push('<div class=\"col-sm-6\">');\n                htmlForm.push(sprintf('<input type=\"text\" class=\"form-control input-md\" name=\"%s\" placeholder=\"%s\" id=\"%s\">', vObjCol.field, vObjCol.title, vObjCol.field));\n                htmlForm.push('</div>');\n                htmlForm.push('</div>');\n            }\n        }\n\n        htmlForm.push('<div class=\"form-group\">');\n        htmlForm.push('<div class=\"col-sm-offset-9 col-sm-3\">');\n        htmlForm.push(sprintf('<button type=\"button\" id=\"btnCloseAvd%s\" class=\"btn btn-default\" >%s</button>', \"_\" + that.options.idTable, searchText));\n        htmlForm.push('</div>');\n        htmlForm.push('</div>');\n        htmlForm.push('</form>');\n\n        return htmlForm;\n    };\n\n    $.extend($.fn.bootstrapTable.defaults, {\n        advancedSearch: false,\n        idForm: 'advancedSearch',\n        actionForm: '',\n        idTable: undefined,\n        onColumnAdvancedSearch: function (field, text) {\n            return false;\n        }\n    });\n\n    $.extend($.fn.bootstrapTable.defaults.icons, {\n        advancedSearchIcon: 'glyphicon-chevron-down'\n    });\n\n    $.extend($.fn.bootstrapTable.Constructor.EVENTS, {\n        'column-advanced-search.bs.table': 'onColumnAdvancedSearch'\n    });\n\n    $.extend($.fn.bootstrapTable.locales, {\n        formatAdvancedSearch: function() {\n            return 'Advanced search';\n        },\n        formatAdvancedCloseButton: function() {\n            return \"Close\";\n        }\n    });\n\n    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales);\n\n    var BootstrapTable = $.fn.bootstrapTable.Constructor,\n        _initToolbar = BootstrapTable.prototype.initToolbar,\n        _load = BootstrapTable.prototype.load,\n        _initSearch = BootstrapTable.prototype.initSearch;\n\n    BootstrapTable.prototype.initToolbar = function() {\n        _initToolbar.apply(this, Array.prototype.slice.apply(arguments));\n\n        if (!this.options.search) {\n            return;\n        }\n\n        if (!this.options.advancedSearch) {\n            return;\n        }\n\n        if (!this.options.idTable) {\n            return;\n        }\n\n        var that = this,\n            html = [];\n\n        html.push(sprintf('<div class=\"columns columns-%s btn-group pull-%s\" role=\"group\">', this.options.buttonsAlign, this.options.buttonsAlign));\n        html.push(sprintf('<button class=\"btn btn-default%s' + '\" type=\"button\" name=\"advancedSearch\" aria-label=\"advanced search\" title=\"%s\">', that.options.iconSize === undefined ? '' : ' btn-' + that.options.iconSize, that.options.formatAdvancedSearch()));\n        html.push(sprintf('<i class=\"%s %s\"></i>', that.options.iconsPrefix, that.options.icons.advancedSearchIcon))\n        html.push('</button></div>');\n\n        that.$toolbar.prepend(html.join(''));\n\n        that.$toolbar.find('button[name=\"advancedSearch\"]')\n            .off('click').on('click', function() {\n                showAvdSearch(that.columns, that.options.formatAdvancedSearch(), that.options.formatAdvancedCloseButton(), that);\n            });\n    };\n\n    BootstrapTable.prototype.load = function(data) {\n        _load.apply(this, Array.prototype.slice.apply(arguments));\n\n        if (!this.options.advancedSearch) {\n            return;\n        }\n\n        if (typeof this.options.idTable === 'undefined') {\n            return;\n        } else {\n            if (!firstLoad) {\n                var height = parseInt($(\".bootstrap-table\").height());\n                height += 10;\n                $(\"#\" + this.options.idTable).bootstrapTable(\"resetView\", {height: height});\n                firstLoad = true;\n            }\n        }\n    };\n\n    BootstrapTable.prototype.initSearch = function () {\n        _initSearch.apply(this, Array.prototype.slice.apply(arguments));\n\n        if (!this.options.advancedSearch) {\n            return;\n        }\n\n        var that = this;\n        var fp = $.isEmptyObject(this.filterColumnsPartial) ? null : this.filterColumnsPartial;\n\n        this.data = fp ? $.grep(this.data, function (item, i) {\n            for (var key in fp) {\n                var fval = fp[key].toLowerCase();\n                var value = item[key];\n                value = $.fn.bootstrapTable.utils.calculateObjectValue(that.header,\n                    that.header.formatters[$.inArray(key, that.header.fields)],\n                    [value, item, i], value);\n\n                if (!($.inArray(key, that.header.fields) !== -1 &&\n                    (typeof value === 'string' || typeof value === 'number') &&\n                    (value + '').toLowerCase().indexOf(fval) !== -1)) {\n                    return false;\n                }\n            }\n            return true;\n        }) : this.data;\n    };\n\n    BootstrapTable.prototype.onColumnAdvancedSearch = function (event) {\n        var text = $.trim($(event.currentTarget).val());\n        var $field = $(event.currentTarget)[0].id;\n\n        if ($.isEmptyObject(this.filterColumnsPartial)) {\n            this.filterColumnsPartial = {};\n        }\n        if (text) {\n            this.filterColumnsPartial[$field] = text;\n        } else {\n            delete this.filterColumnsPartial[$field];\n        }\n\n        this.options.pageNumber = 1;\n        this.onSearch(event);\n        this.updatePagination();\n        this.trigger('column-advanced-search', $field, text);\n    };\n}(jQuery);\n","/home/travis/build/npmtest/node-npmtest-bootstrap-table/node_modules/bootstrap-table/src/extensions/tree-column/bootstrap-table-tree-column.js":"/**\n * @author: KingYang\n * @webSite: https://github.com/kingyang\n * @version: v1.0.0\n */\n\n! function ($) {\n\n    'use strict';\n\n    $.extend($.fn.bootstrapTable.defaults, {\n        treeShowField: null,\n        idField: 'id',\n        parentIdField: 'pid',\n        treeVerticalcls: 'vertical',\n        treeVerticalLastcls: 'vertical last',\n        treeSpacecls: 'space',\n        treeNodecls: 'node',\n        treeCellcls: 'treenode',\n        treeTextcls: 'text',\n        onTreeFormatter: function (row) {\n            var that = this,\n                options = that.options,\n                level = row._level || 0,\n                plevel = row._parent && row._parent._level || 0,\n                paddings = [];\n            for (var i = 0; i < plevel; i++) {\n                paddings.push('<i class=\"' + options.treeVerticalcls + '\"></i>');\n                paddings.push('<i class=\"' + options.treeSpacecls + '\"></i>');\n            }\n\n            for (var i = plevel; i < level; i++) {\n                if (row._last && i === (level - 1)) {\n                    paddings.push('<i class=\"' + options.treeVerticalLastcls + '\"></i>');\n                } else {\n                    paddings.push('<i class=\"' + options.treeVerticalcls + '\"></i>');\n                }\n                paddings.push('<i class=\"' + options.treeNodecls + '\"></i>');\n            }\n            return paddings.join('');\n        }, onGetNodes: function (row, data) {\n            var that = this;\n            var nodes = [];\n            $.each(data, function (i, item) {\n                if (row[that.options.idField] === item[that.options.parentIdField]) {\n                    nodes.push(item);\n                }\n            });\n            return nodes;\n        },\n        onCheckLeaf: function (row, data) {\n            if (row.isLeaf !== undefined) {\n                return row.isLeaf;\n            }\n            return !row._nodes || !row._nodes.length;\n        }, onCheckRoot: function (row, data) {\n            var that = this;\n            return !row[that.options.parentIdField];\n        }\n    });\n\n    var BootstrapTable = $.fn.bootstrapTable.Constructor,\n        _initRow = BootstrapTable.prototype.initRow,\n        _initHeader = BootstrapTable.prototype.initHeader;\n\n    BootstrapTable.prototype.initHeader = function () {\n        var that = this;\n        _initHeader.apply(that, Array.prototype.slice.apply(arguments));\n        var treeShowField = that.options.treeShowField;\n        if (treeShowField) {\n            $.each(this.header.fields, function (i, field) {\n                if (treeShowField === field) {\n                    that.treeEnable = true;\n                    var _formatter = that.header.formatters[i];\n                    var _class = [that.options.treeCellcls];\n                    if (that.header.classes[i]) {\n                        _class.push(that.header.classes[i].split('\"')[1] || '');\n                    }\n                    that.header.classes[i] = 'class=\"' + _class.join(' ') + '\"';\n                    that.header.formatters[i] = function (value, row, index) {\n                        var colTree = [that.options.onTreeFormatter.apply(that, [row])];\n                        colTree.push('<span class=\"' + that.options.treeTextcls + '\">');\n                        if (_formatter) {\n                            colTree.push(_formatter.apply(this, Array.prototype.slice.apply(arguments)));\n                        } else {\n                            colTree.push(value);\n                        }\n                        colTree.push('</span>');\n                        return colTree.join('');\n                    };\n                    return false;\n                }\n            });\n        }\n    };\n\n    var initNode = function (item, idx, data, parentDom) {\n        var that = this;\n        var nodes = that.options.onGetNodes.apply(that, [item, data]);\n        item._nodes = nodes;\n        parentDom.append(_initRow.apply(that, [item, idx, data, parentDom]));\n        var len = nodes.length - 1;\n        for (var i = 0; i <= len; i++) {\n            var node = nodes[i];\n            node._level = item._level + 1;\n            node._parent = item;\n            if (i === len)\n                node._last = 1;\n            initNode.apply(that, [node, $.inArray(node, data), data, parentDom]);\n        }\n    };\n\n\n    BootstrapTable.prototype.initRow = function (item, idx, data, parentDom) {\n        var that = this;\n        if (that.treeEnable) {\n            if (that.options.onCheckRoot.apply(that, [item, data])) {\n                if (item._level === undefined) {\n                    item._level = 0;\n                }\n                initNode.apply(that, [item, idx, data, parentDom]);\n                return true;\n            }\n            return false;\n\n        }\n        return _initRow.apply(that, Array.prototype.slice.apply(arguments));\n    };\n\n} (jQuery);"}